@model TFATERPWebApplication.Areas.Logistics.Models.AssignTasksVM
@using Common;
@{
    ViewBag.Title = "Assign Tasks";
    Layout = null;
}

<link href="~/Content/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Content/bootstrap-multiselect.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        if ('@Model.Mode' == "Delete") {
            $('.form-group :input').prop("disabled", true);
        }

        $('#Task_DocDate').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_StartDate').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_StartTime').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_EndDate').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_EndTime').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aStartDate').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aStartTime').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aEndDate').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aEndTime').datepicker({
            format:'dd-mm-yyyy',
            autoclose: true,
        });
        @* iX9: Load List for Autocomplete Inputs i.e. ControlType='A' *@
        LoadTaskCode()

        @* iX9: Multi-Select Controls *@
        var values = $('#hdnAssignedTo').val();
        $("#hdnAssignedToArray").val(values);
        if (values == "") {
        }
        else {
            $.each(values.split(","), function (i, e) {
            $(".AssignedTolistbox option[value='" + e + "']").prop("selected", true);
            });
        }
        $(".AssignedTolistbox").change(function () {
            $('#hdnAssignedToArray').val('');
            var selected = [];
            $(".AssignedTolistbox :selected").each(function () {
                selected.push($(this).val());
            });
            $('#hdnAssignedToArray').val(selected)
            return false;
        });
        $('.AssignedTolistbox').multiselect({ includeSelectAllOption: true })

        @* iX9: set the selected value to fixed combos *@
        $('#Task_Priority').val('@Model.Task_Priority').attr("selected", "selected");
        @* iX9: set the selected value to fixed combos *@
        $('#Task_Status').val('@Model.Task_Status').attr("selected", "selected");
        @* iX9: set the selected value to fixed combos *@
        $('#Task_Reference').val('@Model.Task_Reference').attr("selected", "selected");
        @* iX9: Date Picker Code *@
        $('#Task_DocDate').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_StartDate').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_StartTime').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_EndDate').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_EndTime').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aStartDate').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aStartTime').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aEndDate').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });
        $('#Task_aEndTime').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });

        @* iX9: Validation rules for the fields where AllowBlank is False in Definition *@
        $('#AssignTasks').validate({
            onfocusout: false,
            errorLabelContainer: $('#ErrorMessage'),
            wrapper: "li",
            rules: {
                Task_Descr: {required: true,},
                Task_TaskCode: {required: true,},
                Task_DocDate: {required: true,},
                Task_Priority: {required: true,},
                Task_Status: {required: true,},
                Task_StartDate: {required: true,},
                Task_EndDate: {required: true,},
                Task_EndTime: {required: true,},
                Task_aStartDate: {required: true,},
                Task_aStartTime: {required: true,},
                Task_aEndDate: {required: true,},
                Task_aEndTime: {required: true,},
                Task_AssignedTo: {required: true,},
                Task_Reference: {required: true,},
                Task_RefDoc: {required: true,},
               },
            messages: {
                Task_Descr: {required: 'Descr is Required',},
                Task_TaskCode: {required: 'TaskCode is Required',},
                Task_DocDate: {required: 'DocDate is Required',},
                Task_Priority: {required: 'Priority is Required',},
                Task_Status: {required: 'Status is Required',},
                Task_StartDate: {required: 'StartDate is Required',},
                Task_EndDate: {required: 'EndDate is Required',},
                Task_EndTime: {required: 'EndTime is Required',},
                Task_aStartDate: {required: 'aStartDate is Required',},
                Task_aStartTime: {required: 'aStartTime is Required',},
                Task_aEndDate: {required: 'aEndDate is Required',},
                Task_aEndTime: {required: 'aEndTime is Required',},
                Task_AssignedTo: {required: 'AssignedTo is Required',},
                Task_Reference: {required: 'Reference is Required',},
                Task_RefDoc: {required: 'RefDoc is Required',},
            }
        });

        @* iX9: Input Contraints to limit the inputs to required Input Type i.e. String, Numeric etc. *@
        $("#Task_TaskCode").constrain({ allow: { regex: "[0-9.-]" } });
        $("#Task_Priority").constrain({ allow: { regex: "[a-zA-Z0-9()#!%$*,.\/:-+<>; ]" } });
        $("#Task_Status").constrain({ allow: { regex: "[a-zA-Z0-9()#!%$*,.\/:-+<>; ]" } });
        $("#Task_AssignedTo").constrain({ allow: { regex: "[a-zA-Z0-9()#!%$*,.\/:-+<>; ]" } });
        $("#Task_Reference").constrain({ allow: { regex: "[a-zA-Z0-9()#!%$*,.\/:-+<>; ]" } });
        $("#Task_RefDoc").constrain({ allow: { regex: "[a-zA-Z0-9()#!%$*,.\/:-+<>; ]" } });

        @* iX9: Executed when Save/Submit button is Pressed *@
        $('#Submit').click(function (event) {
            event.preventDefault();
            //if ($("#AssignTasks").validate().form() == false)
            //    return;

            if ($("#Task_Descr").val() == null || $("#Task_Descr").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Task Description is Required..');
                return;
            }
            if ($("#Task_TaskCode").val() == null || $("#Task_TaskCode").val() == 0)
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Task Type is Required..');
                return;
            }
            if ($("#Task_DocDate").val() == null || $("#Task_DocDate").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('DocDate is Required..');
                return;
            }
            if ($("#Task_Priority").val() == null || $("#Task_Priority").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Priority is Required..');
                return;
            }
            if ($("#Task_Status").val() == null || $("#Task_Status").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Status is Required..');
                return;
            }
            if ($("#Task_StartDate").val() == null || $("#Task_StartDate").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('EndDate is Required..');
                return;
            }
            if ($("#Task_EndDate").val() == null || $("#Task_EndDate").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('EndDate is Required..');
                return;
            }
            if ($("#Task_EndTime").val() == null || $("#Task_EndTime").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reminder: by EMail is Required..');
                return;
            }
            if ($("#Task_aStartDate").val() == null || $("#Task_aStartDate").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reminder: by EMail is Required..');
                return;
            }
            if ($("#Task_aStartTime").val() == null || $("#Task_aStartTime").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reminder: by EMail is Required..');
                return;
            }
            if ($("#Task_aEndDate").val() == null || $("#Task_aEndDate").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reminder: by EMail is Required..');
                return;
            }
            if ($("#Task_aEndTime").val() == null || $("#Task_aEndTime").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reminder: by EMail is Required..');
                return;
            }
            if ($("#Task_AssignedTo").val() == null || $("#Task_AssignedTo").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Assigned To is Required..');
                return;
            }
            if ($("#Task_Reference").val() == null || $("#Task_Reference").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reference is Required..');
                return;
            }
            if ($("#Task_RefDoc").val() == null || $("#Task_RefDoc").val() == '')
            {
                $("#ErrorMessage").show();
                $("#ErrorMessage").text('Reference Doc is Required..');
                return;
            }
            var url = '@Url.Action("SaveData")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Task_Code"] = $("#Task_Code").val();
            ModelData["Task_Descr"] = $("#Task_Descr").val();
            ModelData["Task_TaskCode"] = $("#Task_TaskCode").val();
            ModelData["Task_DocDateVM"] = $("#Task_DocDate").val();
            ModelData["Task_Priority"] = $("#Task_Priority").val();
            ModelData["Task_Status"] = $("#Task_Status").val();
            ModelData["Task_StartDateVM"] = $("#Task_StartDate").val();
            ModelData["Task_StartTimeVM"] = $("#Task_StartTime").val();
            ModelData["Task_EndDateVM"] = $("#Task_EndDate").val();
            ModelData["Task_EndTimeVM"] = $("#Task_EndTime").val();
            ModelData["Task_EmailReminder"] = $("#Task_EmailReminder").is(':checked');
            ModelData["Task_SMSReminder"] = $("#Task_SMSReminder").is(':checked');
            ModelData["Task_ScreenReminder"] = $("#Task_ScreenReminder").is(':checked');
            ModelData["Task_aStartDateVM"] = $("#Task_aStartDate").val();
            ModelData["Task_aStartTimeVM"] = $("#Task_aStartTime").val();
            ModelData["Task_aEndDateVM"] = $("#Task_aEndDate").val();
            ModelData["Task_aEndTimeVM"] = $("#Task_aEndTime").val();
            ModelData["Task_AssignedTo"] = $("#hdnAssignedToArray").val();
            ModelData["Task_Reference"] = $("#Task_Reference").val();
            ModelData["Task_RefDoc"] = $("#Task_RefDoc").val();
            ModelData["Mode"] = '@Model.Mode';
            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        window.location.href = "/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType";
                        $("#ErrorMessage").hide();
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);                    }
                },
            });
        });
    });
    @* iX9: Autocomplete Code i.e. ControlType='A' and vDepend<>'' *@
    function LoadTaskCode() {
        var url = '@Url.Action("AutoCompleteTaskCode")'
        $('#Task_TaskCode').select2({
            minimumInputLength: 2,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 2,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.Task_TaskCode', text: '@Model.TaskCodeName' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

</script>

@* iX9: Form Design *@
<header class="header fixed-top" style="position:fixed;background-color:lightgray;padding:6px;width:100%;margin-top:5px;">
    <div class="fixhead">
        <b class="CodeSt">@Model.Header</b>
        <span class="tools pull-right">
            <a href="~/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="color:white;font-weight:bolder;font-size:13px;padding:3px 10px;" id="Cancel2">X</a>
        </span>
        <span class="tools pull-right">
            <b class="CodeSt">@Model.Mode Mode</b>
        </span>
    </div>
</header>

<section class="panel" style="margin-bottom:0px;">
    <div class="panel-body">
        <div class="form-horizontal " id="AssignTasks" role="form" style="margin-top:15px;">
            <div id="ErrorMessage" name="ErrorMessage" class="alert alert-danger" style="display: none"></div>
            <br />
            @* iX9: -- Code for Header Starts -- *@
            @* iX9: Tab Body Panels *@
            <div class="form-group">
                <label class="col-sm-1 control-label">Task ID:</label>
                <div class="col-sm-1">
                    @if (Model.Mode != "Add")
                    {
                        @Html.TextBoxFor(x => x.Task_Code, new { @maxlength = "10", @readonly = "readonly", @class = "form-control", @style = "width:100px;text-align:right;", @Name = "Task_Code", @Value = Model.Task_Code, @Id = "Task_Code" })
                    }
                    else
                    {
                        @Html.TextBoxFor(x => x.Task_Code, new { @maxlength = "10", @class = "form-control", @style = "width:100px;text-align:right;", @Name = "Task_Code", @readonly = "readonly", @Value = Model.Task_Code, @Id = "Task_Code" })
                    }
                </div>
                <div class="col-sm-2"></div>
                <label class="col-sm-1 control-label">Task Description:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_Descr, new { @maxlength = "10", @class = "form-control", @Name = "Task_Descr", @Value = Model.Task_Descr, @Id = "Task_Descr" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Task Type:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_TaskCode, new { @class = "input-large-query", @style = "width:100%;margin-top:2px;", @id = "Task_TaskCode", @Value = Model.Task_TaskCode, @Name = "Task_TaskCode" })
                </div>
                <label class="col-sm-1 control-label">DocDate:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_DocDateVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_DocDate", @id = "Task_DocDate", @Value = Model.Task_DocDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Priority:</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(m => m.Task_Priority, Model.PriorityList, new { @class = "form-control", @Id = "Task_Priority", @Name = "Task_Priority", @style = "border-color:black;height:24px;padding:2px 4px;" })
                </div>
                <label class="col-sm-1 control-label">Status:</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(m => m.Task_Status, Model.StatusList, new { @class = "form-control", @Id = "Task_Status", @Name = "Task_Status", @style = "border-color:black;height:24px;padding:2px 4px;" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">EndDate:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_StartDateVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_StartDate", @id = "Task_StartDate", @Value = Model.Task_StartDate.ToString("dd/MM/yyyy") })
                </div>
                <label class="col-sm-1 control-label">StartTime:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_StartTimeVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_StartTime", @id = "Task_StartTime", @Value = Model.Task_StartTime.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">EndDate:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_EndDateVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_EndDate", @id = "Task_EndDate", @Value = Model.Task_EndDate.ToString("dd/MM/yyyy") })
                </div>
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_EndTimeVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_EndTime", @id = "Task_EndTime", @Value = Model.Task_EndTime.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label" style="font-size:13px;text-decoration: underline;font-weight:bold;">Alert / Reminder</label>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-1">
                    @Html.CheckBoxFor(x => x.Task_EmailReminder, new { @value = Model.Task_EmailReminder, @id = "Task_EmailReminder", @name = "Task_EmailReminder", @style = "height:16px;width:16px;" })
                </div>
                <label class="col-sm-1 control-label">Reminder: by SMS:</label>
                <div class="col-sm-1">
                    @Html.CheckBoxFor(x => x.Task_SMSReminder, new { @value = Model.Task_SMSReminder, @id = "Task_SMSReminder", @name = "Task_SMSReminder", @style = "height:16px;width:16px;" })
                </div>
                <label class="col-sm-1 control-label">Reminder: on Screen:</label>
                <div class="col-sm-1">
                    @Html.CheckBoxFor(x => x.Task_ScreenReminder, new { @value = Model.Task_ScreenReminder, @id = "Task_ScreenReminder", @name = "Task_ScreenReminder", @style = "height:16px;width:16px;" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label" style="font-size:13px;text-decoration: underline;font-weight:bold;">Alert / Reminder</label>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_aStartDateVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_aStartDate", @id = "Task_aStartDate", @Value = Model.Task_aStartDate.ToString("dd/MM/yyyy") })
                </div>
                <label class="col-sm-3 control-label" style="font-size:13px;text-decoration: underline;font-weight:bold;">Alert / Reminder</label>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_aStartTimeVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_aStartTime", @id = "Task_aStartTime", @Value = Model.Task_aStartTime.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label" style="font-size:13px;text-decoration: underline;font-weight:bold;">Alert / Reminder</label>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_aEndDateVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_aEndDate", @id = "Task_aEndDate", @Value = Model.Task_aEndDate.ToString("dd/MM/yyyy") })
                </div>
                <label class="col-sm-3 control-label" style="font-size:13px;text-decoration: underline;font-weight:bold;">Alert / Reminder</label>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reminder: by EMail:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_aEndTimeVM, new { @type = "text", @class = "form-control", @style = "width:125px;", @Name = "Task_aEndTime", @id = "Task_aEndTime", @Value = Model.Task_aEndTime.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Assigned To:</label>
                <div class="col-sm-3">
                    @Html.ListBoxFor(x => x.AssignedToItemX, Model.AssignedToMultiX, new { @class = "AssignedTolistbox", @id = "Task_AssignedTo" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Reference:</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(m => m.Task_Reference, Model.ReferenceList, new { @class = "form-control", @Id = "Task_Reference", @Name = "Task_Reference", @style = "border-color:black;height:24px;padding:2px 4px;" })
                </div>
                <label class="col-sm-1 control-label">Reference Doc:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Task_RefDoc, new { @maxlength = "70", @class = "form-control", @Name = "Task_RefDoc", @Value = Model.Task_RefDoc, @Id = "Task_RefDoc" })
                </div>
            </div>
            @* iX9: -- Code for Header Ends -- *@
        </div>
    </div>
</section>

<footer class="footer-section" style="height:33px;position:fixed;background-color:#4B4A4A;padding:3px;color:white;">
    <div class="row">
        <div class="col-sm-5">
        </div>
        <div class="col-sm-3" style="margin-top:4px;color:white;font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            T.FAT ERP-iX9, Suchan Software Private Limited
        </div>
        <div class="col-sm-4">
            <div class="pull-right">
                @if (Model.Mode != "View")
                {
                    if (Model.Mode == "Delete")
                    {
                        <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="Submit">Delete</button>
                    }
                    else
                    {
                        <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="Submit">Save</button>
                    }
                }
                <a href="~/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="font-size: 13px;padding:3px 12px;" id="Cancel">Cancel</a>
            </div>
        </div>
    </div>
</footer>

<input type="hidden" id="hdnAssignedToArray" />
@Html.HiddenFor(x => x.Task_AssignedTo, new { @id = "hdnAssignedTo" })
<input type="hidden" id="controllername" />
@*
    Code Auto Generated on Tue 28-May-2019 05:14 PM
    Engine: iX9Generator, ver: 3.7 Revision: 42
    by Team Suchan, T.FAT *@

