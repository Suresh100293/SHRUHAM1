@model TFATERPWebApplication.Areas.Logistics.Models.LoadingToDispatchVM
@using Common;
@{
    ViewBag.Title = "FM Master";
    Layout = null;
}
<style>
    .AutoRetrive {
        background: #95cac7;
        color: black;
    }

    #NodddtificationDiv {
        background-color: #21b11fd9;
        height: 100px;
        width: 100px;
        animation-duration: 4s;
        animation-name: example;
        border-radius: 60px;
        padding: 30px 3px 0 3px;
        text-align: center;
        color: cornsilk;
        font-size: 14px;
        font-weight: bold;
    }
</style>
<style>
    .circle {
        width: 38px;
        height: 84px;
        position: relative;
    }

    .icon {
        position: absolute;
        top: 39%;
        left: 33%;
        transform: translate(-50%, -50%);
        width: 10px;
        height: 10px;
        display: block;
    }

    .multiselect {
        width: 205px !important;
        text-align: left !important;
    }

    /*.multiselect .dropdown-toggle .btn btn-default .disabled:hover{
        background-color:aqua !important;
    }*/
    .btn-group > .multiselect:hover {
        color: red !important;
    }

    .bold {
        font-weight: bold !important;
    }

    hr {
        border: 1px solid #dec0c0;
    }

    fieldset {
        border: 1px solid #ddd !important;
        margin: 0;
        /*xmin-width: 0;*/
        padding: 10px;
        position: relative;
        border-radius: 4px;
        background-color: #f5f5f5;
        padding-left: 5px !important;
    }


    legend {
        /*margin-left: 30%;
        text-align: center;
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 0px;
        width: 35%;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px 5px 5px 10px;
        background-color: #dec0c0;*/
        margin-left: 1%;
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 0px;
        border: 1px solid #ddd;
        border-radius: 15px;
        padding: 5px 45px 5px 45px;
        background-color: white;
        width: auto;
        color: red;
    }

    .legend2 {
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        /*background-color: #dec0c0;*/
        background-color: #57c8f1;
        color: white !important;
        width: auto;
        z-index: auto;
        padding: 5px 20px 5px 20px;
        margin-bottom: 0px !important;
        margin-top: -36px;
        height: 33px;
    }

    .legend2 {
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        /*background-color: #dec0c0;*/
        background-color: #57c8f1;
        color: white !important;
        width: auto;
        z-index: auto;
        padding: 5px 20px 5px 20px;
        margin-bottom: 0px !important;
        margin-top: -40px;
    }

    .legend3 {
        top: -0.0em;
        color: white !important;
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        background-color: #57c8f1;
        line-height: 1.2em;
        margin-top: -40px;
        padding: 5px 20px 5px 20px;
    }

    .legend5 {
        top: -0.0em;
        color: white !important;
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        background-color: #57c8f1;
        line-height: 1.2em;
        margin-top: -40px;
        padding: 5px 30px 5px 30px;
    }

    .toggle {
        border-radius: 15px !important;
        margin-top: -35px !important;
    }

        .toggle.btn {
            min-width: 77px !important;
            min-height: 34px;
        }
</style>
<style>
    .example {
        border: 1px solid #ccc !important;
        border-collapse: collapse !important;
        width: max-content;
        font-size: 9px !important;
        white-space: nowrap !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
    }

        .example th {
            background-color: #F7F7F7 !important;
            font-weight: bold !important;
        }

        .example th, .example td {
            border: 1px solid #ccc !important;
            padding: 5px !important;
            font-size: 12px !important;
        }

        .example, .example table td {
            border: 0px solid #ccc !important;
        }
</style>
<style>
    #btnClear {
        display: inline-block;
        padding: 3px 3px;
        font-size: 12px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: white;
        background: linear-gradient(#53b972,#2fc177);
        border: none;
        border-radius: 24px;
        box-shadow: 0 9px #999;
    }

        #btnClear:hover {
            background: linear-gradient(#d03425,#bb1f1f);
        }

        #btnClear:active {
            background: linear-gradient(#53b972,#2fc177);
            box-shadow: 0 5px #666;
            transform: translateY(4px);
        }
</style>

<script src="@Url.Content("~/Content/js/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/js/jquery.constrain.js")" type="text/javascript"></script>


<link href="~/Content/ToogleCreate/CreateTgl.css" rel="stylesheet" />
<script src="~/Content/ToogleCreate/CreateTgl.js"></script>
<script type="text/javascript">
    var value = 0;

    $(document).ready(function () {

        if (('@Model.Mode' == "View") || ('@Model.Mode' == "Delete")) {
            $('.form-group :input').prop("disabled", true);
            $('#btnAttachment').prop("disabled", true);
            $('#btnClear').prop("disabled", true);
            $('#btnDestination').prop("disabled", false);
            $('#btnSchedule').prop("disabled", false);
        } else {
            $('#FmPanelDetails .form-group :input').prop("disabled", true);
            $('#btnSchedule').prop("disabled", false);
            $('#btnDestination').prop("disabled", false);

        }

        $("#ArrivalKM").constrain({ allow: { regex: "[0-9]" } });
        $("#DispachKM").constrain({ allow: { regex: "[0-9]" } });

       


        LoadVehicleGroupStatus();
        AddButtonValidation();
        LoadVehicle("");
        LoadBroker();
        LoadFrom();
        ComboDestination();
        LoadTo();
        LoadVehicleGroupCategory();
        LoadPayableAt();

        $("#btnFmDetailsToogle").click(function () {
            $("#FmDetailsToogle").slideToggle("slow");
        });

        

        

        

        


        

        $('#btnGetPendingLC').click(function (event) {
            event.preventDefault();
            var url = '@Url.Action("LoadTabPartialView")';
            var DTO = { Reco: $("#Document").val() };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    var LoadDownLoadFiles = $("#ShowPendingLCList");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    $('#GetPEndingLCLIst').modal('show');
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                },
            });
        });
       $('#btnLoadIT').click(function (event) {
            event.preventDefault();
            var LrList = "";
            $("#LcCombo .Ordertable-row").each(function () {
                if ($(this).find('input[type=checkbox]').prop("checked") == true) {
                    var LRValue = $(this).find(".LCValue").text();
                    LrList = LrList + LRValue + ",";
                }
           });
           if (LrList!="") {
               var url = '@Url.Action("LoadGridView")';
               var DTO = { LClist: LrList.substr(0, LrList.length - 1) };
               $.ajax({
                   type: "POST",
                   dataType: "json",
                   data: JSON.stringify(DTO),
                   cache: false,
                   url: url,
                   contentType: "application/json; charset=utf-8",
                   beforeSend: function () {
                       $('.spinner').show();
                   },
                   success: function (data) {
                       var LoadDownLoadFiles = $("#LoadedLC");
                       $("#ErrorMessage").hide();
                       $('.spinner').hide();
                       LoadDownLoadFiles.html('');
                       LoadDownLoadFiles.html(data.Html);


                   },
               });
           }
        });




        $('#btnFMLoading').click(function (event) {
            event.preventDefault();
            var url = '/Logistics/Loading_Dispatch/SaveData';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Document"] = $("#Document").val();
            ModelData["From"] = $("#From").val();
            //SaveLcCombo
            var LcList = "";
            $("#SaveLcCombo  > tbody  > tr").each(function () {
                var LCValue = $(this).find(".SaveLcComboLC").text();
                LcList = LcList + LCValue + ",";
            });
            ModelData["LcNo"] = LcList.substr(0, LcList.length - 1);

            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        $("#ErrorMessageLC").hide();
                        //GetloadLCList();
                        
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);
                    }
                },
            });
        });
        $('#btnGetUnloadinglr').click(function (event) {
                event.preventDefault();

            var url = '@Url.Action("UnloadTabPartialView")';
            var DTO = { Fmno: $("#FMNO").val() };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        var LoadDownLoadFiles = $("#ShowLRListOFUnload");
                        $("#ErrorMessage").hide();
                        $('.spinner').hide();
                        $('#GetLRLIst').modal('show');
                        LoadDownLoadFiles.html('');
                        LoadDownLoadFiles.html(data.Html);

                    },
                });
        });
        $('#btnGetAllMaterial').click(function (event) {
                event.preventDefault();

            var url = '@Url.Action("AllMaterialForUnloadPartialView")';
            var DTO = { Fmno: $("#FMNO").val() };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        var LoadDownLoadFiles = $("#ShowLRListOFUnload");
                        $("#ErrorMessage").hide();
                        $('.spinner').hide();
                        $('#GetLRLIst').modal('show');
                        LoadDownLoadFiles.html('');
                        LoadDownLoadFiles.html(data.Html);

                    },
                });
        });


        $('#btnGetLR').click(function (event) {
            debugger;
                event.preventDefault();
            $("#GetLRLIst").modal("hide");
            var RecoList = "", Gqty = "", DQty = "", Weight = "";
            $("#UnloadReadyForLrListexample1 > tbody  > tr").each(function () {
                    if ($(this).find('input[type=checkbox]').prop("checked") == true) {
                        debugger;
                        var RecorKey = $(this).find(".RecorKey").text();
                        var LGQty = $(this).find(".LGQty").val();
                        var LDQty = $(this).find(".LDQty").val();
                        var CalculateWeight = $(this).find(".CalculateWeight").val();
                        RecoList = RecoList + RecorKey + ",";
                        Gqty = Gqty + LGQty + ",";
                        DQty = DQty + LDQty + ",";
                        Weight = Weight + CalculateWeight + ",";
                    }
                });

                var url = '@Url.Action("UnLoadGridView")';
            var DTO = { RecoList: RecoList.substr(0, RecoList.length - 1), GQty: Gqty.substr(0, Gqty.length - 1), DQty: DQty.substr(0, DQty.length - 1), Weight: Weight.substr(0, Weight.length - 1) };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {

                        var LoadDownLoadFiles1 = $("#UnloadPartialViewDiv");
                        $("#ErrorMessage").hide();
                        $('.spinner').hide();
                        LoadDownLoadFiles1.html('');
                        LoadDownLoadFiles1.html(data.Html);

                    },
                });

            });

        $('#btnFMUNLoading').click(function (event) {
            event.preventDefault();
            var url = '/Logistics/UnLoading/SaveData';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Document"] = $('#Document').val();;
            ModelData["From"] = $('#From').val();;

            var UnloadLrList = [];

            $("#UnloadGridexample1 > tbody  > tr").each(function () {
                var tds = $(this).find('td');
                debugger;
                var myDets = {
                    recordkey: tds.eq(0).text(),
                    unloadGQty: tds.find(".LGQty").val(),
                    unloadDQty: tds.find(".LDQty").val(),
                    UnloadLRDate: tds.eq(20).text(),
                    UnloadLRTime: tds.eq(21).text(),
                }
                UnloadLrList.push(myDets);
            });


            ModelData["LRLIst"] = UnloadLrList;
            var DeleteUnloadLr = $("#DeleteUnloadLr").val();
            ModelData["DeleteUnloadLR"] = DeleteUnloadLr == "" ? null : DeleteUnloadLr.substring(0, DeleteUnloadLr.length - 1);

            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        $("#ErrorMessageLC").hide();
                        //GetUnloadLCList();
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);
                        $('.spinner').hide();
                    }
                },
            });
        });

        $("#btnVehicleStatus").click(function (event) {
            event.preventDefault();
            $("#ErrorMessageLC").hide();
            var url = '@Url.Action("Clear")';
                var ModelData = {};
            ModelData["Document"] = $('#Document').val();
            ModelData["LastRoute"] = true;
            ModelData["vehicleStatus"] = $('#vehicleStatus').val();

                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            window.location.href = "/Logistics/LoadingToDispatch?ViewDataId=LoadingToDispatch&Module=Transactions&optioncode=LoadingToDispatch&Header=LoadingToDispatch&Controller2=LoadingToDispatch";
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);
                        }
                    },
                });
        })
        

        $("#btnPhotoupload").click(function (event) {
            event.preventDefault();
            var size = 0;
            var formData = new FormData();
            var totalFiles = document.getElementById("Attachment_UploadFile").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("Attachment_UploadFile").files[i];
                size += file.size;
                if (file.size < 1048576) {
                    formData.append("UploadFile", file);
                }
                else {
                    alert('File Size Must Not Exceed 1 MB')
                    return;
                }
            }
            if (size > 1048576) {
                alert('File Size Must Not Exceed 1 MB')
                return;
            }
            $.ajax({
                type: "POST",
                url: '@Url.Action("AttachDocument")',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#ShowAllFile').html(data.Html);
                    AttachMentList();
                },
                error: function (error) {
                    alert("errror");
                }
            });
        });

        function AttachMentList() {

        var url = '@Url.Action("AttachDocumentList")';
        var DTO = {  };
            $.ajax({

                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data)
                {
                    var LoadDownLoadFiles = $("#AttachList");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                },
                error: function (error) {
                    alert("errror");
                }
            });
    }
        $("#btnAttachSubmit").click(function (event) {
            event.preventDefault();
            //$("#LockModal").modal("hide");
            if ($("#Document").val()!="")
            {
                var url = '@Url.Action("SaveAttachment")';
                var ModelData = {};

                ModelData["Document"] = $("#Document").val();
                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data)
                    {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            $("#ErrorMessage").hide();
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);                    }
                    },
                    });
            }
        });
    });
    function ArrivalPartial() {
        var url = '@Url.Action("ArrivalPartial")';
        var DTO = { Reco: $("#Document").val() };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data)
                {
                    var LoadDownLoadFiles = $("#ArrivalDiv");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                },
                error: function (error) {
                    alert("errror");
                }
            });
    }

    function DispatchPartial() {
        var url = '@Url.Action("DispatchPartial")';
        var DTO = { Reco: $("#Document").val() };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data)
                {
                    var LoadDownLoadFiles = $("#DispatchDiv");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                },
                error: function (error) {
                    alert("errror");
                }
            });
    }




    function ArrivalCheck() {
        debugger;
        var Msg = "";
        var Branch = [], Arrivaldate1 = [], ArrivalTime1 = [], ArrivalKm1 = [], DispatchDate1 = [], DispatchTime1 = [], DispatchKM1 = [];
        $("#tblArrival  > tbody  > tr").each(function () {

            Branch.push($(this).find(".ArrivalArea").text());


            var Arrivaldate = $(this).find(".ArrivalDate").val();
            if (Arrivaldate == '') {
                Arrivaldate1.push("ArrivalDate Required...");
            } else {
                Arrivaldate1.push("");
            }
            var ArrivalTime = $(this).find(".ArrivalTime").val();
            if (ArrivalTime == '') {
                ArrivalTime1.push("ArrivalTime Required...");
            } else {
                ArrivalTime1.push("");
            }
            var ArrivalKm = $(this).find(".ArrivalKM").val();
            if (ArrivalKm == ''|| ArrivalKm == '0') {
                ArrivalKm1.push("ArrivalKM Required...");
            } else {
                ArrivalKm1.push("");
            }

        });

        $("#tblDispatch  > tbody  > tr").each(function () {
            var DispatchDate = $(this).find(".DispatchDate").val();
            if (DispatchDate == '') {
                DispatchDate1.push("DispatchDate Required...");
            } else {
                DispatchDate1.push("");
            }
            var DispatchTime = $(this).find(".DispatchTime").val();
            if (DispatchTime == '') {
                DispatchTime1.push("DispatchTime Required...");
            } else {
                DispatchTime1.push("");
            }
            var DispatchKM = $(this).find(".DispachKM").val(); 
            if (DispatchKM == ''|| DispatchKM == '0') {
               // Msg += "" + DBranch + " :-\DispachKM Required..."
                DispatchKM1.push("DispachKM Required...");
            } else {
                DispatchKM1.push("");
            }
        });
        
        for (var i = 0; i < Arrivaldate1.length; i++) {
            debugger;
           
            if (Msg == "") {
                Msg = Branch[i]+"\n";
                if (Arrivaldate1[i]!="") {
                    Msg += Arrivaldate1[i] +"\n";
                }
                if (ArrivalTime1[i] != "") {
                    Msg += ArrivalTime1[i] + "\n";
                }
                if (ArrivalKm1[i] != "") {
                    Msg += ArrivalKm1[i] + "\n";
                }
                if (DispatchDate1[i] != "") {
                    Msg += DispatchDate1[i] + "\n";
                }
                if (DispatchTime1[i] != "") {
                    Msg +=  DispatchTime1[i] + "\n";
                }
                if (DispatchKM1[i] != "") {
                    Msg +=  DispatchKM1[i] + "\n";
                }

            } else {
                Msg += Branch[i]+"\n"  ;
                if (Arrivaldate1[i] != "") {
                    Msg +=  Arrivaldate1[i] + "\n";
                }
                if (ArrivalTime1[i] != "") {
                    Msg +=  ArrivalTime1[i] + "\n";
                }
                if (ArrivalKm1[i] != "") {
                    Msg += ArrivalKm1[i] + "\n";
                }
                if (DispatchDate1[i] != "") {
                    Msg +=  DispatchDate1[i] + "\n";
                }
                if (DispatchTime1[i] != "") {
                    Msg +=  DispatchTime1[i] + "\n";
                }
                if (DispatchKM1[i] != "") {
                    Msg +=  DispatchKM1[i] + "\n";
                }
            }
        }



        //if ($("#ArrivalDate").val() == '') {
        //    Msg +="\nArrivalDate Required..."
        //}
        //if ($("#ArrivalTime").val() == '') {
        //    Msg +="\nArrivalTime Required..."
        //}
        //if ($("#ArrivalKM").val() == '' || $("#ArrivalKM").val() == '0') {
        //    Msg +="\nArrival Km Required..."
        //}
        //if ($("#DispatchDate").val() == '') {
        //    Msg +="\nDispatchDate Required..."
        //}
        //if ($("#DispatchTime").val() == '') {
        //    Msg +="\nDispatchTime Required..."
        //}
        //if ($("#DispachKM").val() == '' || $("#DispachKM").val() == '0') {
        //    Msg +="\nDispach Km Required..."
        //}
        if (Msg=="") {
            LoadingCheck();
        } else {
            alert(Msg);
        }
    }
    function LoadingCheck() {
        debugger;
        if ('@Model.MaterialAvailableForLoading'=="True") {
            var LcList = "";
            $("#SaveLcCombo  > tbody  > tr").each(function () {
                var LCValue = $(this).find(".SaveLcComboLC").text();
                LcList = LcList + LCValue + ",";
            });
            if (LcList=="") {
                var result = confirm("Material Available For Loading But U Cannot Load Anything /n R U Sure To Move On?");
                if (result) {
                    UnloadingCheck();
                }
            } else {
                UnloadingCheck();
            }
        } else {
            UnloadingCheck();
        }
    }
    function UnloadingCheck() {
        debugger;
        var UnloadSetUp ='@Model.tfatunloadsetup.UnloadMadatory';
        var ReadyForUnload ='@Model.MaterialAvailableForUnLoading';
        if (UnloadSetUp == "True" && ReadyForUnload == "True") {
            var UnloadSucessfully = true;
            $("#UnloadBoby .Ordertable-row").each(function () {
                var TottalQty = parseInt($(this).find(".Qty").text());
                var TransactionQty = parseInt($(this).find(".LGQty").val()) + parseInt($(this).find(".LDQty").val());
                if (TottalQty != TransactionQty) {
                    UnloadSucessfully = false;
                    return false;
                }
            });
            if (UnloadSucessfully) {
                FinalClear();
            } else {
                alert("Please Unload Your Material....!");
            }
        } else if (UnloadSetUp == "True" && ReadyForUnload == "False") {
            FinalClear();
        } else if (UnloadSetUp == "False" && ReadyForUnload == "True") {

            var UnloadSucessfully = true;
            $("#UnloadBoby .Ordertable-row").each(function () {
                var TottalQty = parseInt($(this).find(".Qty").text());
                var TransactionQty = parseInt($(this).find(".LGQty").val()) + parseInt($(this).find(".LDQty").val());
                if (TottalQty != TransactionQty) {
                    UnloadSucessfully = false;
                    return false;
                }
            });
            if (UnloadSucessfully) {
                FinalClear();
            } else {
                var result = confirm("Material Available For UnLoading But U Cannot Un-Load Anything /n R U Sure To Move On?");
                if (result) {
                    FinalClear();
                }
            }


        } else if (UnloadSetUp == "False" && ReadyForUnload == "False") {
            FinalClear();
        }
    }
    function FinalClear() {
        debugger;
        var model = @Html.Raw(@ViewBag.LastDest);
            if (model == 0) {
                $('#UpdateVehicleStatus').modal('show');
            } else {
                var url = '@Url.Action("Clear")';
                var ModelData = {};
                ModelData["Document"] = $('#Document').val();
                ModelData["LastRoute"] = false;
                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            window.location.href = "/Logistics/LoadingToDispatch?ViewDataId=LoadingToDispatch&Module=Transactions&optioncode=LoadingToDispatch&Header=LoadingToDispatch&Controller2=LoadingToDispatch";
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);
                        }
                    },
                });
            }
    }
    function Clear() {
        debugger;
        var ArrivalDispatchCode = '@Model.tfatLogisticsSystemFlow.Arrival_and_Dispatch_Vehicle_Category_Mandatory'.split(',');
        var ArrivalDispatch = false;
        for (var i = 0; i < ArrivalDispatchCode.length; i++) {
            if (ArrivalDispatchCode[i] == $("#VehicleGroup").val()) {
                ArrivalDispatch = true;
                break;
            }
        }
        if (ArrivalDispatch) {
            ArrivalCheck();
        } else {
            LoadingCheck();
        }
    }
    function GetUnloadLCList() {
        var url = '@Url.Action("UnloadTabPartialView")';
        var DTO = { Fmno: $("#FMNO").val() };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        var LoadDownLoadFiles = $("#UnloadPartialViewDiv");
                        $("#ErrorMessage").hide();
                        $('.spinner').hide();
                        LoadDownLoadFiles.html('');
                        LoadDownLoadFiles.html(data.Html);

                    },
                });
    }
    function GetloadLCList() {
        debugger;
        var url = '@Url.Action("LoadTabPartialView")';
        var DTO = { Reco: $("#Document").val() };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        var LoadDownLoadFiles = $("#LoadedLC");
                        $("#ErrorMessage").hide();
                        $('.spinner').hide();
                        LoadDownLoadFiles.html('');
                        LoadDownLoadFiles.html(data.Html);
                        //checkActivityofLoading();
                    },
                });
    }

    function checkActivityofLoading() {
        //$("#CheckActivity").val($("#SaveLcCombo .Ordertable-row").length);
    }
    
    function LoadingClear1(id) {


            var url = '/Logistics/Loading_Dispatch/ClearLoading';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
        ModelData["Document"] = id;
        ModelData["UpdateFmStatus"] = true;
        ModelData["ScriptLRlist"] = "Skip";

            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {

                    if (data.Status == 'Success') {

                        $('.spinner').hide();
                        $("#ErrorMessageLC").hide();
                        
                        

                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);
                    }
                },
            });
    }
    function LoadVehicleGroupStatus() {

            var url = '@Url.Action("GetVehicleGroup")'
            $('#VehicleGroup').select2({
                minimumInputLength: 0,
                placeholder: 'Search',
                ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

                initSelection: function (element, callback) {
                    var data = { id: '@Model.VehicleGroup', text: '@Model.VehicleGroup_Name' };
                    callback(data);
                },

                formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

                formatSelection: function (exercise) {

                    AddButtonValidation();
                    LoadVehicle($("#VehicleGroup").val());
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            })
    };
    function AddButtonValidation() {

        var VehicleStatus = $("#VehicleGroup").val();
        if (VehicleStatus == "100001") {
            $("#HideHireBtn").hide();
            $("#ShowHireBtn").show();
        } else {
            $("#HideHireBtn").show();
            $("#ShowHireBtn").hide();
        }
    }function LoadVehicle(value) {


        var url = '@Url.Action("GetVehicle")'
        $('#VehicleNo').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        TruckStatus: value,
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.VehicleNo', text: '@Model.VehicleNo' };
                callback(data);
            },
            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })

    };
    function LoadBroker() {
        var url = '@Url.Action("GetBroker")'
        $('#Broker').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },
            initSelection: function (element, callback) {
                var data = { id: '@Model.Broker', text: '@Model.Broker_Name' };
                callback(data);
            },
            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
    function LoadFrom() {
        var flag = false;
        var url = '@Url.Action("From")'
        $('#From').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        Flag: true
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.From', text: '@Model.From_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
    function ComboDestination() {
        var url = '@Url.Action("AddDestination")'
        $('#DestCombo').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        From: $('#From').val(),
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.DestCombo', text: '@Model.DestCombo_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                AddViaRoute();
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
    function AddViaRoute() {
        var url = '@Url.Action("StoreAllDestination")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@

        var DTO = { ViaRoute: $("#DestCombo").val() };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {

                    var LoadDownLoadFiles = $("#GetDestView");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    //$('#GETDestMODAL').modal('show');
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                    $("#DestCombo").prop("disabled", true);
                    ShowRouteDest();
                },
            });
    }
    function ShowRouteDest() {
        var url = '@Url.Action("ShowListBox")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@

        var DTO = {  };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {

                    var LoadDownLoadFiles = $("#ListBoxDiv");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    //$('#GETDestMODAL').modal('show');
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);

                    $(".listbox").prop('disabled', 'disabled');
                },
            });
    }
    function LoadTo() {
        var url = '@Url.Action("To")'
        $('#To').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        From: $('#From').val()
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.To', text: '@Model.To_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
    function LoadVehicleGroupCategory() {

            var url = '@Url.Action("GetVehicleGroupCategory")'
            $('#VehicleCategory').select2({
                minimumInputLength: 0,
                placeholder: 'Search',
                ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

                initSelection: function (element, callback) {
                    var data = { id: '@Model.VehicleCategory', text: '@Model.VehicleCategory_Name' };
                    callback(data);
                },

                formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

                formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            })
    };
    function LoadPayableAt() {
        var url = '@Url.Action("PayableAt")'
        $('#PayableAt').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.PayableAt', text: '@Model.PayableAt_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {

                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

</script>




<header class="header fixed-top" style="position:fixed;background-color:lightgray;padding:6px;width:100%;margin-top:5px;">
    <div class="fixhead">
        <b class="CodeSt">@Model.Header</b>

        <span class="tools pull-right">
            <a href="~/Logistics/LoadingToDispatch/Index?ViewDataId=LoadingToDispatch&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=LoadingToDispatch&Header=Material-Activity&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="color:white;font-weight:bolder;font-size:13px;padding:3px 10px;" id="Cancel2">X</a>
        </span>

        <span class="tools pull-right">
            <b class="CodeSt">@Model.Mode Mode</b>
        </span>
        <span class="tools pull-right" style="    margin-right: 15px;">

        </span>
    </div>
</header>
<form class="form-horizontal" id="frmaccountLedger" role="form" style="margin-top:0px;">
    <div id="ErrorMessage" name="ErrorMessage" class="alert alert-danger" style="display: none"></div>
</form>

<section class="panel" id="FmPanelDetails" style="margin-bottom:0px;">
    <div class="panel-body">
        <div class="form-horizontal " id="FreightMemo" role="form" style="margin-top:30px;">
            <fieldset class=" col-sm-12" style="margin-top: 15px;">
                <legend id="btnFmDetailsToogle">Fm Details</legend>
                <div class="panel panel-default" id="FmDetailsToogle">
                    <div class="panel-body " style="padding-left: 20px;">
                        <div class="col-sm-9">
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">F.M No:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.FMNO, new { @class = "form-control", @style = "width:100px;", @Value = Model.FMNO, @readonly = "readonly" })
                                </div>
                                <div class="col-sm-2">
                                    <label class=" bold   col-sm-3  control-label">Time:</label>
                                    <div class="col-sm-1 ">
                                        @Html.TextBoxFor(x => x.FM_Time, new { @class = "form-control", @type = "time", @style = "width:105px;", @Value = Model.FM_Time })
                                    </div>
                                </div>
                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;">Date:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.FM_Date, new { @class = "form-control", @style = "width:236px;", @Value = Model.FM_Date })
                                </div>
                                <label class=" bold  col-sm-1 control-label">Vehicle Group:</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(x => x.VehicleGroup, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleGroup })
                                </div>
                            </div>
                            <div class="form-group ">
                                <label class=" bold   col-sm-1  control-label">VehicleNo:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.VehicleNo, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleNo })
                                </div>

                                <label class=" bold   col-sm-1  control-label">Broker:</label>
                                <div class="col-sm-3 " style="">
                                    @Html.TextBoxFor(x => x.Broker, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.Broker, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">KM:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.KM, new { @class = "form-control", @style = "width:110px;", @Value = Model.KM })
                                </div>
                            </div>
                            <div class="form-group ">
                                <label class=" bold   col-sm-1  control-label">From:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.From, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.From })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Add-Dest.:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.DestCombo, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.DestCombo, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Final-Dest:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.To, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.To })
                                </div>


                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Vehicle Cate.:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.VehicleCategory, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleCategory, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1 control-label">View-Dest:</label>
                                <div class="col-sm-3 ">
                                    <div class="col-sm-2" style="padding-left:0px;">
                                        <button class="btn btn-primary" id="btnDestination" style="font-size: 13px;padding:5px 12px;" data-toggle="modal" data-target="#GETDestMODAL"><i class="glyphicon glyphicon-eye-open"></i></button>
                                    </div>
                                    <div class="col-sm-10" style="padding-left:0px;" id="ListBoxDiv">
                                        @Html.Partial("PartialOfListBox", Model)
                                    </div>
                                </div>
                                <label class=" bold   col-sm-1  control-label">Receipt No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ReceiptNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ReceiptNo })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Driver-Name:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.DriverName, new { @class = "form-control", @style = "width:100%;", @Value = Model.DriverName, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1 control-label">Licence-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.LicenceNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.LicenceNo, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Lic.Exp-Date:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.LicenceExpDate, new { @class = "form-control", @style = "width:236px;", @Value = Model.LicenceExpDate, @disabled = "disabled" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Owner-Name:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Owner, new { @class = "form-control", @style = "width:100%;", @Value = Model.Owner, @disabled = "disabled" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Challan-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ChallanNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ChallanNo })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Contact-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ContactNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ContactNo })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Freight:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Freight, new { @class = "form-control", @style = "width:100%;", @Value = Model.Freight.ToString("0.00") })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Advance:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Advance, new { @class = "form-control", @style = "width:236px;", @Value = Model.Advance.ToString("0.00") })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Payable-At:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.PayableAt, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.PayableAt })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Remark:</label>
                                <div class="col-sm-11 ">
                                    @Html.TextAreaFor(x => x.Remark, new { @class = "form-control", @style = "width:100%;", @rows = "1", @maxlength = "100", @Value = Model.Remark })
                                </div>

                            </div>
                            <br />
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">PayLoad:</label>
                                <div class="col-sm-1 " style="">
                                    @Html.TextBoxFor(x => x.PayLoad, new { @class = "form-control", @Value = Model.PayLoad, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;width:auto;">Loaded :</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.Loaded, new { @class = "form-control", @style = "", @Value = Model.Loaded, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-2  control-label" style="margin-left: 0px;width: auto;">Available PayLoad:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.AvailablePayload, new { @class = "form-control", @style = "", @Value = Model.AvailablePayload, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;width: auto;">Over Load:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.OverLoadLoad, new { @class = "form-control", @style = "", @Value = Model.OverLoadLoad, @readonly = "readonly" })
                                </div>
                                <div class="col-sm-3" style="display: -webkit-box;">
                                    @*<label class=" bold  col-sm-6  control-label">Reporting:</label>
                                    <label class=" bold     control-label">&nbsp;&nbsp;Date:&nbsp;&nbsp;</label>
                                    @Html.TextBoxFor(x => x.ReportingDate, new { @class = "form-control", @style = "width:150px;", @Value = Model.ReportingDate })
                                    <label class=" bold     control-label">&nbsp;&nbsp;Time:&nbsp;&nbsp;</label>
                                    @Html.TextBoxFor(x => x.ReportingTime, new { @type = "time", @class = "form-control", @style = "width:100px;", @Value = Model.ReportingTime })*@

                                    <label class=" bold     control-label">&nbsp;&nbsp;View:&nbsp;&nbsp;</label>
                                    <button class="btn btn-primary" id="btnSchedule" style="font-size: 13px;padding:5px 12px;" data-toggle="modal" data-target="#ScheduleModal"><i class="glyphicon glyphicon-eye-open"></i></button>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div style="border: 2px solid #d3d3d3;height:215px;">
                                <div class="form-group ">
                                    <label class=" bold   col-sm-12  control-label" style="text-align: center;font-size: 15px;color: red;text-decoration: underline;">Other Charges</label>
                                </div>
                                <div class="form-group ">
                                    <label class=" bold  col-sm-offset-1 col-sm-11 control-label">Partial View:</label>
                                </div>
                                <div class="form-group ">
                                    <label class=" bold   col-sm-offset-1  col-sm-3 control-label">Balance:</label>
                                    <div class="col-sm-5">
                                        @Html.TextBoxFor(x => x.Balance, new { @class = "form-control", @style = "width:100%;", @Value = Model.Balance.ToString("0.00") })
                                    </div>
                                </div>
                                <br />
                            </div>
                            <div style="border: 2px solid #d3d3d3;height:88px;" id="AttachList">
                                @Html.Partial("_AttachmentList", Model)
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
</section>

<section class="panel" id="ActivityPanel" style="margin-top: 20px;margin-bottom:3%;">
    <div class="panel-body" style="margin-top:-30px;">
        <div class="form-horizontal " role="form" style="">
            <div id="ErrorMessage2" name="ErrorMessage" class="alert alert-danger" style="display: none;margin-top:0px;"></div>

            <fieldset class=" col-md-12" style="">
                <div class="panel panel-default" style="height:auto;">
                    <div class="panel-heading">
                        @*<div id="myProgress">
                            <div id="myBar"><p id="NotificationMsg" style="top: 35%;left: 4%;">Sucess</p></div>
                        </div>*@
                    </div>
                    <div class="panel-body " style="padding-left: 0px !important;">
                        <div id="ErrorMessageLC" name="ErrorMessage" class="alert alert-danger" style="display: none;margin-top:0px;"></div>
                        <div class="col-sm-12" id="">
                            <div class="tab">
                                <button class="tablinks" onclick="openCity(event, 'Arrival')" id="FirstTab">Arrival</button>
                                <button class="tablinks" onclick="openCity(event, 'Loading')" id="SecondTab">Loading</button>
                                <button class="tablinks" onclick="openCity(event, 'UnLoading')" id="ThirdTab">Un-Loading</button>
                                <button class="tablinks" onclick="openCity(event, 'Dispatch')" id="FourthTab">Dispatch</button>
                                <button class="" onclick="Clear();" id="btnClear">Clear</button>
                            </div>
                            <div id="Arrival" style="height:425px;overflow: auto;" class="tabcontent">
                                <div class="container-fluid">
                                    <div class="form-group" id="ArrivalDiv">
                                        @Html.Partial("_ArrivalPartialView", Model)
                                    </div>
                                </div>
                            </div>
                            <div id="Loading" style="height:425px;overflow: auto;" class="tabcontent">
                                <div class="container-fluid">
                                    <div class="form-group">
                                        <button class="btn btn-info" style="font-size: 13px;padding:4px 12px;" id="btnGetPendingLC">Load LC</button>
                                        <button class="btn btn-danger" style="font-size: 13px;padding:4px 12px;" id="btnFMLoading">Save</button>
                                    </div>
                                    <div class="form-group" id="LoadedLC">
                                        @Html.Partial("_LoadLCGridView", Model.ExistLClist)
                                    </div>
                                </div>

                            </div>
                            <div id="UnLoading" style="height:425px;overflow: auto;" class="tabcontent">
                                <div class="container-fluid">
                                    <div class="form-group">
                                        <button class="btn btn-info" style="font-size: 13px;padding:4px 12px;" id="btnGetUnloadinglr">Material For Curr-Branch </button>
                                        <button class="btn btn-info" style="font-size: 13px;padding:4px 12px;" id="btnGetAllMaterial">All Material</button>
                                        <button class="btn btn-danger" style="font-size: 13px;padding:4px 12px;" id="btnFMUNLoading">Save</button>

                                    </div>
                                    <div class="form-group" id="UnloadPartialViewDiv">
                                        @Html.Partial("UnloadLrGridView", Model.UnloadLrList)
                                    </div>
                                </div>
                            </div>
                            <div id="Dispatch" style="height:425px;overflow: auto;" class="tabcontent">
                                <div class="container-fluid">
                                    <div class="form-group" id="DispatchDiv">
                                        @Html.Partial("_DispatchPartialView", Model)
                                    </div>
                                </div>
                            </div>


                            <script>
                                function openCity(evt, cityName) {

                                    if (cityName == "UnLoading") {
                                        // GetUnloadLCList();
                                    } else if (cityName == "Loading") {
                                        //GetloadLCList();
                                    }

                                    var i, tabcontent, tablinks;
                                    tabcontent = document.getElementsByClassName("tabcontent");
                                    for (i = 0; i < tabcontent.length; i++) {

                                        tabcontent[i].style.display = "none";
                                    }
                                    tablinks = document.getElementsByClassName("tablinks");
                                    for (i = 0; i < tablinks.length; i++) {

                                        tablinks[i].className = tablinks[i].className.replace(" active", "");
                                    }
                                    document.getElementById(cityName).style.display = "block";
                                    evt.currentTarget.className += " active";
                                }
                                document.getElementById("FirstTab").click();
                            </script>
                        </div>
                    </div>

                </div>
            </fieldset>
        </div>
    </div>
</section>



<!--All Destination Modal -->
<div class="modal fade" id="GETDestMODAL" style="overflow:scroll;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" @*style="margin-top: 60px;"*@>
    <div class="modal-dialog modal-lg modal-sm modal-xl" role="document" style="width: fit-content;margin: auto;margin-top: 5%;">
        <div class="modal-content">
            <div class="modal-body">
                <div id="GetDestView">
                    @Html.Partial("_Get_Destination_List", Model)
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!--All Schedule Modal -->
<div class="example-modal">
    <div id="ScheduleModal" class="modal modal-default">
        <div class="modal-dialog modal-md" @*style="width:1080px;"*@>
            <div id="">
                <div class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title"><b>Schedule</b></h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-group ">
                                <table id="" class="zui-table editableTable" style="width:100%;">
                                    <thead>
                                        <tr>
                                            <th style="width: 35px;">Branch</th>
                                            <th style="width: 120px;" colspan="1">Arrival Schedule</th>
                                            <th style="width: 120px;" colspan="1">Dispatch Schedule</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            if (Model.ViewSchedule != null)
                                            {
                                                foreach (var item in Model.ViewSchedule)
                                                {
                                                    <tr style="font-family:Tahoma;font-size:9pt;border: solid 1px lightgray;">
                                                        <td>@item.Branch</td>
                                                        <td>
                                                            <table id="" class="zui-table editableTable" style="width:100%;">
                                                                <thead>
                                                                    <tr>
                                                                        <th>Date</th>
                                                                        <th>Time</th>
                                                                        <th>KM</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    <tr>
                                                                        <td>@item.ScheduleArrivalDate</td>
                                                                        <td>@item.ScheduleArrivalTime</td>
                                                                        <td>@item.ScheduleArrivalKM</td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </td>
                                                        <td>
                                                            <table id="" class="zui-table editableTable" style="width:100%;">
                                                                <thead>
                                                                    <tr>
                                                                        <th>Date</th>
                                                                        <th>Time</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    <tr>
                                                                        <td>@item.ScheduleDispatchDate</td>
                                                                        <td>@item.ScheduleDispatchTime</td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>
                                                        </td>
                                                    </tr>
                                                }

                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;">
                            <button data-dismiss="modal" class="btn btn-danger" type="button">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Attachment Modal -->
<div class="example-modal">
    <div id="Attachmentmodal" class="modal modal-default">
        <div class="modal-dialog " style="width:1080px;">
            <div id="AttachmentmodalDiv">
                <div class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title"><b>Attachment</b></h4>
                        </div>
                        <div class="modal-body">
                            <div class="grid" id="FormatTable" style="max-height:600px;min-height:600px; width:100%; overflow: scroll;">
                                <div id="" class="" style="width:100%;">
                                    <div class="form-group">
                                        <div class="col-sm-3" style="padding-top: 5px;">
                                            <label class="col-sm-12 control-label" style="font-weight:bold;color:black;">Upload File:</label>
                                        </div>
                                        <div class="col-sm-5">
                                            @Html.TextBoxFor(x => x.Attachment.UploadFile, new { @type = "file", @class = "form-control"@*, @style = "font-size:12pt;font-weight:bolder;"*@})
                                        </div>
                                        <div class="col-sm-4">

                                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnPhotoupload">Upload</button>
                                        </div>
                                    </div>
                                    <div class="form-group col-sm-12" id="ShowAllFile">
                                        <hr />
                                        @Html.Partial("_AtachmentListView", Model)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;">
                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnAttachSubmit" data-dismiss="modal">Save</button>
                            <button data-dismiss="modal" class="btn btn-danger" type="button">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--View Modal -->
<div class="example-modal">
    <div id="updTfatsearch1" class="modal modal-default">
        <div class="modal-dialog" style="width:1080px;">
            <div id="updTfatsearchDiv1">
            </div>
        </div>
    </div>
</div>
<!--Pending Lc modal -->
<div class="modal fade" id="GetPEndingLCLIst" style="z-index:auto;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" @*style="margin-top: 60px;"*@>
    <div class="modal-dialog modal-lg modal-sm modal-xl" role="document" style="width: auto;margin: auto;margin-top: 6%;">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <div class="form-group" @*style="display: inline-flex;margin-left: 40%;"*@>
                    <div class="col-sm-offset-5 col-sm-3"><h4 class="modal-title"><b>Pending Lorry Challan</b></h4></div>

                </div>


            </div>
            <div class="modal-body">
                <div class="grid" id="FormatTable" style="max-height:350px;min-height:350px; width:100%;">
                    <div id="" class="" style="width:100%;">
                        <div class="form-group col-sm-12" id="ShowPendingLCList">

                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnLoadIT">Load</button>
            </div>
        </div>
    </div>
</div>
<!--VehicleStatus Modal -->
<div class="example-modal">
    <div id="UpdateVehicleStatus" class="modal modal-default">
        <div class="modal-dialog " style="width:1080px;">
            <div id="AttachmentmodalDiv">
                <div class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title"><b>Vehicle Status</b></h4>
                        </div>
                        <div class="modal-body">
                            <div class="grid" id="FormatTable" style="max-height:33px;min-height:33px; width:100%; overflow: hidden;">
                                <div id="" class="" style="width:100%;">
                                    <div class="form-group">
                                        <div class="col-sm-3" style="padding-top: 5px;">
                                            <label class="col-sm-12 control-label">Vehicle Status :</label>
                                        </div>
                                        <div class="col-sm-5">
                                            @Html.EnumDropDownListFor(x => x.vehicleStatus, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;">
                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnVehicleStatus" data-dismiss="modal">Save</button>
                            <button data-dismiss="modal" class="btn btn-danger" type="button">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Unload LR List Modal -->
<div class="modal fade" id="GetLRLIst" style="width: 100%;">
    <div class="modal-dialog modal-lg modal-sm modal-xl" style="width: auto;margin: auto;margin-top: 3%;">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <div class="form-group">
                    <div class="col-md-2"><h4 class="modal-title"><b>Add Lorry Receipt</b></h4></div>
                    <div class="col-md-5">
                        @*<div class="col-md-2" style="float:right;display: flex;">
                                <div class="col-sm-6"><label class=" bold control-label" style="margin-top: 5px;"> Auto Retrive</label></div>
                                <input type="checkbox" class="form-control col-sm-6" id="AutoRetrive" />
                            </div>*@
                        @*<div class="col-md-5" style="display: flex;">

                                <div><label class=" bold control-label" style="margin-top: 5px;">Auto Retrive</label></div>
                                <div class="col-md-5"><input type="checkbox" id="AutoRetrive" style="height:20px;width:20px;" /></div>
                            </div>*@
                    </div>
                    <div class="col-md-4" style="float:right;">
                        @*<div class="col-md-5" style="display: flex;">

                                <div><label class=" bold control-label" style="margin-top: 5px;"> Select By</label></div>
                                <div class="col-md-5"><input type="text" id="SelectLR" class="form-control" placeholder="LR NO" /></div>
                            </div>
                            <div class="col-md-5" style="float:left;display: flex;">
                                <div><label class=" bold control-label" style="margin-top: 5px;"> Search</label></div>
                                <div class="col-md-10"><input type="text" id="Search" class="form-control" placeholder="Search Here" /></div>

                            </div>*@
                    </div>

                </div>
            </div>
            <div class="modal-body" style="padding: 0px !important;">
                <div class="grid" id="FormatTable">
                    <div class="form-group col-sm-12" id="ShowLRListOFUnload" style="overflow: auto;width: 100%;display: block;">

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnGetLR">Submit</button>
            </div>
        </div>
    </div>
</div>

@Html.HiddenFor(x => x.Document)
<input type="hidden" id="CheckActivity" />
<input type="hidden" id="DeleteUnloadLr" />