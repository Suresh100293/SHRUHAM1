/*-------------------------------------------------------
   Copyright 2018, Suchan Software Pvt. Ltd.
   Code Auto-Generated by ooroo iX9 Designer
--------------------------------------------------------- */
using Common;
using EntitiModel;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using ALT_ERP3.Controllers;
using ALT_ERP3.DynamicBusinessLayer;
using ALT_ERP3.DynamicBusinessLayer.Repository;

namespace ALT_ERP3.Areas.Reports.Controllers
{
    public class SalesRegisterswoStockController : BaseController
    {
        //nEntities ctxStd = new nEntities();
        tfatEntities ctxTFAT = new tfatEntities();
        private string mbranchcode = System.Web.HttpContext.Current.Session["BranchCode"].ToString();
        private string muserid = System.Web.HttpContext.Current.Session["UserId"].ToString();
        //string connstring = string.IsNullOrEmpty(ConfigurationManager.ConnectionStrings[""].ConnectionString) == true ? "" : ConfigurationManager.ConnectionStrings[""].ConnectionString;
        //IBusinessCommon mIBuss = new BusinessCommon();
        //IReportGridOperation mIlst = new ListViewGridOperationreport();

        public ActionResult Index(GridOption Model)
        {
            GetAllMenu(Session["ModuleName"].ToString());
            UpdateAuditTrail(mbranchcode, Model.Mode, Model.Header, "", System.DateTime.Now, 0, "", "");
            Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
            Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
            // StockLedgerScr
            //ViewBag.id = Model.ViewDataId;
            ViewBag.ViewDataId = Model.ViewDataId;
            ViewBag.Header = Model.Header;
            ViewBag.Table = Model.TableName;
            ViewBag.Controller = Model.Controller;
            ViewBag.MainType = Model.MainType;
            ViewBag.Controller2 = Model.Controller2;
            ViewBag.OptionType = Model.OptionType;
            ViewBag.OptionCode = Model.OptionCode;
            ViewBag.Module = Model.Module;
            return View(Model);
        }

        public ActionResult GetViewCodes(string term)
        {
            var result = ctxTFAT.ReportHeader.Where(x => x.SubCodeOf == term).Select(m => new { Value = m.Code, Text = m.Code }).OrderBy(n => n.Value).ToList();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetGridStructureRecords(GridOption Model)
        {
            return mIlst.getGridDataColumns(Model.ViewDataId, "", "", "", "");
        }

        [HttpPost]
        public ActionResult GetGridData(GridOption Model)
        {
            string mNames = "";
            string mStr = "";
            mNames = Regex.Replace(Model.ParaReport, @"\s+", "");
            mNames = string.Join(",", mNames.Split(',').Select(x => string.Format("'{0}'", x)).ToList());
            var namelist1 = mNames.Split(',');
            mStr = "";
            foreach (var mEachName in namelist1)
            {
                string mCode = mIBuss.FieldOfTable("MasterGroups", "Name", "Name", mEachName.ToString());
                if (mCode != null)
                {
                    mStr = mStr + string.Format("'{0}'", mCode) + ",";
                }
            }
            if (mStr != "")
            {
                mStr = mStr.Remove(mStr.Length - 1);
                mStr = "grp^" + mStr;
            }
            return GetGridReport(Model, "R", mStr, false, 0);
        }

        public ActionResult GetExcel(GridOption Model)
        {
            return GetGridData(Model);
        }

        public ActionResult GetPDF(GridOption Model)
        {
            return GetGridData(Model);
        }

        private static List<RecursiveObject> FillRecursive(List<FlatObject> flatObjects, int parentId)
        {
            List<RecursiveObject> recursiveObjects = new List<RecursiveObject>();
            foreach (var item in flatObjects.Where(x => x.ParentId.Equals(parentId)))
            {
                recursiveObjects.Add(new RecursiveObject
                {
                    data = item.data,
                    id = item.Id,
                    attr = new FlatTreeAttribute { id = item.Id.ToString(), selected = false },
                    children = FillRecursive(flatObjects, item.Id)
                });
            }
            return recursiveObjects;
        }

        [HttpPost]
        public string Getgrp()
        {
            var mTreeList = ctxTFAT.MasterGroups.Select(x => new { x.Name , x.GrpKey, x.RECORDKEY }).ToList();
            List<FlatObject> flatObjects2 = new List<FlatObject>();
            for (int n = 0; n < mTreeList.Count; n++)
            {
                FlatObject abc = new FlatObject();
                abc.data = mTreeList[n].Name;
                abc.Id = mTreeList[n].RECORDKEY;
                abc.ParentId = mTreeList[n].GrpKey;
                flatObjects2.Add(abc);
            }
            var recursiveObjects = FillRecursive(flatObjects2, 0);
            string myjsonmodel = new JavaScriptSerializer().Serialize(recursiveObjects);
            return myjsonmodel;
        }
    }
}

/* -- End of Code --
   Code Auto Generated on Sun 27-Jan-2019 10:38 AM, Engine: oorooX9Design, ver: 15.0 Revision: 0
   by Team ooroo, ooroobooks ver. ERPiX9 */
