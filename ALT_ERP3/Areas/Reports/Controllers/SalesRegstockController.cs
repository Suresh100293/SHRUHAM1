/*-------------------------------------------------------
   Copyright 2018, Suchan Software Pvt. Ltd.
   Code Auto-Generated by ooroo iX9 Designer
--------------------------------------------------------- */
using Common;
using EntitiModel;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using ALT_ERP3.Controllers;
using ALT_ERP3.DynamicBusinessLayer;
using ALT_ERP3.DynamicBusinessLayer.Repository;

namespace ALT_ERP3.Areas.Reports.Controllers
{
    public class SalesRegstockController : BaseController
    {
        ////nEntities ctxTFAT = new nEntities();
        tfatEntities ctxTFAT = new tfatEntities();
        private string mbranchcode = System.Web.HttpContext.Current.Session["BranchCode"].ToString();
        private string muserid = System.Web.HttpContext.Current.Session["UserId"].ToString();
        //string connstring = string.IsNullOrEmpty(ConfigurationManager.ConnectionStrings[""].ConnectionString) == true ? "" : ConfigurationManager.ConnectionStrings[""].ConnectionString;
        //IBusinessCommon mIBuss = new BusinessCommon();
        //IReportGridOperation mIlst = new ListViewGridOperationreport();
        List<SelectListItem> Party = new List<SelectListItem>();
        List<SelectListItem> Area = new List<SelectListItem>();

        public ActionResult Index(SalesRegstockVM Model)
        {
            GetAllMenu(Session["ModuleName"].ToString());
            UpdateAuditTrail(mbranchcode, "", Model.Header, "", System.DateTime.Now, 0, "", "");
            Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
            Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
            Model.ReportID = Model.ViewDataId;
            return View(Model);
        }

        public ActionResult GetViewCodes(string term)
        {
            var result = ctxTFAT.ReportHeader.Where(x => x.SubCodeOf == term).Select(m => new { Value = m.Code, Text = m.Code }).OrderBy(n => n.Value).ToList();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetGridStructureRecords(SalesRegstockVM Model)
        {
            return mIlst.getGridDataColumns(Model.ReportID, "", "", "", "");
        }

        [HttpPost]
        public ActionResult GetGridData(SalesRegstockVM Model)
        {
            //TextInput1^test1~TextInput2^123213~TextInput3^on~TextInput4^15-01-2019
            string mFixedPara = "";
            if (Model.Para != null)
            {
                mFixedPara = Model.Para.ToString();
            }
            if (mFixedPara != "")
            {
                mFixedPara = mFixedPara + "~";
            }
            string mParaString = mFixedPara;
            string mNames = "";
            string mStr = "";
            mNames = Regex.Replace(Model.StoreList, @"\s+", "");
            mNames = string.Join(",", mNames.Split(',').Select(x => string.Format("'{0}'", x)).ToList());
            var namelist1 = mNames.Split(',');
            mStr = "";
            foreach (var mEachName in namelist1)
            {
                string mCode = mIBuss.FieldOfTable("Stores", "Code", "Name", mEachName.ToString());
                if (mCode != null)
                {
                    mStr = mStr + string.Format("'{0}'", mCode) + ",";
                }
            }
            if (mStr != "")
            {
                mStr = mStr.Remove(mStr.Length - 1);
            }
            mParaString = mParaString + "~StoreList^" + mStr;

            string mWhat = Model.mWhat == null ? "" : Model.mWhat;
            int startIndex = mWhat == "" ? (Model.page - 1) * Model.rows + 1 : -1;
            int endIndex = mWhat == "" ? (Model.page * Model.rows) : -1;

            SqlDataAdapter da = new SqlDataAdapter();
            DataTable dt = new DataTable();
            SqlCommand cmd = new SqlCommand();
            string connstring = GetConnectionString();
            SqlConnection con = new SqlConnection(connstring);
            cmd = new SqlCommand("dbo.ExecuteReport", con);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = Model.ReportID;
            cmd.Parameters.Add("@mAlias", SqlDbType.VarChar).Value = "";
            cmd.Parameters.Add("@mCurrDec", SqlDbType.TinyInt).Value = 2;
            cmd.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
            cmd.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
            cmd.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = ConvertDDMMYYTOYYMMDDinstr(Model.FromDate);
            cmd.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = ConvertDDMMYYTOYYMMDDinstr(Model.ToDate);
            cmd.Parameters.Add("@mIsRunBalance", SqlDbType.Bit).Value = 0;
            if (Model.sidx != null)
            {
                cmd.Parameters.Add("@mOrderBy", SqlDbType.VarChar).Value = Model.sidx;
            }
            else
            {
                cmd.Parameters.Add("@mOrderBy", SqlDbType.VarChar).Value = "";
            }
            cmd.Parameters.Add("@mStartIndex", SqlDbType.Int).Value = startIndex;
            cmd.Parameters.Add("@mEndIndex", SqlDbType.Int).Value = endIndex;
            cmd.Parameters.Add("@mRunBalance", SqlDbType.Float).Value = 0;
            cmd.Parameters.Add("@mInsertIntoTable", SqlDbType.VarChar).Value = "";
            cmd.Parameters.Add("@mPara", SqlDbType.VarChar).Value = mParaString;
            con.Open();

            da.SelectCommand = cmd;
            da.Fill(dt);

            if (mWhat == "")
            {
                // for count
                SqlDataAdapter da2 = new SqlDataAdapter();
                DataTable dt2 = new DataTable();
                SqlCommand cmd2 = new SqlCommand();

                SqlConnection con2 = new SqlConnection(connstring);
                cmd2 = new SqlCommand("dbo.ExecuteReport", con2);
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = Model.ReportID;
                cmd2.Parameters.Add("@mAlias", SqlDbType.VarChar).Value = "";
                cmd2.Parameters.Add("@mCurrDec", SqlDbType.TinyInt).Value = 2;
                cmd2.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
                cmd2.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
                cmd2.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = ConvertDDMMYYTOYYMMDDinstr(Model.FromDate);
                cmd2.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = ConvertDDMMYYTOYYMMDDinstr(Model.ToDate);
                cmd2.Parameters.Add("@mIsRunBalance", SqlDbType.Bit).Value = 0;
                cmd2.Parameters.Add("@mRunBalance", SqlDbType.Float).Value = 0;
                cmd2.Parameters.Add("@mInsertIntoTable", SqlDbType.VarChar).Value = "";
                cmd2.Parameters.Add("@mPara", SqlDbType.VarChar).Value = mParaString;
                con2.Open();
                da2.SelectCommand = cmd2;
                da2.Fill(dt2);
                return Content(JQGridHelper.JsonForJqgrid(dt, Model.rows, dt2.Rows.Count, Model.page), "application/json");
            }
            else
            {
                if (Model.mWhat == "XLS")
                {
                    string attachment = "attachment; filename=" + Model.ReportID + @".xls";
                    Response.ClearContent();
                    Response.AddHeader("content-disposition", attachment);
                    Response.ContentType = "application/vnd.ms-excel";
                    string tab = "";
                    foreach (DataColumn dc in dt.Columns)
                    {
                        Response.Write(tab + dc.ColumnName);
                        tab = "\t";
                    }
                    Response.Write("\n");
                    int i;
                    foreach (DataRow dr in dt.Rows)
                    {
                        tab = "";
                        for (i = 0; i < dt.Columns.Count; i++)
                        {
                            Response.Write(tab + dr[i].ToString());
                            tab = "\t";
                        }
                        Response.Write("\n");
                    }
                    Response.End();
                }
                else if (Model.mWhat == "PDF")
                {
                    GridView GridView1 = new GridView();
                    GridView1.AllowPaging = false;
                    GridView1.DataSource = dt;
                    GridView1.DataBind();
                    Response.ContentType = "application /pdf";
                    Response.AddHeader("content-disposition",
                    "attachment;filename=" + Model.ReportID + @".pdf");
                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    StringWriter sw = new StringWriter();
                    HtmlTextWriter hw = new HtmlTextWriter(sw);
                    GridView1.RenderControl(hw);
                    StringReader sr = new StringReader(sw.ToString());
                    Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 0f);
                    HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
                    PdfWriter.GetInstance(pdfDoc, Response.OutputStream);
                    pdfDoc.Open();
                    htmlparser.Parse(sr);
                    pdfDoc.Close();
                    Response.Write(pdfDoc);
                    Response.End();
                }
                return null;
            }
        }

        public ActionResult GetExcel(SalesRegstockVM Model)
        {
            return GetGridData(Model);
        }

        private static List<RecursiveObject> FillRecursive(List<FlatObject> flatObjects, int parentId)
        {
            List<RecursiveObject> recursiveObjects = new List<RecursiveObject>();
            foreach (var item in flatObjects.Where(x => x.ParentId.Equals(parentId)))
            {
                recursiveObjects.Add(new RecursiveObject
                {
                    data = item.data,
                    id = item.Id,
                    attr = new FlatTreeAttribute { id = item.Id.ToString(), selected = false },
                    children = FillRecursive(flatObjects, item.Id)
                });
            }
            return recursiveObjects;
        }

        [HttpPost]
        public string GetStoreListTree()
        {
            var mTreeList = ctxTFAT.Stores.Select(x => new { x.Name, x.GrpKey, x.RECORDKEY }).ToList();
            List<FlatObject> flatObjects2 = new List<FlatObject>();
            for (int n = 0; n < mTreeList.Count; n++)
            {
                FlatObject abc = new FlatObject();
                abc.data = mTreeList[n].Name;
                abc.Id = mTreeList[n].RECORDKEY;
                abc.ParentId = (int)mTreeList[n].GrpKey;
                flatObjects2.Add(abc);
            }
            var recursiveObjects = FillRecursive(flatObjects2, 0);
            string myjsonmodel = new JavaScriptSerializer().Serialize(recursiveObjects);
            return myjsonmodel;
        }

        public ActionResult GetParty(string term)
        {
            if (term == "")
            {
                var result = ctxTFAT.Master.Where(x => x.BaseGr == "D").Select(m => new { m.Code, m.Name }).OrderBy(n => n.Name).Take(10).ToList();
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var result = ctxTFAT.Master.Where(x => x.BaseGr == "D" && (x.Name.Contains(term) || x.Code.Contains(term))).Select(m => new { m.Code, m.Name }).OrderBy(n => n.Name).ToList();
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetArea(string term)
        {
            if (term == "")
            {
                var result = ctxTFAT.AreaMaster.Select(c => new { c.Code,c.Name }).Distinct().ToList();
                foreach (var item in result)
                {
                    Area.Add(new SelectListItem { Text = item.Name, Value = item.Code.ToString() });
                }
            }
            else
            {
                var result = ctxTFAT.AreaMaster.Select(c => new { c.Code, c.Name }).Distinct().ToList();
                foreach (var item in result)
                {
                    Area.Add(new SelectListItem { Text = item.Name, Value = item.Code.ToString() });
                }
            }
            return Json(Area, JsonRequestBehavior.AllowGet);
        }
    }
}

/* -- End of Code --
   Code Auto Generated on Sun 06-Jan-2019 11:25 PM, Engine: oorooX9Design, ver: 15.0 Revision: 0
   by Team ooroo, ooroobooks ver. ERPiX9 */
