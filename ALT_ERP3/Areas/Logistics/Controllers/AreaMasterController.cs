using ALT_ERP3.Areas.Logistics.Models;
using ALT_ERP3.Controllers;
using EntitiModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Linq;
using System.Reflection;
using System.Web.Mvc;

namespace ALT_ERP3.Areas.Logistics.Controllers
{
    public class AreaMasterController : BaseController
    {
        private static string mauthorise = "A00";

        public JsonResult BranchList(string term)
        {
            List<TfatBranch> treeTables = new List<TfatBranch>();
            List<TfatBranch> list = ctxTFAT.TfatBranch.Where(x => x.Category == "Branch" || x.Category == "SubBranch" || x.Category == "Zone").ToList();
            List<TfatBranch> list1 = ctxTFAT.TfatBranch.Where(x => x.Code == "G00000").ToList();
            list.AddRange(list1);
            if (!(String.IsNullOrEmpty(term)))
            {
                list = list.Where(x => x.Name.ToLower().Contains(term.ToLower())).ToList();
            }
            foreach (var item in list)
            {
                if (item.Category == "Branch")
                {
                    item.Name += " - B";
                    treeTables.Add(item);
                }
                else if (item.Category == "SubBranch")
                {
                    item.Name += " - SB";
                    treeTables.Add(item);
                }
                else if (item.Category == "Zone")
                {
                    item.Name += " - Z";
                    treeTables.Add(item);
                }
                else if (item.Category == "0")
                {
                    item.Name += " - G";
                    treeTables.Add(item);
                }
            }
            var Modified = treeTables.Select(x => new
            {
                Code = x.Code,
                Name = x.Name
            });
            return Json(Modified, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckName(string Name, string Document)
        {
            string message = "";

            var Area = ctxTFAT.TfatBranch.Where(x => x.Name.ToLower().Trim() == Name.ToLower().Trim() && x.Code != Document).FirstOrDefault();
            if (Area != null)
            {
                message = "F";
            }
            else
            {
                message = "T";
            }
            return Json(new { Message = message, JsonRequestBehavior.AllowGet });
        }

        public JsonResult LoadState(string term)
        {
            string Msg = "";

            var list = ctxTFAT.TfatState.Where(x => x.Code == 1).ToList();

            if (!(String.IsNullOrEmpty(term)))
            {
                list = ctxTFAT.TfatState.Where(x => x.Name.ToLower().Contains(term.ToLower())).ToList();
            }
            var Modified = list.Select(x => new
            {
                Code = x.Code,
                Name = x.Name
            });
            return Json(Modified, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompleteCountry(string term)
        {
            return Json((from m in ctxTFAT.TfatCountry
                         where m.Name.ToLower().Contains(term.ToLower())
                         select new { Name = m.Name, Code = m.Code }).ToArray(), JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompleteCity(string term)
        {
            return Json((from m in ctxTFAT.TfatCity
                         where m.Name.ToLower().Contains(term.ToLower())
                         select new { Name = m.Name, Code = m.Code }).ToArray(), JsonRequestBehavior.AllowGet);
        }

        // GET: Logistics/AreaMaster
        public ActionResult Index(AreaMasterVM mModel)
        {
            GetAllMenu(Session["ModuleName"].ToString());
            UpdateAuditTrail(mbranchcode, mModel.Mode, mModel.Header, "", DateTime.Now, 0, "", "", "B");

            if ((mModel.Mode == "Edit") || (mModel.Mode == "View") || (mModel.Mode == "Delete"))
            {
                var mList = ctxTFAT.TfatBranch.Where(x => (x.Code == mModel.Document)).FirstOrDefault();
                if (mList != null)
                {
                    mModel.Active = mList.Status;
                    mModel.Name = mList.Name;
                    mModel.Grp = mList.Grp;
                    mModel.Grp_Name = ctxTFAT.TfatBranch.Where(x => x.Code == mList.Grp).Select(x => x.Name).FirstOrDefault();
                    mModel.State = mList.State;
                    mModel.StateName = ctxTFAT.TfatState.Where(x => x.Code.ToString() == mList.State).Select(x => x.Name).FirstOrDefault();

                    mModel.Country = mList.Country;
                    mModel.CountryName = ctxTFAT.TfatCountry.Where(x => x.Code.ToString() == mList.Country).Select(x => x.Name).FirstOrDefault();

                    mModel.City = mList.City;
                    mModel.CityName = ctxTFAT.TfatCity.Where(x => x.Code.ToString() == mList.City).Select(x => x.Name).FirstOrDefault();

                    mModel.Pincode = mList.aPin;
                }

            }
            else
            {
                mModel.Active = true;
            }
            return View(mModel);
        }

        public void ExistSRl()
        {
            string[] cars = { "120955", "121130", "121327", "121328", "121329", "121330", "121331", "121468", "121638", "121721", "122050", "122051", "122100", "122166", "122214", "122218", "122448", "122616", "122702", "122731", "102941", "103171", "103172", "103604", "103605", "103606", "103775", "103950", "103951", "104961", "106214", "106769", "120738", "120557", "120378", "120031", "119768", "119591", "119365", "119364", "113761", "112359", "106478", "106857", "107508", "108063", "108688", "104432", "104909", "109878", "111493", "112172", "112920", "112959", "114057", "114454", "115225", "115989", "116564", "116972", "119370", "120380", "120562", "121334", "121335", "121336", "122102", "122103", "122104", "122356", "122424", "122425", "122427", "122567", "104849", "109178", "109298", "109404", "109497", "109678", "111246", "119753", "122140", "120388", "120753", "121777", "121778", "122874", "109843", "115663", "121783", "122057", "122058", "122146", "122243", "122244", "122245", "122246", "122247", "122248", "122362", "122392", "122393", "122477", "122536", "122544", "122545", "122547", "122598", "122695", "122696", "122775", "122875", "122887", "122888", "110462", "110583", "110959", "111254", "111315", "111743", "116292", "116293", "116294", "116295", "116296", "116297", "116298", "116299", "117382", "118578", "120662", "120663", "120664", "120665", "120666", "120822", "120823", "120912", "120913", "121046", "121047", "121048", "121049", "121050", "121374", "121375", "121376", "121560", "121562", "121563", "121564", "121565", "121566", "121751", "121752", "121753", "121754", "121758", "121839", "121840", "121841", "121842", "121843", "121844", "121845", "121975", "121976", "121977", "121978", "121979", "121980", "121981", "121982", "121983", "122130", "122309", "122416", "122527", "122528", "122529", "122530", "122655", "122656", "122813", "122818", "122824", "111114", "111115", "118206", "119786", "120039", "120165", "120387", "120572", "120751", "120975", "120976", "120977", "121150", "121151", "121294", "121296", "121474", "121473", "121649", "121651", "121865", "121928", "121929", "121930", "122241", "122242", "122475", "122476", "122709", "122734", "122773", "122774", "118222", "118405", "118406", "118479", "118480", "118481", "118482", "118550", "118771", "118772", "121018", "121161", "121163", "121346", "121347", "121394", "121395", "121659", "121963", "121964", "121965", "122250", "122363", "122485", "122621", "122622", "121902", "121967", "119542", "120362", "121548", "122217", "110213", "115436", "120758", "120759", "120760", "120983", "120984", "120985", "121156", "121157", "121158", "121159", "121160", "121162", "121245", "121343", "121344", "121345", "121422", "121481", "121482", "121483", "121484", "121652", "121653", "121654", "121655", "121656", "121657", "121846", "121847", "121996", "121997", "122019", "122020", "122021", "122106", "122400", "122481", "122482", "122483", "122484", "122710", "122711", "122776", "121530", "122088", "122089", "109439", "115280", "115281", "115364", "115458", "115580", "115780", "116180", "116181", "116406", "116407", "116408", "116598", "116860", "116861", "116982", "116983", "117171", "117313", "117546", "117589", "117590", "117677", "117996", "117997", "117998", "118240", "118247", "118421", "118422", "118786", "118936", "119202", "119203", "121299", "121350", "121351", "121493", "121673", "121935", "121936", "122253", "122492", "122493", "122494", "122578", "122739", "114986", "111637", "111640", "113146", "113794", "113804", "113805", "115475", "115478", "115589", "115590", "115592", "115593", "115597", "116190", "116405", "117182", "117683", "118262", "118980", "119214", "119316", "119826", "121063", "121183", "121184", "121494", "121495", "121496", "121497", "121498", "121499", "121500", "121501", "121502", "121503", "121504", "121675", "121676", "121677", "121678", "121710", "121718", "121866", "121867", "121868", "121869", "121870", "121931", "121932", "121933", "121947", "122060", "122061", "122110", "122145", "122254", "122255", "122256", "122257", "122377", "122378", "122455", "122458", "122459", "122460", "122495", "122496", "122497", "122498", "122499", "122500", "122501", "122502", "122575", "122631", "122633", "122634", "122647", "122712", "122715", "122717", "122740", "122741", "122742", "122743", "122744", "122713", "122714", "122716", "122745", "122783", "122784", "122806", "122112", "122113", "119834", "120404", "120405", "120990", "121355", "121356", "121357", "122114", "122260", "122379", "122503", "120954", "121312", "121539", "121544", "122091", "122092", "122349", "122435", "122728", "109770", "117340", "117341", "117342", "117401", "117402", "117403", "117404", "117405", "117488", "117512", "121510", "121512", "121693", "121791", "122137", "122267", "122383", "122650", "106534", "107659", "118725", "119135", "119515", "119760", "119761", "120019", "120371", "120546", "120952", "121127", "121532", "122047", "122090", "121542", "121543", "122096", "112695", "112743", "112882", "114032", "119103", "121605", "121968", "122354", "122534", "109335", "109626", "106805", "108561", "108827", "109469", "109336", "111094", "111551", "112244", "112292", "112808", "112992", "113071", "113162", "113163", "113670", "113975", "113976", "113978", "113979", "114016", "114017", "114018", "114019", "114020", "114021", "114509", "114512", "114687", "114908", "114914", "114915", "115103", "115363", "115603", "115700", "115914", "116042", "116631", "117018", "117021", "117198", "117199", "117577", "117695", "117701", "118448", "118563", "119245", "119247", "119669", "119866", "119868", "119869", "120078", "120277", "120419", "120420", "120421", "120634", "120635", "120636", "120800", "120801", "120802", "120803", "121000", "121001", "121205", "121206", "121207", "121208", "121209", "121210", "121250", "121251", "121304", "121361", "121362", "121319", "121694", "121695", "121879", "121880", "121881", "121882", "121883", "121884", "121888", "121939", "121941", "121942", "122066", "122067", "122068", "122275", "122276", "122277", "122279", "122384", "122385", "122509", "122510", "122637", "122638", "122639", "122640", "122651", "122721", "122793", "122804", "122805", "110088", "110270", "111221", "111355", "111580", "111582", "111670", "112081", "112403", "112504", "112596", "112599", "113320", "114172", "114759", "114840", "115352", "117551", "118454", "118564", "118565", "118566", "118618", "118619", "118620", "119345", "119569", "120081", "120082", "120083", "120084", "120085", "120086", "120088", "120110", "120191", "120192", "120193", "120214", "120215", "120216", "120217", "120218", "120423", "120424", "120425", "120426", "120427", "120428", "120429", "120430", "120431", "120433", "120513", "120514", "120515", "120516", "120517", "120518", "120608", "120609", "120610", "120611", "120612", "120805", "120806", "120807", "120808", "120809", "120810", "120811", "120812", "121009", "121010", "121011", "121012", "121013", "121014", "121015", "121033", "121034", "121035", "121212", "121213", "121214", "121215", "121216", "121217", "121218", "121247", "121248", "121288", "121363", "121364", "121365", "121366", "121367", "121368", "121518", "121519", "121520", "121521", "121522", "121523", "121524", "121525", "121526", "121584", "121696", "121697", "121698", "121699", "121740", "121741", "121742", "121743", "121744", "121782", "121826", "121827", "121828", "121829", "121830", "121831", "121832", "121833", "121897", "121898", "121899", "121900", "121901", "121903", "121943", "122008", "114840A", "122069", "122070", "122071", "122072", "122079", "122120", "122121", "122122", "122123", "122124", "122147", "122164", "122165", "122281", "122282", "122283", "115352A", "118620A", "122387", "122390", "122394", "122407", "122408", "121526A", "122283A", "122456", "122457", "122511", "122512", "122513", "122514", "122515", "122516", "122516A", "122457A", "122576", "122642", "122643", "122644", "122645", "122652", "122653", "122654", "122722", "122748", "122749", "122795", "122799", "122807", "122808", "114089", "115756", "115926", "117091", "117562", "119648", "120464", "121106", "121400", "121591", "121973", "121974", "122176", "122296", "122302", "122328", "122522", "122523", "122524", "122525", "122526", "122548", "122549", "122550", "122551", "122552", "122553", "122554", "122555", "122556", "122557", "122558", "122559", "122560", "122561", "122562", "122597", "122658", "122659", "122660", "122661", "122662", "122663", "122664", "122671", "122672", "122673", "122674", "122675", "122676", "122677", "122678", "122679", "122680", "122681", "122828", "122829", "122830", "122831", "122832", "122833", "122834", "122844", "122845", "122846", "122847", "122848", "122849", "122850", "122851", "122854", "122855", "122864", "122865", "122866", "122867", "122868", "122869", "122870", "122871", "122872", "120891", "121614", "121615", "122085", "122086", "122119", "122280", "122641", "122794", "111000", "111994", "111998", "111999", "112505", "114175", "114176", "114520", "114703", "114925", "114954", "114987", "115929", "116209", "117216", "118052", "118054", "118960", "119267", "119448", "119671", "119882", "119884", "119885", "120093", "120094", "120196", "120197", "120198", "120227", "120434", "120438", "120616", "121003", "121098", "121225", "121226", "121227", "121228", "121443", "121444", "121445", "121446", "121707", "121795", "121796", "121800", "121801", "122002", "122003", "122005", "122007", "122017", "122288", "122289", "122290", "122386", "122409", "122453", "122517", "122592", "122593", "122723", "122750", "122751", "122796", "122803", "122835", "121538", "121611", "122083", "122454", "122726", "112739", "115977", "116114", "116519", "117591", "119495", "119496", "119729", "119730", "122134", "122703", "121314", "121348", "121627", "117588", "118963", "119092", "119675", "119685", "119895", "120096", "120097", "120113", "120452", "120453", "120454", "120631", "120632", "121236", "121237", "121373", "121559", "121910", "121911", "121944", "121945", "122078", "122299", "122521", "122596", "122798", "121556", "122077", "122126", "108925", "109636", "110011", "110692", "111978", "111986", "115305", "115306", "115309", "115350", "115612", "115613", "115614", "115615", "115616", "115617", "115618", "115706", "115707", "115708", "116054", "116207", "116477", "116644", "116645", "116646", "116647", "117035", "117036", "117213", "117214", "117215", "117248", "117494", "117576", "117596", "117716", "118055", "118291", "118292", "118293", "118294", "118295", "118296", "118297", "118298", "118570", "118572", "118810", "118811", "118812", "118814", "118954", "118955", "118956", "119270", "119271", "119272", "119273", "119274", "119275", "119277", "119278", "119318", "119441", "119444", "119445", "119446", "119447", "119886", "119890", "119891", "119918", "120439", "120442", "120816", "121004", "121005", "121219", "121220", "121221", "121222", "121223", "121224", "121229", "121441", "121442", "121447", "121448", "121449", "121702", "121703", "121704", "121705", "121706", "121708", "121797", "121798", "121799", "122004", "122073", "122074", "122075", "122284", "122285", "122286", "122287", "122338", "122591", "122752", "122797", "122810", "122811", "122812", "109842", "110564", "113994", "115833", "116750", "117919", "118053", "118809", "119104", "119276", "119894", "120619", "121555", "122292", "110803", "112425", "119892", "120492", "121802", "121709", "122339", "111929", "122076", "118852", "120667", "120668", "121044", "112535", "121946", "122101", "122223", "122224", "122357", "122358", "122426", "122690", "122691", "115536", "114344", "114458", "115239", "115425", "115429", "122856", "121551", "122095", "111806", "112333", "122757", "122614", "110633", "89866", "117940", "122853", "120834", "121453", "122351", "114583", "114585", "114586", "114590", "114591", "115527", "115529", "115530", "115714", "115715", "115832", "116227", "116228", "116229", "116230", "116231", "116234", "116237", "116238", "116239", "116240", "116274", "116277", "116482", "116483", "116486", "116487", "116488", "116489", "116699", "116700", "116701", "116755", "116784", "116910", "117076", "117079", "117081", "117224", "117250", "117722", "117723", "117724", "117726", "117728", "117729", "117731", "117734", "117925", "117930", "117941", "118070", "118071", "118072", "118073", "118074", "118242", "118243", "118244", "118339", "118340", "118341", "118342", "118344", "118648", "118693", "118694", "118696", "118697", "118698", "118699", "118967", "118968", "119289", "119290", "119291", "119292", "119293", "119294", "119453", "119456", "119457", "119458", "119459", "119678", "119679", "119910", "120009", "120622", "120624", "120625", "120626", "120842", "120843", "121271", "121272", "121274", "121275", "121949", "121950", "121951", "121952", "121953", "121954", "122341", "122344", "122568", "122569", "122570", "122571", "122572", "122573", "122049", "122209", "100753", "101750", "103065", "103437", "107655", "108857", "108853", "109031", "109255", "109861", "109857", "109926", "109929", "110096", "110103", "110106", "110107", "110123", "110146", "110151", "110152", "110147", "110156", "110239", "110238", "110258", "110259", "110261", "110347", "110379", "110394", "110580", "110646", "110670", "110785", "110789", "110781", "110782", "110783", "110780", "110795", "110797", "110793", "110776", "110788", "110787", "110946", "110967", "110996", "110997", "110995", "111134", "111136", "111203", "111207", "111307", "111306", "111304", "111309", "111310", "111308", "111305", "111490", "111608", "111789", "111790", "111793", "111796", "112027", "112085", "112179", "112182", "112187", "112446", "112447", "112448", "112579", "112741", "112767", "113129", "113126", "113245", "113515", "113521", "113523", "113546", "113568", "113601", "113641", "113642", "113640", "113875", "113943", "113944", "113945", "113946", "113947", "114040", "114255", "114342", "114343", "114345", "114340", "114341", "114838", "114863", "114866", "114867", "114868", "114871", "114872", "114975", "114862", "115044", "115238", "115243", "115365", "115366", "115426", "115424", "115423", "115660", "116066", "116147", "116148", "116149", "116150", "116151", "116153", "116262", "116367", "116371", "116372", "116373", "116578", "116753", "116751", "116829", "116830", "116831", "116835", "116836", "116962", "116963", "117150", "117151", "117152", "117282", "117286", "117595", "117654", "117655", "117656", "117660", "117854", "118198", "118199", "118201", "118391", "118544", "118545", "118546", "118547", "118753", "118754", "118755", "118882", "119061", "119062", "119063", "119064", "119066", "119067", "119068", "119069", "119070", "119072", "119094", "119170", "119379", "119382", "119602", "119603", "119604", "119714", "119775", "119777", "119780", "120035", "120037", "120157", "120161", "120244", "120478", "120479", "120480", "120481", "120482", "120483", "120486", "120653", "120654", "120747", "120893", "120964", "120965", "120966", "120967", "120968", "120969", "120970", "120971", "120973", "121060", "121062", "121138", "121141", "121142", "121143", "121144", "121146", "121147", "121149", "121291", "121340", "121450", "121477", "121478", "121479", "121480", "121645", "121646", "121647", "121808", "121810", "121811", "121861", "121862", "121864", "121926", "121927", "121863", "122105", "122150", "122151", "122229", "122230", "122231", "122232", "122233", "122234", "122235", "122236", "122237", "122238", "122239", "122240", "122268", "122470", "122471", "122472", "122473", "122533", "122609", "122620", "122692", "122693", "122736", "122772", "122873", "110762", "110861", "111647", "111882", "113808", "114447", "117585", "117690", "117691", "117692", "117891", "117892", "117893", "117894", "117895", "118020", "118021", "118022", "118023", "118024", "118265", "118314", "118429", "118430", "118431", "118432", "118434", "118613", "118787", "118788", "118789", "118790", "118791", "118941", "118942", "118981", "118982", "119226", "119227", "119228", "119229", "119230", "119231", "119232", "119233", "119234", "119235", "119236", "119407", "119408", "119409", "119410", "119411", "119412", "119561", "119562", "119655", "119656", "119657", "119835", "119853", "119854", "119855", "120068", "120069", "120070", "120071", "120072", "120223", "120224", "120406", "120407", "120408", "120409", "120410", "120503", "120595", "120596", "120597", "120598", "120784", "120785", "120786", "120991", "120992", "120993", "121188", "121189", "121190", "121191", "121192", "121193", "121252", "121358", "121359", "121360", "121505", "121506", "121507", "121508", "121682", "121683", "121684", "121685", "121686", "121687", "121719", "121871", "121872", "121873", "121874", "121875", "121876", "121877", "121878", "121937", "121938", "121998", "122062", "122063", "122064", "122115", "122116", "122167", "122261", "122262", "122263", "122264", "122265", "122380", "122401", "122504", "122635", "122636", "122646", "122648", "122719", "122720", "122746", "122747", "122792", "107361", "107492", "107493", "107614", "107615", "107805", "108413", "108556", "108555", "108632", "109057", "109521", "109264", "109207", "110510", "110511", "110816", "111015", "116623", "118433", "122044", "122082", "122436", "120928", "122099", "115686", "120782", "121352", "121353", "122258", "119086", "119852", "119897", "119899", "119906", "120099", "120203", "120237", "120343", "120344", "120345", "120346", "120347", "120348", "120349", "120350", "120351", "120352", "120353", "120373", "120374", "120375", "120376", "120377", "120455", "120456", "120457", "120458", "120459", "120509", "120510", "120511", "120512", "120520", "120639", "120640", "120641", "120642", "120655", "120656", "120710", "120711", "120712", "120713", "120714", "120715", "120716", "120717", "120718", "120835", "120836", "120837", "120838", "120839", "120840", "120861", "120929", "121019", "121020", "121021", "121022", "121088", "121089", "121090", "121091", "121093", "121094", "121095", "121096", "121097", "121092", "121240", "121241", "121242", "121243", "121244", "121253", "121254", "121255", "121256", "121423", "121424", "121425", "121454", "121455", "121456", "121457", "121458", "121459", "121460", "121461", "121462", "121552", "121553", "121554", "121571", "121572", "111350", "121628", "121629", "121630", "121631", "121632", "121633", "121634", "121635", "121722", "121723", "121724", "121725", "121726", "121727", "121728", "121729", "121764", "121765", "121766", "121767", "121890", "121891", "121892", "121893", "121894", "121895", "121896", "121916", "121917", "121918", "121919", "121920", "121921", "121922", "122022", "122023", "122024", "122127", "122128", "122129", "122154", "122155", "122156", "122157", "122158", "122159", "122160", "122161", "122162", "122163", "122168", "122169", "122170", "122171", "122310", "122317", "122402", "122403", "122404", "122440", "122441", "122442", "122443", "122444", "122445", "122446", "122447", "122452", "122579", "122580", "122581", "122582", "122583", "122584", "122585", "122586", "122587", "122588", "122589", "122590", "122760", "122761", "122838", "122839", "122840", "122841", "122842", "122843", "120095", "121557", "121558", "122295", "122577", "107053", "108684", "111128", "111827", "111828", "111829", "112009", "112010", "112011", "112012", "112013", "120900", "120956", "120957", "121123", "121268", "121332", "121333", "121471", "121472", "121639", "121775", "121855", "121856", "121857", "121858", "121859", "121860", "121923", "121924", "122219", "122220", "122221", "122222", "122355", "122461", "122617", "122618", "122707", "122732", "122733", "122762", "122763", "122764", "111473", "120524", "122432", "115102", "115291", "120415", "120652", "120787", "120788", "120789", "121789", "122507", "122574", "122259", "122785", "122786", "121509", "121511", "121513", "121688", "121689", "121690", "121720", "121790", "121792", "121793", "121794", "121969", "122269", "122382", "122388", "122405", "122406", "122505", "122506", "122649", "122718", "122787", "122789", "122790", "121934", "121999", "122000", "122312", "122508", "122788", "122791", "122065", "122270", "122381", "120795", "122001", "103860", "105871", "107355", "108812", "108813", "109613", "109903", "110012", "110013", "110057", "110691", "111680", "111912", "112000", "113836", "114286", "115357", "117038", "117918", "118056", "118299", "118573", "118818", "119440", "119893", "120449", "120620", "121032", "121230", "110115", "120999", "121203", "121517", "121885", "121886", "121887", "121889", "121940", "122272", "122273", "122274", "122278", "122535", "122886", "121621", "122081", "118844", "118845", "118846", "120287", "120296", "120297", "120914", "121385", "121386", "121387", "121388", "121760", "121850", "121912", "121913", "121914", "121915", "122315", "122316", "122667", "120024", "87174", "88558", "90171", "90431", "92010", "92870", "92873", "100178", "104153", "104276", "88826", "108302", "108394", "92839", "110021", "110144A", "110382", "110919", "112141", "113099", "113382", "113383", "113384", "113385", "113386", "113387", "113388", "113389", "113592", "113593", "113594", "113595", "113596", "113597", "113598", "113605", "113606", "113607", "113613", "113849", "114296", "115377", "115385", "115752", "115857", "116736", "116737", "117225", "117231", "117407", "119478", "119479", "120289", "120308", "120683", "120685", "120824", "120825", "120826", "121051", "121052", "121053", "121377", "121378", "121379", "121380", "121381", "121382", "121383", "121384", "121567", "121568", "121569", "121583", "121755", "121756", "121757", "121759", "121986", "121987", "121988", "121989", "121990", "121991", "121992", "122025", "122177", "122178", "122179", "122303", "122304", "122305", "122306", "122307", "122308", "122410", "122411", "122415", "122531", "122532", "122657", "122665", "122666", "122815", "122816", "122817", "122819", "122820", "122821", "122822", "122823", "122825", "122729", "98773", "110601", "111860", "119526", "122045", "109811", "121099", "121803", "121838", "122291", "122518", "116381", "119374", "121303", "121439", "121440", "121642", "121643", "121644", "121713", "121768", "121779", "121780", "121781", "121955", "121956", "121957", "121958", "122054", "122055", "122056", "122138", "122226", "122227", "122228", "122297", "122359", "122360", "122361", "122451", "122462", "122463", "122464", "122465", "122466", "122467", "122468", "122469", "122619", "122630", "122708", "122765", "122766", "122767", "122768", "122769", "122770", "122801", "110025", "113241", "116913", "121476", "122249", "122311", "122480", "122594", "122777", "121284", "121619", "121620", "122216", "117960", "122346", "122347", "122450", "122613", "122700", "122756", "122759", "119160", "119653", "121469", "122135", "121325", "121623", "122046", "110303", "111214A", "112117", "115370", "117310", "117548", "117572", "117676", "119046", "119042", "119041", "119549", "119616", "119812", "120053", "120054", "120211", "120180", "120177", "111052", "109554", "120412", "122183", "122184", "122185", "120581", "120719", "120761", "120762", "120763", "120764", "120765", "120766", "120767", "120768", "120769", "120770", "120771", "120772", "120773", "120774", "120775", "120776", "120777", "120778", "120833", "120864", "120865", "120866", "120867", "120868", "120869", "120870", "120871", "120872", "120873", "120874", "120875", "120876", "120877", "120878", "120879", "120880", "120881", "120863", "121023", "121025", "121026", "121027", "121028", "121029", "121024", "121070", "121071", "121072", "121100", "121101", "121103", "121104", "121108", "121109", "121110", "121111", "121164", "121165", "121166", "121167", "121168", "121169", "121170", "121171", "121172", "121173", "121174", "121175", "121176", "121177", "121178", "121179", "121232", "121233", "121349", "121485", "121486", "121488", "121489", "121490", "121491", "121492", "121597", "121487", "121660", "121661", "121662", "121663", "121664", "121665", "121666", "121667", "121668", "121669", "121670", "121671", "121672", "121674", "121730", "121731", "121732", "121733", "121734", "121735", "121736", "121737", "121738", "121739", "121762", "121773", "121774", "121814", "121815", "121816", "121817", "121818", "121819", "121820", "121821", "121822", "121823", "121824", "121825", "121995", "121906", "122059", "122107", "122108", "122109", "122143", "122148", "122187", "122188", "122189", "122190", "122191", "122192", "122193", "122194", "122195", "122196", "122197", "122198", "122199", "122200", "122201", "122251", "122252", "122300", "122301", "122319", "122364", "122365", "122366", "122367", "122368", "122369", "122370", "122371", "122372", "122373", "122374", "122375", "122376", "122389", "122395", "122396", "122397", "122398", "122399", "122449", "122486", "122487", "122488", "122489", "122490", "122491", "122537", "122538", "122539", "122540", "122541", "122542", "122543", "122546", "122595", "122607", "122608", "122623", "122624", "122625", "122626", "122627", "122628", "122629", "122730", "122737", "122738", "122778", "122779", "122780", "122781", "122782", "122800", "122802", "122836", "122837", "122876", "122877", "122878", "122879", "122880", "122881", "122882", "122883", "122884", "122885", "122889", "122890", "120331", "120332", "120333", "120334", "120335", "120336", "120691", "120692", "121079", "121080", "121081", "121082", "121083", "121084", "121085", "121086", "121717", "121852", "121853", "121854", "122040", "122041", "122042", "122043", "122418", "122419", "122420", "122421", "122725", "122431", "122753", "121307", "121308", "120330", "120329", "120328", "120327", "120228", "120129", "119522", "117782", "117780", "117779", "117778", "117777", "117554", "117414", "117413", "117412", "117411", "117410", "117409", "116778", "116777", "116776", "116775", "116774", "121537", "121579", "121715", "121909", "122149", "122208", "122350", "122428", "122429", "122612", "122669", "122682", "122683", "121613", "111055", "112867", "113911", "117635", "120411", "121066", "121194", "121322", "121516", "122117", "122266", "118959", "121317", "121622", "122136", "122213", "122437", "110925", "111046", "117719", "118057", "118058", "118328", "118465", "118712", "118815", "118880", "119279", "119280", "119281", "119327", "119672", "119673", "120354", "120450", "120628", "120629", "120630", "120819", "121007", "121371", "121961", "121962", "121993", "122152", "122153", "122293", "122294", "122391", "122519", "122520", "122610", "122430", "122754", "121617", "121618", "122141", "122697", "122698", "122699", "122758", "122809", "122212", "121606", "122215", "122348", "122439", "110135", "115821", "116717", "117394", "117395", "117560", "121069", "117948", "117949", "118848", "118870", "119487", "119956", "119958", "119967", "119957", "120292", "120648", "120649", "120650", "120651", "120828", "120827", "121045", "122181", "122180", "122417", "122668", "122862", "122863", "121966", "121804", "119670", "121008", "121527", "121700", "121701", "122118", "122125", "122142", "122342", "122704", "122705", "109909", "121626", "121301", "122701", "117575", "121994", "122052", "118914", "118915", "119159", "119596", "121338", "121339", "121531", "121640", "121641", "121776", "121959", "121960", "122053", "122225", "109492", "116333", "122686", "122094", "120917", "110772", "116512", "118872", "119715", "121528", "121529", "121306", "121608", "121609", "121616", "121607", "122084", "122210", "122211", "122611", "122727", "122755", "111602", "119490", "119491", "119492", "119493", "120372", "120724", "121836", "121837", "113360", "113494", "117269", "121580", "121581", "122035", "122036", "120115", "121467", "122298", "118859", "122724", "117094", "118902", "119740", "120552", "120735", "120947", "121278", "122144", "122438", "122182", "113863", "113864", "113865", "114220", "114719", "114723", "114724", "114748", "114749", "114976", "115162", "115163", "115826", "115827", "116282", "116283", "116284", "116285", "116286", "116287", "116288", "116728", "116729", "117365", "117366", "117385", "117386", "117387", "118839", "118849", "118850", "118851", "119935", "120285", "120286", "120298", "120299", "120687", "120906", "120907", "120908", "120909", "120910", "121984", "121985", "122814", "122352", "120886", "121129", "122087", "122687", "120320", "121648", "121761", "122474", "122694", "122353", "122048", "117406", "122615", "121575", "118402", "118767", "122478", "122479", "122735", "121269", "121420", "118330", "119516", "115657", "122080", "122858", "122207", "121578", "122321", "122322", "120543", "121835", "121834", "122093", "122433", "122706", "119702", "116526", "117115", "117538", "117568", "118483", "118679", "118893", "119162", "119723", "120339", "121807", "122202", "122600", "122685", "120915", "121257", "121258", "121259", "121260", "121261", "121262", "121263", "121264", "121265", "121266", "121390", "121391", "121392", "121393", "121464", "121465", "121466", "121770", "121769", "121771", "121948", "122601", "122603", "122827", "122859", "122860", "122861", "120933", "121087", "121277", "121292", "121561", "122345", "121763", "110716", "120264", "122206", "122271", "122340", "122318", "122320", "122330", "122331", "122332", "122333", "122335", "122336", "122337", "122632", "122604", "122605", "122606", "122771", "122334", "122826", "114565", "114566", "114567", "117259", "117260", "118153", "118710", "118891", "118892", "119117", "120858", "120859", "120860", "121124", "121125", "121436", "121904", "121905", "122602", "1640", "1641", "1642", "1621", "1623", "1625", "1626", "1628", "1629", "1631", "1633", "1634", "1635", "1638", "116780", "116781", "116782", "116783", "117285", "117857", "119049", "119060", "119085", "119089", "119090", "119095", "119427", "119919", "120477", "120696", "120930" };
            var LedgerSrl = ctxTFAT.Ledger.Where(x => cars.Contains(x.Srl)).Select(x => x.Srl).ToList();
            var Carlist = cars.ToList();
            var result = Carlist.Where(p => LedgerSrl.All(p2 => p2 != p));
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("SRL");
            foreach (var item in result)
            {
                var values = item;
                dataTable.Rows.Add(values);
            }
            GenerateExcel(dataTable, "F:\\UserManager.xls");
        }

        public static void GenerateExcel(DataTable dataTable, string path)
        {

            DataSet dataSet = new DataSet();
            dataSet.Tables.Add(dataTable);

            // create a excel app along side with workbook and worksheet and give a name to it  
            Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook excelWorkBook = excelApp.Workbooks.Add();
            Microsoft.Office.Interop.Excel._Worksheet xlWorksheet = excelWorkBook.Sheets[1];
            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
            foreach (DataTable table in dataSet.Tables)
            {
                //Add a new worksheet to workbook with the Datatable name  
                Microsoft.Office.Interop.Excel.Worksheet excelWorkSheet = excelWorkBook.Sheets.Add();
                excelWorkSheet.Name = table.TableName;

                // add all the columns  
                for (int i = 1; i < table.Columns.Count + 1; i++)
                {
                    excelWorkSheet.Cells[1, i] = table.Columns[i - 1].ColumnName;
                }

                // add all the rows  
                for (int j = 0; j < table.Rows.Count; j++)
                {
                    for (int k = 0; k < table.Columns.Count; k++)
                    {
                        excelWorkSheet.Cells[j + 2, k + 1] = table.Rows[j].ItemArray[k].ToString();
                    }
                }
            }
            excelWorkBook.SaveAs(path); // -> this will do the custom  
            excelWorkBook.Close();
            excelApp.Quit();
        }
        [HttpPost]
        public ActionResult AddTo(string To, string WhereToAdd)
        {
            var Code = ctxTFAT.TfatBranch.OrderByDescending(x => x.RECORDKEY).Select(x => x.Code).Take(1).FirstOrDefault();

            TfatBranch tfatBranch = new TfatBranch();
            tfatBranch.City = "Mumbai";
            tfatBranch.Code = (Convert.ToInt32(Code) + 1).ToString("D6");
            tfatBranch.CompCode = "100";
            tfatBranch.Country = "India";
            tfatBranch.CurrDec = 0;
            tfatBranch.CurrName = 1;
            tfatBranch.Fri = true;
            tfatBranch.gp_AddonBased = false;
            tfatBranch.gp_AddonBasedDescr = false;
            tfatBranch.gp_AllowDiscAP = false;
            tfatBranch.gp_AllowDiscAS = false;
            tfatBranch.gp_AllowDiscPP = false;
            tfatBranch.gp_AllowDiscPS = false;
            tfatBranch.gp_AllowEditDelete = false;
            tfatBranch.gp_AllowRateP = false;
            tfatBranch.gp_AllowRateS = false;
            tfatBranch.gp_AutoAccCode = true;
            tfatBranch.gp_AutoAccLength = 0;
            tfatBranch.gp_AutoAccStyle = 0;
            tfatBranch.gp_Batch = false;
            tfatBranch.gp_BillStock = false;
            tfatBranch.gp_BIN = false;
            tfatBranch.gp_CashLimit = false;
            tfatBranch.gp_CashLimitAmt = 0;
            tfatBranch.gp_CashLimitWarn = false;
            tfatBranch.gp_CLStock = false;
            tfatBranch.gp_CLStockAddORder = false;
            tfatBranch.gp_DiscAP = false;
            tfatBranch.gp_DiscAS = false;
            tfatBranch.gp_DiscPP = false;
            tfatBranch.gp_DiscPS = false;
            tfatBranch.gp_DuplicateItemName = false;
            tfatBranch.gp_EnableParty = false;
            tfatBranch.gp_GINQty = false;
            tfatBranch.gp_GSTStyle = 0;
            tfatBranch.gp_GSTSupply = false;
            tfatBranch.gp_ItemAutoCode = false;
            tfatBranch.gp_ItemAutoDescr = false;
            tfatBranch.gp_ItemCodeStyle = false;
            tfatBranch.gp_ItemDescrStyle = false;
            tfatBranch.gp_ItemPrefixName = false;
            tfatBranch.gp_LocWiseTax = false;
            tfatBranch.gp_MultiUnit = false;
            tfatBranch.gp_NegStock = false;
            tfatBranch.gp_NegStockAsOn = false;
            tfatBranch.gp_NegWarn = false;
            tfatBranch.gp_OrdIncludeRet = false;
            tfatBranch.gp_PostP = false;
            tfatBranch.gp_PricelistReqd = false;
            tfatBranch.gp_PSP = false;
            tfatBranch.gp_PurchPostTDS = false;
            tfatBranch.gp_QtnA = false;
            tfatBranch.gp_RCMDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
            tfatBranch.gp_RoundVAT = 0;
            tfatBranch.gp_Serial = false;
            tfatBranch.gp_SEZChargeParty = false;
            tfatBranch.gp_SONoDupl = false;
            tfatBranch.gp_SOPropagation = false;
            tfatBranch.gp_SPAdjForce = false;
            tfatBranch.gp_VatDecP = 0;
            tfatBranch.gp_VatDecS = 0;
            tfatBranch.gp_VATGST = "G";
            tfatBranch.Grp = WhereToAdd;
            tfatBranch.LastBranch = false;
            tfatBranch.LastUpdated = false;
            tfatBranch.LocationCode = 0;
            tfatBranch.LogIn = false;
            tfatBranch.Mon = true;
            tfatBranch.Name = char.ToUpper(To[0]) + To.Substring(1);
            tfatBranch.PCCode = 0;
            tfatBranch.Sat = true;
            tfatBranch.SMSPrefix = false;
            tfatBranch.State = "Maharashtra";
            tfatBranch.Sun = true;
            tfatBranch.Thu = true;
            tfatBranch.Tue = true;
            tfatBranch.Wed = true;
            tfatBranch.AUTHIDS = muserid;
            tfatBranch.AUTHORISE = "A00";
            tfatBranch.ENTEREDBY = muserid;
            tfatBranch.LASTUPDATEDATE = DateTime.Now;
            tfatBranch.Status = true;
            tfatBranch.Category = "Area";
            tfatBranch.BranchType = "G";
            tfatBranch.Flag = "";
            ctxTFAT.TfatBranch.Add(tfatBranch);

            ctxTFAT.SaveChanges();
            return Json(new { Message = "Sucess", JsonRequestBehavior.AllowGet });
        }

        public ActionResult SaveData(AreaMasterVM mModel)
        {
            using (var transaction = ctxTFAT.Database.BeginTransaction())
            {
                try
                {
                    // iX9: Remove Existing Data for Delete Mode
                    if (mModel.Mode == "Delete")
                    {
                        var MSG = DeleteStateMaster(mModel);
                        transaction.Commit();
                        transaction.Dispose();
                        UpdateAuditTrail(mbranchcode, mModel.Mode, mModel.Header, "     " + mperiod.Substring(0, 2) + mModel.Document, DateTime.Now, 0, mModel.Document, "Delete Area", "B");
                        return MSG;
                    }
                    TfatBranch tfatBranch = new TfatBranch();
                    bool mAdd = true;
                    if (ctxTFAT.TfatBranch.Where(x => x.Code == mModel.Document).FirstOrDefault() != null)
                    {
                        tfatBranch = ctxTFAT.TfatBranch.Where(x => x.Code == mModel.Document).FirstOrDefault();
                        mAdd = false;
                    }
                    if (mAdd)
                    {
                        if (ctxTFAT.TfatBranch.Where(x => x.Code != "G00000" && x.Code != "HO0000").ToList().Count() == 0)
                        {
                            tfatBranch.Code = "000001";
                        }
                        else
                        {
                            var NewCode = ctxTFAT.TfatBranch.Where(x => x.Code != "G00000" && x.Code != "HO0000").OrderByDescending(x => x.Code).Take(1).Select(x => x.Code).FirstOrDefault();
                            tfatBranch.Code = (Convert.ToInt32(NewCode) + 1).ToString("D6");
                        }
                        //var code = ctxTFAT.TfatBranch.OrderByDescending(x => x.RECORDKEY).Select(x => x.Code).Take(1).FirstOrDefault();
                        //tfatBranch.Code = (Convert.ToInt32(code) + 1).ToString("D6");
                        tfatBranch.DocDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    }
                    tfatBranch.CompCode = "100";

                    tfatBranch.City = mModel.City;
                    tfatBranch.Country = mModel.Country;
                    tfatBranch.State = mModel.State;
                    tfatBranch.aPin = mModel.Pincode;
                    tfatBranch.Status = mModel.Active;
                    tfatBranch.Name = char.ToUpper(mModel.Name[0]) + mModel.Name.Substring(1);
                    tfatBranch.Grp = mModel.Grp;

                    tfatBranch.CurrDec = 0;
                    tfatBranch.CurrName = 1;
                    tfatBranch.Fri = true;
                    tfatBranch.gp_AddonBased = false;
                    tfatBranch.gp_AddonBasedDescr = false;
                    tfatBranch.gp_AllowDiscAP = false;
                    tfatBranch.gp_AllowDiscAS = false;
                    tfatBranch.gp_AllowDiscPP = false;
                    tfatBranch.gp_AllowDiscPS = false;
                    tfatBranch.gp_AllowEditDelete = false;
                    tfatBranch.gp_AllowRateP = false;
                    tfatBranch.gp_AllowRateS = false;
                    tfatBranch.gp_AutoAccCode = true;
                    tfatBranch.gp_AutoAccLength = 0;
                    tfatBranch.gp_AutoAccStyle = 0;
                    tfatBranch.gp_Batch = false;
                    tfatBranch.gp_BillStock = false;
                    tfatBranch.gp_BIN = false;
                    tfatBranch.gp_CashLimit = false;
                    tfatBranch.gp_CashLimitAmt = 0;
                    tfatBranch.gp_CashLimitWarn = false;
                    tfatBranch.gp_CLStock = false;
                    tfatBranch.gp_CLStockAddORder = false;
                    tfatBranch.gp_DiscAP = false;
                    tfatBranch.gp_DiscAS = false;
                    tfatBranch.gp_DiscPP = false;
                    tfatBranch.gp_DiscPS = false;
                    tfatBranch.gp_DuplicateItemName = false;
                    tfatBranch.gp_EnableParty = false;
                    tfatBranch.gp_GINQty = false;
                    tfatBranch.gp_GSTStyle = 0;
                    tfatBranch.gp_GSTSupply = false;
                    tfatBranch.gp_ItemAutoCode = false;
                    tfatBranch.gp_ItemAutoDescr = false;
                    tfatBranch.gp_ItemCodeStyle = false;
                    tfatBranch.gp_ItemDescrStyle = false;
                    tfatBranch.gp_ItemPrefixName = false;
                    tfatBranch.gp_LocWiseTax = false;
                    tfatBranch.gp_MultiUnit = false;
                    tfatBranch.gp_NegStock = false;
                    tfatBranch.gp_NegStockAsOn = false;
                    tfatBranch.gp_NegWarn = false;
                    tfatBranch.gp_OrdIncludeRet = false;
                    tfatBranch.gp_PostP = false;
                    tfatBranch.gp_PricelistReqd = false;
                    tfatBranch.gp_PSP = false;
                    tfatBranch.gp_PurchPostTDS = false;
                    tfatBranch.gp_QtnA = false;
                    tfatBranch.gp_RCMDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    tfatBranch.gp_RoundVAT = 0;
                    tfatBranch.gp_Serial = false;
                    tfatBranch.gp_SEZChargeParty = false;
                    tfatBranch.gp_SONoDupl = false;
                    tfatBranch.gp_SOPropagation = false;
                    tfatBranch.gp_SPAdjForce = false;
                    tfatBranch.gp_VatDecP = 0;
                    tfatBranch.gp_VatDecS = 0;
                    tfatBranch.gp_VATGST = "G";
                    tfatBranch.LastBranch = false;
                    tfatBranch.LastUpdated = false;
                    tfatBranch.LocationCode = 0;
                    tfatBranch.LogIn = false;
                    tfatBranch.Mon = true;
                    tfatBranch.PCCode = 0;
                    tfatBranch.Sat = true;
                    tfatBranch.SMSPrefix = false;
                    tfatBranch.Sun = true;
                    tfatBranch.Thu = true;
                    tfatBranch.Tue = true;
                    tfatBranch.Wed = true;
                    tfatBranch.AUTHIDS = muserid;
                    tfatBranch.AUTHORISE = "A00";
                    tfatBranch.ENTEREDBY = muserid;
                    //tfatBranch.LASTUPDATEDATE = DateTime.Now;
                    tfatBranch.BranchMail = mModel.BranchMail;
                    tfatBranch.LocalMail = mModel.LocalMail;

                    tfatBranch.Category = "Area";
                    tfatBranch.BranchType = "G";
                    tfatBranch.Flag = "";


                    tfatBranch.AUTHIDS = muserid;
                    tfatBranch.AUTHORISE = mauthorise;
                    tfatBranch.ENTEREDBY = muserid;
                    tfatBranch.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());

                    if (mAdd == false)
                    {
                        ctxTFAT.Entry(tfatBranch).State = EntityState.Modified;
                    }
                    else
                    {
                        ctxTFAT.TfatBranch.Add(tfatBranch);
                    }
                    ctxTFAT.SaveChanges();
                    //mnewrecordkey = Convert.ToInt32(mobj.RECORDKEY);
                    string mNewCode = "";
                    //mNewCode = mobj.Code;
                    transaction.Commit();
                    transaction.Dispose();
                    UpdateAuditTrail(mbranchcode, mModel.Mode, mModel.Header, "     " + mperiod.Substring(0, 2) + tfatBranch.Code, DateTime.Now, 0, tfatBranch.Code, "Save Area", "B");

                }
                catch (DbEntityValidationException ex1)
                {
                    transaction.Rollback();
                    return Json(new { Message = ex1.InnerException.Message, Status = "Error", id = "StateMaster" }, JsonRequestBehavior.AllowGet);
                }
                catch (System.Data.Entity.Infrastructure.DbUpdateException ex)
                {
                    transaction.Rollback();
                    return Json(new { Message = ex.InnerException.Message, Status = "Error", id = "StateMaster" }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception e)
                {
                    ModelState.AddModelError("", "Unable to Save Changes. Try again, and if the problem persists, Contact your System Administrator.");
                    ViewBag.Message = "Error, While updating the Data..\n" + e.Message;
                    return Json(new { Message = "Error, While updating the Data..\n" + e.Message, Status = "Error", id = "StateMaster" }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { Status = "Success", id = "StateMaster" }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteStateMaster(AreaMasterVM mModel)
        {
            if (mModel.Document == null)
            {
                return Json(new
                {
                    Message = "Code not Entered..",
                    Status = "Error"
                }, JsonRequestBehavior.AllowGet);
            }

            // iX9: Check for Active Master MasterGroups
            var Delete = true;
            string mactivestring = "";
            var mactive1 = ctxTFAT.TfatBranch.Where(x => (x.Grp == mModel.Document)).Select(x => x.Name).FirstOrDefault();
            if (mactive1 != null) { mactivestring = mactivestring + mactive1; }

            var mactive2 = ctxTFAT.LRMaster.Where(x => x.Source == mModel.Document || x.Dest == mModel.Document || x.BillBran == mModel.Document).FirstOrDefault();
            if (mactive2 != null)
            {
                mactivestring = mactivestring + "\nLrNo: " + mactive2.LrNo;
            }
            var mactive3 = ctxTFAT.LCMaster.Where(x => x.FromBranch == mModel.Document || x.ToBranch == mModel.Document).FirstOrDefault();
            if (mactive3 != null)
            {
                mactivestring = mactivestring + "\nLcNo: " + mactive3.LCno;
            }
            var mactive4 = ctxTFAT.Master.Where(x => x.AppBranch.Contains(mModel.Document)).FirstOrDefault();
            if (mactive4 != null)
            {
                mactivestring = mactivestring + "\nName: " + mactive4.Name + " In Master Account.";
            }
            var mactive5 = ctxTFAT.VehicleMaster.Where(x => x.Branch.Contains(mModel.Document)).FirstOrDefault();
            if (mactive5 != null)
            {
                mactivestring = mactivestring + "\nName: " + mactive5.TruckNo + " In Vehicle Master.";
            }
            var mactive6 = ctxTFAT.DriverMaster.Where(x => x.Branch == mModel.Document).FirstOrDefault();
            if (mactive6 != null)
            {
                mactivestring = mactivestring + "\nName: " + mactive6.Name + " In Driver Master.";
            }
            var mactive7 = ctxTFAT.VehicleCategoryRates.Where(x => x.FromBranch == mModel.Document || x.ToBranch == mModel.Document).FirstOrDefault();
            if (mactive7 != null)
            {
                mactivestring = mactivestring + "\nName: " + mactive7.Code + " In VehicleCategoryRates Master.";
            }
            var mactive8 = ctxTFAT.VehicleRates.Where(x => x.FromBranch == mModel.Document || x.ToBranch == mModel.Document).FirstOrDefault();
            if (mactive8 != null)
            {
                mactivestring = mactivestring + "\nName: " + mactive8.Code + " In VehicleRates Master.";
            }
            var mactive9 = ctxTFAT.KilometerMaster.Where(x => x.FromBranch == mModel.Document).FirstOrDefault();
            if (mactive9 != null)
            {
                mactivestring = mactivestring + "\nIn Kilometer Master.";
            }

            if (mactivestring != "")
            {
                return Json(new
                {
                    Message = "Active Item, Can't Delete..\nUsed with:\n" + mactivestring,
                    Status = "Error"
                }, JsonRequestBehavior.AllowGet);
            }

            var mList = ctxTFAT.TfatBranch.Where(x => (x.Code == mModel.Document)).FirstOrDefault();
            ctxTFAT.TfatBranch.Remove(mList);

            var mList1 = ctxTFAT.KilometerMasterRef.Where(x => (x.ToBranch == mModel.Document)).ToList();
            ctxTFAT.KilometerMasterRef.RemoveRange(mList1);



            ctxTFAT.SaveChanges();

            return Json(new
            {
                Status = "Success"
            }, JsonRequestBehavior.AllowGet);
        }
    }
}