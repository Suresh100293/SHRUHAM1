
@model ALT_ERP3.Areas.Accounts.Models.CreditorPaymentVM
@using Common

<div class="modal-content">
    <div class="modal-header" style="background-color:#cccccc">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"></span></button>
        <h4 class="modal-title">@Model.SessionFlag Record</h4>
    </div>
    <div class="modal-body" style="height:470px;padding-left:0px;">
        <div class="form-horizontal" id="ledgerupdate" style="margin-left:30px;">
            <div id="ErrorMessage1" name="ErrorMessage1" class="alert alert-danger" style="display: none; padding:3px;"></div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Branch:</div>
                <div class="col-sm-2">
                    @Html.DropDownListFor(x => x.Branch, DropdownHelper.EmptyList(), new { @class = "form-control", @id = "addBranch", @Name = "addBranch" })
                </div>
                <div class="col-sm-1 control-label">Type :</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.LedgerType, new { @class = "form-control", @id = "addLedgerType", @Name = "addLedgerType", @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">Serial :</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.LedgerSrl, new { @class = "form-control", @id = "addLedgerSrl", @Name = "addLedgerSrl", @disabled = "disabled" })
                </div>



            </div>

            <div class="form-group">

                <div class="col-sm-1 control-label">Bill Date:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.StrBillDate, new { @class = "form-control", @id = "addStrBillDate", @Name = "addStrBillDate", @style = "width:80%;", @Value = Model.BillDate.ToString("dd-MM-yyyy"), @disabled = "disabled" })
                </div>

                <div class="col-sm-1 control-label">Bill Amount:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.BillAmt, new { @class = "form-control", @id = "addBillAmt", @Name = "addBillAmt", @style = "width:80%;", @Value = Model.BillAmt, @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">Balance:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.BalAmt, new { @class = "form-control", @id = "addBalAmt", @Name = "addBalAmt", @style = "width:80%;", @Value = Model.BalAmt, @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">Curr. Bal:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.AdjustAmt, new { @class = "form-control", @id = "AdjustAmt", @Name = "AdjustAmt", @style = "width:80%;", @Value = Model.AdjustAmt, @disabled = "disabled" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Amount:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.Amt, new { @class = "form-control", @id = "addAmt", @Name = "addAmt", @Value = Model.Amt })
                </div>
                <div class="col-sm-1 control-label">Tds Amount:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.BillTDS, new { @class = "form-control", @id = "BillTDS", @Name = "BillTDS", @style = "width:80%;", @Value = Model.BillTDS })
                </div>
                <div class="col-sm-1 control-label">Remark:</div>
                <div class="col-sm-5">
                    @Html.TextAreaFor(x => x.Remark, new { @class = "form-control", @id = "addRemark", @Name = "addRemark", @Value = Model.Remark, @cols = 20, @rows = 2, @maxlength = 100 })
                </div>


            </div>
            <div class="form-group">
                <div id="divAddchargesList" style="min-height:300px;max-height:300px;overflow: scroll;">
                    <table id="addlchargesgrid" class="zui-table" style="width:100%;">
                        <thead>
                            <tr>
                                <th>Charges</th>
                                <th>+/-</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ChargesList != null)
                            {
                                foreach (var item in @Model.ChargesList.ToList())
                                {
                                    <tr id="datacharge" style="font-family:Tahoma;font-size:9pt;border: solid 1px lightgray;">
                                        <td style="vertical-align:inherit;">@item.Header</td>
                                        <td style="vertical-align:inherit;">@item.AddLess</td>
                                        <td><input type="text" id="txtf_@item.Fld" alt="@item.Fld" value="@item.Amt" class="txtfvalue" style="text-align:right" /></td>
                                        <td hidden="hidden">@item.PostCode</td>
                                        <td hidden="hidden">@item.Fld</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer" style="background-color:#cccccc">
        <div class="col-sm-2 control-label">Net Value:</div>
        <div class="col-sm-2">
            @Html.TextBoxFor(x => x.NetAmt, new { @class = "form-control", @id = "addNetAmt", @Name = "addNetAmt", @disabled = "disabled", @Value = Model.NetAmt })
        </div>
        <div class="col-sm-2 control-label">Account Bal:</div>
        <div class="col-sm-2">
            @Html.TextBoxFor(x => x.UnAdjustedAmt, new { @class = "form-control", @id = "UnAdjustedAmt", @Name = "UnAdjustedAmt", @disabled = "disabled", @Value = Model.UnAdjustedAmt })
        </div>
        <button type="button" class="btn btn-success" id="pushrecord">Save</button>
        <button type="button" class="btn btn-success" id="btnAddAdvanceList">Save</button>

        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
    </div>
</div>
@Html.HiddenFor(x => x.tempid, new { @id = "hdntempid" })
@Html.HiddenFor(x => x.SessionFlag, new { @id = "hdnSessionFlag" })

@Html.HiddenFor(x => x.AdvType, new { @id = "hdnuAdvType" })
<script>
    $(document).ready(function () {


        loadAdvanceTypeList()
        loadBranchList()


        $('#addFMDateStr').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });

        //$("#addAmt").focus(function (event) {
        //    event.preventDefault();
        //    debugger;
        //    $("#hdnChargeAmt").val(this.Value);
        //});

        $("input").focus(function () {
            debugger;
            var value = this.value;
            $("#hdnChargeAmt").val(this.value);
        });

        $("#addAmt").blur(function (event) {
            event.preventDefault();
            debugger;
            var PreviousAmt = parseFloat($("#hdnChargeAmt").val());
            var CurrAmt = parseFloat($("#addAmt").val());
            var AccbalAmt = parseFloat($("#UnAdjustedAmt").val());
            var DocBalAmt = parseFloat($("#AdjustAmt").val());
            var NetAmt = parseFloat($("#addNetAmt").val());

            var AddUpto = 0;
            if (AccbalAmt >= DocBalAmt) {
                AddUpto = DocBalAmt;
            }
            else {
                AddUpto = AccbalAmt;

            }
            var ExtendAmt = PreviousAmt + AddUpto;
            if (CurrAmt != PreviousAmt) {
                if (CurrAmt >= ExtendAmt) {
                    var IncreaseAmt = ExtendAmt - PreviousAmt;
                    $("#addAmt").val(ExtendAmt);
                    $("#AdjustAmt").val(DocBalAmt - IncreaseAmt);
                    $("#UnAdjustedAmt").val(AccbalAmt - IncreaseAmt);
                    $("#addNetAmt").val(NetAmt + IncreaseAmt);

                }
                else {
                    if (CurrAmt >= PreviousAmt) {
                        var IncreaseAmt = CurrAmt - PreviousAmt;
                        //$("#addAmt").val(ExtendAmt);
                        $("#AdjustAmt").val(DocBalAmt - IncreaseAmt);
                        $("#UnAdjustedAmt").val(AccbalAmt - IncreaseAmt);
                        $("#addNetAmt").val(NetAmt + IncreaseAmt);
                    }
                    else {
                        //Descrese Amt
                        var Decreaseamt = PreviousAmt - CurrAmt;
                        $("#AdjustAmt").val(DocBalAmt + Decreaseamt)
                        $("#UnAdjustedAmt").val(AccbalAmt + Decreaseamt)
                        $("#addNetAmt").val(NetAmt - Decreaseamt)
                    }
                }
            }

        });

        $("#addlchargesgrid tbody").on('focusout', '.txtfvalue', function () {
            debugger;
            var currentRow = $(this).closest("tr");
            var Equation = currentRow.find("td:eq(1)").text();
            var PreviousValue = parseFloat($("#hdnChargeAmt").val());
            var NetAmt = parseFloat($("#addNetAmt").val());
            if (Equation == "-") {
                var DocBal = parseFloat($("#AdjustAmt").val());
                var ChargeAmt = parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
                if (DocBal > 0) {
                    var AdjustUpto = PreviousValue + DocBal;
                    if (ChargeAmt != PreviousValue) {
                        if (ChargeAmt > AdjustUpto) {
                            //IncreaseAmt
                            var Increaseamt = AdjustUpto - PreviousValue;
                            currentRow.find('td').find("input[class='txtfvalue']").val(AdjustUpto);
                            $("#AdjustAmt").val(DocBal - Increaseamt);
                            $("#addNetAmt").val(NetAmt + Increaseamt);
                        }
                        else {
                            if (ChargeAmt >= PreviousValue) {
                                //Increase Amt
                                var Increaseamt = ChargeAmt - PreviousValue;
                                $("#AdjustAmt").val(DocBal - Increaseamt);
                                $("#addNetAmt").val(NetAmt + Increaseamt);
                            }
                            else {
                                //Decrease Amt
                                var Decreaseamt = PreviousValue - ChargeAmt;
                                $("#AdjustAmt").val(DocBal + Decreaseamt);
                                $("#addNetAmt").val(NetAmt - Decreaseamt);
                            }

                        }
                    }

                }
                else {
                    if (ChargeAmt != PreviousValue) {
                        if (ChargeAmt > PreviousValue) {
                            //Maintain Previous Value
                            currentRow.find('td').find("input[class='txtfvalue']").val(PreviousValue)
                        }
                        else {
                            //Decrease Amt
                            var Decreaseamt = PreviousValue - ChargeAmt;
                            $("#AdjustAmt").val(DocBal + Decreaseamt);
                            $("#addNetAmt").val(NetAmt - Decreaseamt);
                        }
                    }

                }
            }
            else if (Equation != "+") {
                var AccBal = parseFloat($("#UnAdjustedAmt").val());
                var ChargeAmt = parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());

                if (AccBal > 0) {
                    var AdjustUpto = PreviousValue + AccBal;
                    if (ChargeAmt != PreviousValue) {
                        if (ChargeAmt >= AdjustUpto) {
                            //IncreaseAmt
                            var Increaseamt = AdjustUpto - PreviousValue;
                            currentRow.find('td').find("input[class='txtfvalue']").val(AdjustUpto);
                            $("#UnAdjustedAmt").val(AccBal - Increaseamt);
                        }
                        else {
                            if (ChargeAmt >= PreviousValue) {
                                //IncreaseAmt
                                var Increaseamt = ChargeAmt - PreviousValue;
                                $("#UnAdjustedAmt").val(AccBal - Increaseamt);
                            }
                            else {
                                //DecreaseAmt
                                var Decreaseamt = PreviousValue - ChargeAmt;
                                $("#UnAdjustedAmt").val(AccBal + Decreaseamt);
                            }
                        }
                    }
                }
                else {
                    if (ChargeAmt != PreviousValue) {
                        if (ChargeAmt > PreviousValue) {
                            //Set Previous Status
                            currentRow.find('td').find("input[class='txtfvalue']").val(PreviousValue);
                        }
                        else {
                            //DecreaseAmt
                            var Decreaseamt = PreviousValue - ChargeAmt;
                            $("#UnAdjustedAmt").val(AccBal + Decreaseamt);
                        }
                    }
                }

            }

            $("#hdnChargeAmt").val("0");
        });

        $("#BillTDS").blur(function (event) {
            event.preventDefault();
            debugger;
            var PreviousAmt = parseFloat($("#hdnChargeAmt").val());
            var CurrAmt = parseFloat($("#BillTDS").val());
            var DocBalAmt = parseFloat($("#AdjustAmt").val());


            var ExtendAmt = PreviousAmt + DocBalAmt;

            if (CurrAmt != PreviousAmt) {
                if (CurrAmt >= ExtendAmt) {
                    var IncreaseAmt = ExtendAmt - PreviousAmt;
                    $("#BillTDS").val(ExtendAmt);
                    $("#AdjustAmt").val(DocBalAmt - IncreaseAmt);
                }
                else {
                    if (CurrAmt >= PreviousAmt) {
                        var IncreaseAmt = CurrAmt - PreviousAmt;
                        $("#AdjustAmt").val(DocBalAmt - IncreaseAmt);

                    }
                    else {
                        //Descrese Amt
                        var Decreaseamt = PreviousAmt - CurrAmt;
                        $("#AdjustAmt").val(DocBalAmt + Decreaseamt)

                    }
                }
            }

        });

        $('#btnAddAdvanceList').click(function (event) {
            event.preventDefault();

            var mChargeList = [];

            $('#addlchargesgrid tbody tr').each(function () {
                var tds = $(this).find('td');
                var chgs = {
                    Header: tds.eq(0).text(),
                    AddLess: tds.eq(1).text(),
                    Amt: tds.find("input[class='txtfvalue']").val(),
                    PostCode: tds.eq(3).text(),
                    Fld: tds.eq(4).text()
                }
                mChargeList.push(chgs);
            });



            var accname = $('#addCode').select2('data').text;
            var ModelData = {};

            ModelData["ChargesList"] = mChargeList;
            ModelData["tempId"] = $('#hdntempid').val();
            ModelData["SessionFlag"] = $('#hdnSessionFlag').val();
            ModelData["Amt"] = $('#addAmt').val();
            ModelData["Remark"] = $('#addRemark').val();
            ModelData["Taxable"] = $('#UpAccAmt').val();
            ModelData["BillTDS"] = $('#BillTDS').val();

            if ($('#addGSTNoItc').is(":checked")) {

                ModelData["GSTFlag"] = $('#addGSTNoItc').is(":checked");
                ModelData["GSTCode"] = $("#addGSTCode").val();
                ModelData["CGSTAmt"] = $('#txttotcgst').val();
                ModelData["SGSTAmt"] = $('#txttotsgst').val();
                ModelData["IGSTAmt"] = $('#txttotigst').val();
                ModelData["CGSTRate"] = $('#addCGSTRate').val();
                ModelData["IGSTRate"] = $('#addIGSTRate').val();
                ModelData["SGSTRate"] = $('#addSGSTRate').val();
            }
            if ($('#addTDSFlag').is(":checked")) {
                ModelData["TDSFlag"] = $('#addTDSFlag').is(":checked");
                ModelData["TDSCode"] = $("#addTDSCode").val();
                ModelData["TDSRate"] = $("#addTDSRate").val();
                ModelData["TDSAmt"] = $('#TDSAmt').val();
            }


            var DTO = { Model: ModelData };
            var url = '@Url.Action("AddEditSelectedAdvance")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforesend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $('.spinner').hide();
                    $('#ErrorMessage1').hide();
                    $('#addcashbank').modal('hide');
                    $('#divLedgerTable').html(data.Html);
                    $('#NetAmt').val(data.SumAmt);

                    $('#addTDSAmt').val(data.TdsAmt);
                    $('#TDSAmt').val(data.TdsAmt);

                    $('#addIGSTAmt').val(data.IGST);
                    $('#txttotigst').val(data.IGST);

                    $('#addCGSTAmt').val(data.CGST);
                    $('#txttotcgst').val(data.CGST);

                    $('#addSGSTAmt').val(data.SGST);
                    $('#txttotsgst').val(data.SGST);

                    $('#txtinvamt').val(data.InvAmt);


                },
                error: function () {
                    $('.spinner').hide();
                    alert("error occured while processing your request.");
                }
            });
        });

        $('#pushrecord').click(function (event) {
            event.preventDefault();
              var mChargeList = [];

              $('#addlchargesgrid tbody tr').each(function () {
                  var tds = $(this).find('td');
                  var chgs = {
                      Header: tds.eq(0).text(),
                      AddLess: tds.eq(1).text(),
                      Amt: tds.find("input[class='txtfvalue']").val(),
                      PostCode: tds.eq(3).text(),
                      Fld: tds.eq(4).text()
                  }
                  mChargeList.push(chgs);
              });
            var ModelData = {};
            ModelData["Code"] = $('#addFMNo').val();
            ModelData["AdvType"] = $('#addAdvType').val();
            ModelData["ChargesList"] = mChargeList;
            ModelData["Remark"] = $('#addRemark').val();
            ModelData["RefTableKey"] = $('#hdnpopupRefTableKey').val();
            var DTO = { Model: ModelData };
            var url = '@Url.Action("PushPickupChargeList")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
               },
                success: function (data) {
                    $('#ErrorMessage').hide();
                    $('#addcashbank').modal('hide');
                    var abcCount = parseInt($('#hdnuCount').val());
                    var narrCount =parseInt(16) + parseInt($('#hdnuCount').val());
                    var mARRAY = Array.from(data.ChargesListSelect);

                    $('#tabledatapick tr:not(:first)').each(function () {
                        var tds = $(this).find('td');
                        if (tds.find("input[class='rolemaster_AccessType']").is(':checked')) {
                            if (tds.eq(12).text() == data.RefTableKey) {
                                if (parseFloat(tds.eq(10).text()) < parseFloat($('#addAmt').val())) {
                                    $('#addcashbank').modal('show');
                                    alert('Entered Amount greater than Pending Amount Cant Save..')
                                    return;
                                }
                                else {
                                    tds.eq(11).html($('#addAmt').val())
                                }
                                for (i = 0; i < abcCount; i++) {
                                    var ai = 16;
                                    ai = ai + i;
                                    tds.eq(ai).find('input[class="enttxtcls"]').val(mARRAY[i]);
                                }
                                tds.find('input[class="remrkcls"]').val(data.Remark);



                            }
                        }
                    })

                    $('.spinner').hide();
                },
                error: function () {
                    $('.spinner').hide();
                    alert("error occured while processing your request.");
                }
            });
        });
    });


    function loadBranchList() {
        var url = '@Url.Action("GetBranchList")'
        $.ajax({
            type: "GET",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#addBranch").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('#addBranch').val('@Model.Branch').attr("selected", "selected");
                $('.spinner').hide();
            },

            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };

    function loadAdvanceTypeList() {
        var url = '@Url.Action("GetAdvanceTypeList")'
        $.ajax({
            type: "GET",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#addAdvType").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('#addAdvType').val('@Model.AdvType').attr("selected", "selected");
                $('.spinner').hide();
            },

            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };



</script>

@Html.HiddenFor(x => x.RefTableKey, new { @id = "hdnpopupRefTableKey", @name = "hdnpopupRefTableKey" })
<input type="hidden" id="hdnChargeAmt" />
@Html.HiddenFor(x => x.Amt, new { @id = "hdnChargeAmt" })