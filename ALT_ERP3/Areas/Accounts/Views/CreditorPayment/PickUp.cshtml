@model ALT_ERP3.Areas.Accounts.Models.CreditorPaymentVM
@using Common;
<script>
    $(document).ready(function () {

        //if ($('#hdnSessionFlag').val() == "Add") {
        $('#AdjAgaintsInvoices').html('Adj.Against Invoice: 0:00');
        $('#OnAccount').html('On Account: 0:00');

        var mselectAmt = 0;

        	  
$("#tabledatapick tbody").on('click', '.rolemaster_AccessType', function () {

            var AcAmt = parseFloat($("#PickAccAmt").val());
            var AdjAmt = parseFloat($("#PickAdjustedAmt").val());
            var BalAmt = parseFloat($("#PickUnAdjustedAmt").val());

    var currentRow = $(this).closest("tr");
    var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
            var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
			var TotalTdsAmt = 0;
             debugger;					 
            if (checkbool == true) {
                if (BalAmt > 0) {
                    currentRow.find('td').find("input[class='enttxtcls']").prop("disabled", false);
                    currentRow.find('td').find("input[class='txtfvalue']").prop("disabled", false);
                    currentRow.find('td').find("input[class='txtftdsvalue']").prop("disabled", false);
                    var CurrBal = parseFloat(currentRow.find("td:eq(11)").text());
					
                    var TdsFlag = $('#addTDSFlag').is(":checked");
                    var TdsBillFlag = $("#hdnTDSBillWiseCut").val();
                    var TdsRound = parseInt($("#hdnRoundOff").val());
                    var TdsRate = (parseFloat($("#addTDSRate").val()));
                    var TdsAmt = 0;
                    if (CurrBal >= BalAmt) {
                        var TdsAmt = 0;
                        if (TdsFlag == true && TdsBillFlag == "True") {
						 
                            debugger;


                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * BalAmt) / 100).toFixed(TdsRound);
                            } else {
                                TdsAmt = Math.round(((TdsRate * BalAmt) / 100));
                            }


                            currentRow.find('td').find("input[class='txtftdsvalue']").val(TdsAmt);

                            BalAmt -= TdsAmt;
                            TotalTdsAmt += TdsAmt;

                            BalAmt = BalAmt.toFixed(2);


                            currentRow.find('td').find("input[class='txtfvalue']").val(BalAmt);//AdjustAmount

                            currentRow.find("td:eq(10)").text(parseFloat(BalAmt) + parseFloat(TdsAmt));//Total Adjust
                            currentRow.find("td:eq(11)").text(parseFloat(CurrBal) - (parseFloat(BalAmt) + parseFloat(TdsAmt)));//Bal Amount

                        }
                        else {
						 
                            currentRow.find('td').find("input[class='txtfvalue']").val(parseFloat(BalAmt));//AdjustAmount
                            currentRow.find("td:eq(10)").text(parseFloat(BalAmt));//Total Adjust
                            currentRow.find("td:eq(11)").text(parseFloat(CurrBal) - parseFloat(BalAmt));//Bal Amount
                        }

										   
                    }
                    else {
                        if (TdsFlag == true && TdsBillFlag == "True") {

																	 
						 
                            //TdsAmt = Math.round(((TdsRate * CurrBal) / 100), TdsRound);

                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * CurrBal) / 100).toFixed(TdsRound);
                            } else {
                                TdsAmt = Math.round(((TdsRate * CurrBal) / 100));
                            }


                            currentRow.find('td').find("input[class='txtftdsvalue']").val(TdsAmt);

                            CurrBal -= TdsAmt;
                            TotalTdsAmt += TdsAmt;
                            CurrBal = CurrBal.toFixed(2);

                            currentRow.find('td').find("input[class='txtfvalue']").val(parseFloat(CurrBal));//AdjustAmount
                            currentRow.find("td:eq(10)").text(parseFloat(CurrBal) + parseFloat(TdsAmt));//Total Adjust
                            currentRow.find("td:eq(11)").text(parseFloat(CurrBal) - parseFloat(CurrBal));//Bal Amount
                        }
                        else {
						 
                            currentRow.find('td').find("input[class='txtfvalue']").val(parseFloat(CurrBal));//AdjustAmount
                            currentRow.find("td:eq(10)").text(parseFloat(CurrBal));//Total Adjust
                            currentRow.find("td:eq(11)").text(parseFloat(CurrBal) - parseFloat(CurrBal));//Bal Amount
                        }
											
											
                    }
                }
                else {
				 
                    currentRow.find('td').find('input[type="checkbox"]').prop("checked", true);
                    currentRow.find('td').find("input[class='enttxtcls']").prop("disabled", false);
                    currentRow.find('td').find("input[class='txtfvalue']").prop("disabled", false);
                    currentRow.find('td').find("input[class='txtftdsvalue']").prop("disabled", false);
																								   
                }

            }
            else {
																									 
																									 
                currentRow.find("input[class='txtfvalue']").val(parseFloat(0));
                currentRow.find("input[class='txtftdsvalue']").val(parseFloat(0));
                currentRow.find('td').eq(10).html(parseFloat(0));
                currentRow.find('td').eq(11).html(parseFloat(currentRow.find("td:eq(9)").text()));
                currentRow.find('td').find("input[class='enttxtcls']").prop("disabled", true);
                currentRow.find('td').find("input[class='txtfvalue']").prop("disabled", true);
                currentRow.find('td').find("input[class='txtftdsvalue']").prop("disabled", true);
                currentRow.find('td').find("input[class='enttxtcls']").val(0);
            }

            debugger;
            var Adjust = 0, TotalAdjust = 0,tottdsAmt=0;

            $('#tabledatapick tbody tr').each(function () {
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true) {
                    Adjust += parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
					tottdsAmt += parseFloat(currentRow.find('td').find("input[class='txtftdsvalue']").val());																						 
                    TotalAdjust += parseFloat(currentRow.find("td:eq(10)").text());
                }
            });

			var Charges = NoofCharges;
            var charges = [];
            for (var i = 0; i < Charges; i++) {
                charges.push(0);
            }										
			
			$('#tabledatapick tbody tr').each(function () {
                
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    var j = 20;
                    for (var i = 0; i < Charges; i++) {
                        charges[i] += parseFloat(currentRow.find("td:eq(" + j + ") input[type='number']").val());
                        ++j;
                    }
                }
            });

            for (var i = 1; i <= charges; i++) {
                
                $("#Charges" + i + "").html(parseFloat(charges[i - 1]));
            }

    $('#lblSelectAmount').html(parseFloat(Adjust.toFixed(2)));
    $('#lblTotalTDSAmount').html(parseFloat(tottdsAmt.toFixed(2)));
    $('#lblTotalAdjAmount').html(parseFloat(TotalAdjust.toFixed(2)));
    $("#PickAdjustedAmt").val(parseFloat(Adjust.toFixed(2)));
    $("#PickUnAdjustedAmt").val((AcAmt.toFixed(2) - Adjust.toFixed(2)).toFixed(2));

							   

            var check = $('#tabledatapick').find("input[class='rolemaster_AccessType']:checked").length;
            $('#lblSelectTotal').html(check);


        });

         $("#tabledatapick tbody").on('focusout', '.txtftdsvalue', function () {
            

            var FLD = "TDS";
            var Id = "-";
            debugger;

            var AcAmt = parseFloat($("#PickAccAmt").val());
            var BalAmt = parseFloat($("#PickUnAdjustedAmt").val());

            var currentRow = $(this).closest("tr");

            var CurrentAdj = parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
            var CurrTotalAdjustment = parseFloat(currentRow.find("td:eq(10)").text());
            var CurrBalance = parseFloat(currentRow.find("td:eq(11)").text());
            var TotalBalAmtOfBill = parseFloat(currentRow.find("td:eq(9)").text());
            var mk = 20;

            var ExtentUpto = 0;
            if (BalAmt >= CurrBalance) {
                ExtentUpto = CurrBalance;
            }
            else
            {
                ExtentUpto = BalAmt;
            }
             var DecimalAmt = 0;
            var GetNoOfChargesCount = currentRow.find('td').find("input[class='enttxtcls']").length;
            var J = 20, OtherChargesAmt = 0;
            for (var i = 0; i < GetNoOfChargesCount; i++)
            {
                var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("alt");
                var FLd = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                if (Equation != FLD && FLd == "-") {
                    OtherChargesAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                }
                ++J;
            }
            J = 20;
            for (var i = 0; i < GetNoOfChargesCount; i++)
            {
                var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("alt");
                var Fld = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                if (Fld=="-")
                {
                    
                    var PreviousAmt = CurrTotalAdjustment - (CurrentAdj + OtherChargesAmt);
                    var CurrentChargeAmt = parseFloat(currentRow.find("td").find("input[class='txtftdsvalue']").val());
                    var AdjustUpto = PreviousAmt + CurrBalance;
                    if (BalAmt > 0)
                    {
                        if (CurrBalance > 0)
                        {
                            if (PreviousAmt != CurrentChargeAmt) {
                                if (CurrentChargeAmt >= AdjustUpto) {
                                    DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                    currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                                else {
                                    DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                    currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                            }
                        }
                        else
                        {
                            if (PreviousAmt != CurrentChargeAmt) {
                                if (CurrentChargeAmt >= AdjustUpto) {
                                    DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                    currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                                else {
                                    DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                    currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (PreviousAmt != CurrentChargeAmt)
                        {
                            if (CurrentChargeAmt >= AdjustUpto)
                            {
                                DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                currentRow.find("td:eq(10)").text(DecimalAmt);
                                DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                currentRow.find("td:eq(11)").text(DecimalAmt);
                            }
                            else
                            {
                                DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                currentRow.find("td").find("input[class='txtftdsvalue']").val(DecimalAmt);
                                DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                currentRow.find("td:eq(10)").text(DecimalAmt);
                                DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                currentRow.find("td:eq(11)").text(DecimalAmt);
                            }
                        }
                    }
                }
                
            }

            var Adjust = 0, TotalAdjust = 0, CharegesAmt=0,tdsamt=0;
            $('#tabledatapick tbody tr').each(function ()
            {
                
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    Adjust += parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
                    tdsamt += parseFloat(currentRow.find('td').find("input[class='txtftdsvalue']").val());
                    TotalAdjust += parseFloat(currentRow.find("td:eq(10)").text());
                    var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
                    var J = 20;
                    for (var i = 0; i < NoofCharges; i++) {
                        var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                        if (Equation != "+" && Equation != "-") {
                            CharegesAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                        }
                        ++J;
                    }
                }
            });

            debugger;
            var Charges =GetNoOfChargesCount;
            var charges = [];
            for (var i = 0; i < 10; i++) {
                charges.push(0);
            }

            $('#tabledatapick tbody tr').each(function () {
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    var j = 20;
                    for (var i = 0; i < Charges; i++) {
                        charges[i] += parseFloat(currentRow.find("td:eq(" + j + ") input[type='number']").val());
                        ++j;
                    }
                }
            });

            $("#Charges1").html(parseFloat(charges[0]));
            $("#Charges2").html(parseFloat(charges[1]));
            $("#Charges3").html(parseFloat(charges[2]));
            $("#Charges4").html(parseFloat(charges[3]));
            $("#Charges5").html(parseFloat(charges[4]));
            $("#Charges6").html(parseFloat(charges[5]));
            $("#Charges7").html(parseFloat(charges[6]));
            $("#Charges8").html(parseFloat(charges[7]));
            $("#Charges9").html(parseFloat(charges[8]));
            $("#Charges10").html(parseFloat(charges[9]));

            $('#lblSelectAmount').html(parseFloat(Adjust));
            $('#lblTotalTDSAmount').html(parseFloat(tdsamt));
             $('#lblTotalAdjAmount').html(parseFloat(TotalAdjust));
             DecimalAmt = parseFloat(Adjust + CharegesAmt).toFixed(2);
             $("#PickAdjustedAmt").val(DecimalAmt);
             DecimalAmt = parseFloat(AcAmt - (Adjust + CharegesAmt)).toFixed(2);
             $("#PickUnAdjustedAmt").val(DecimalAmt);
        });
        $("#tabledatapick tbody").on('focusout', '.txtfvalue', function () {
            
            var AcAmt = parseFloat($("#PickAccAmt").val());
            var AdjAmt = parseFloat($("#PickAdjustedAmt").val());
            var BalAmt = parseFloat($("#PickUnAdjustedAmt").val());
           
            var currentRow = $(this).closest("tr");
            debugger;
            var CurrentAdj = parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
            var CurrentTDSAdj = parseFloat(currentRow.find('td').find("input[class='txtftdsvalue']").val());
            var CurrTotalAdjustment = parseFloat(currentRow.find("td:eq(10)").text());
            var CurrBalance = parseFloat(currentRow.find("td:eq(11)").text());
            var TotalBalAmtOfBill = parseFloat(currentRow.find("td:eq(9)").text());

            var MinusEqChargeAmt = 0, OtherChargeAmt = 0;
            var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
            var J = 20;
            for (var i = 0; i < NoofCharges; i++) {
                var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                if (Equation == "-") {
                    MinusEqChargeAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                }
                J++;
            }
            MinusEqChargeAmt += CurrentTDSAdj;
            var PreviousAdjustmentAmt = CurrTotalAdjustment - (MinusEqChargeAmt + OtherChargeAmt);
            var ExtendUptoAmt = 0;
            var AdjustUptoAmt = 0;

            if (CurrBalance >= BalAmt) {
                AdjustUptoAmt = BalAmt;
            }
            else {
                AdjustUptoAmt = CurrBalance;
            }
            ExtendUptoAmt = PreviousAdjustmentAmt + AdjustUptoAmt;

            var DecimalAmt = 0;
            if (BalAmt > 0)
            {
                if (CurrBalance > 0)
                {
                    if (CurrentAdj != PreviousAdjustmentAmt)
                    {
                        if (CurrentAdj > ExtendUptoAmt)
                        {
                            DecimalAmt = parseFloat(ExtendUptoAmt + MinusEqChargeAmt + OtherChargeAmt ).toFixed(2);
                            currentRow.find("td:eq(10)").text(DecimalAmt);
                            DecimalAmt = parseFloat(TotalBalAmtOfBill - (ExtendUptoAmt + MinusEqChargeAmt + OtherChargeAmt)).toFixed(2);
                            currentRow.find("td:eq(11)").text(DecimalAmt);
                            DecimalAmt = parseFloat(ExtendUptoAmt).toFixed(2);
                            currentRow.find("td").find("input[class='txtfvalue']").val(DecimalAmt);
                        }
                        else
                        {
                            DecimalAmt = parseFloat(CurrentAdj + MinusEqChargeAmt + OtherChargeAmt).toFixed(2);
                            currentRow.find("td:eq(10)").text(DecimalAmt);
                            DecimalAmt = parseFloat(TotalBalAmtOfBill - (CurrentAdj + MinusEqChargeAmt + OtherChargeAmt)).toFixed(2);
                            currentRow.find("td:eq(11)").text(DecimalAmt);
                        }
                    }
                }
                else
                {
                    if (CurrentAdj != PreviousAdjustmentAmt)
                    {
                        if (CurrentAdj > ExtendUptoAmt)
                        {
                            DecimalAmt = parseFloat(ExtendUptoAmt).toFixed(2);
                            currentRow.find('td').find("input[class='txtfvalue']").val(DecimalAmt);
                            alert("Not Allow To Adjust Because Account Amount Adjust Completely....!");
                        }
                        else
                        {
                            DecimalAmt = parseFloat(CurrentAdj + MinusEqChargeAmt + OtherChargeAmt).toFixed(2);
                            currentRow.find("td:eq(10)").text(DecimalAmt);
                            DecimalAmt = parseFloat(TotalBalAmtOfBill - (CurrentAdj + MinusEqChargeAmt + OtherChargeAmt)).toFixed(2);
                            currentRow.find("td:eq(11)").text(DecimalAmt);
                            //BalAmt += (PreviousAdjustmentAmt - CurrentAdj);
                            //AdjAmt -= (PreviousAdjustmentAmt - CurrentAdj);
                        }
                    }
                }
            }
            else
            {
                if (CurrentAdj != PreviousAdjustmentAmt)
                {
                    if (CurrentAdj > PreviousAdjustmentAmt)
                    {
                        DecimalAmt = parseFloat(PreviousAdjustmentAmt).toFixed(2);
                        currentRow.find('td').find("input[class='txtfvalue']").val(DecimalAmt);
                        alert("Not Allow To Adjust Because Account Amount Adjust Completely....!");
                    }
                    else
                    {
                        DecimalAmt = parseFloat(CurrTotalAdjustment - (PreviousAdjustmentAmt - CurrentAdj)).toFixed(2);
                        currentRow.find("td:eq(10)").text(DecimalAmt);
                        DecimalAmt = parseFloat(CurrBalance + (PreviousAdjustmentAmt - CurrentAdj)).toFixed(2);
                        currentRow.find("td:eq(11)").text(DecimalAmt);
                        //BalAmt += (PreviousAdjustmentAmt - CurrentAdj);
                        //AdjAmt -= (PreviousAdjustmentAmt - CurrentAdj);
                    }
                }
            }


            var Adjust = 0, TotalAdjust = 0,CharegesAmt=0;
            $('#tabledatapick tbody tr').each(function () {
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true) {
                    Adjust += parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
                    TotalAdjust += parseFloat(currentRow.find("td:eq(10)").text());
                    var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
                    var J = 20;
                    for (var i = 0; i < NoofCharges; i++) {
                        var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                        if (Equation != "+" && Equation != "-") {
                            CharegesAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                        }
                        J++;
                    }
                }
            });

            
            var Charges = NoofCharges;
            var charges = [];
            for (var i = 0; i < Charges; i++) {
                charges.push(0);
            }

            $('#tabledatapick tbody tr').each(function () {
                
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    var j = 20;
                    for (var i = 0; i < Charges; i++) {
                        charges[i] += parseFloat(currentRow.find("td:eq(" + j + ") input[type='number']").val());
                        ++j;
                    }
                }
            });

            for (var i = 1; i <= charges; i++) {
                
                $("#Charges" + i + "").html(parseFloat(charges[i - 1]));
            }

            $('#lblSelectAmount').html(parseFloat(Adjust));
            $('#lblTotalAdjAmount').html(parseFloat(TotalAdjust));
            DecimalAmt = parseFloat(Adjust + CharegesAmt).toFixed(2);
            $("#PickAdjustedAmt").val(DecimalAmt);
            DecimalAmt = parseFloat(AcAmt - (Adjust + CharegesAmt)).toFixed(2);
            $("#PickUnAdjustedAmt").val(DecimalAmt);
        });

        $("#tabledatapick tbody").on('focusout', '.enttxtcls', function () {
            

            var FLD = this.attributes.alt.value;
            var Id = this.Id;


            var AcAmt = parseFloat($("#PickAccAmt").val());
            var BalAmt = parseFloat($("#PickUnAdjustedAmt").val());

            var currentRow = $(this).closest("tr");

            var CurrentAdj = parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
            var CurrTotalAdjustment = parseFloat(currentRow.find("td:eq(10)").text());
            var CurrBalance = parseFloat(currentRow.find("td:eq(11)").text());
            var TotalBalAmtOfBill = parseFloat(currentRow.find("td:eq(9)").text());
            var mk = 20;
            var CurrentTDSAdj = parseFloat(currentRow.find('td').find("input[class='txtftdsvalue']").val());

            var ExtentUpto = 0;
            if (BalAmt >= CurrBalance) {
                ExtentUpto = CurrBalance;
            }
            else
            {
                ExtentUpto = BalAmt;
            }
            var DecimalAmt = 0;


            var GetNoOfChargesCount = currentRow.find('td').find("input[class='enttxtcls']").length;
            var J = 20, OtherChargesAmt = 0;
            for (var i = 0; i < GetNoOfChargesCount; i++)
            {
                var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("alt");
                var FLd = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                if (Equation != FLD && FLd == "-") {
                    OtherChargesAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                }
                ++J;
            }
            OtherChargesAmt += CurrentTDSAdj;
            J = 20;
            for (var i = 0; i < GetNoOfChargesCount; i++)
            {
                var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("alt");
                var Fld = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                if (Equation == FLD && Fld=="-")
                {
                    
                    var PreviousAmt = CurrTotalAdjustment - (CurrentAdj + OtherChargesAmt);
                    var CurrentChargeAmt = parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                    var AdjustUpto = PreviousAmt + CurrBalance;
                    if (BalAmt > 0)
                    {
                        if (CurrBalance > 0)
                        {
                            if (PreviousAmt != CurrentChargeAmt) {
                                if (CurrentChargeAmt >= AdjustUpto)
                                {
                                    DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                    currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                                else {
                                    DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                    currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                            }
                        }
                        else
                        {
                            if (PreviousAmt != CurrentChargeAmt) {
                                if (CurrentChargeAmt >= AdjustUpto) {
                                    DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                    currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                                else {
                                    DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                    currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                    DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                    currentRow.find("td:eq(10)").text(DecimalAmt);
                                    DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                    currentRow.find("td:eq(11)").text(DecimalAmt);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (PreviousAmt != CurrentChargeAmt)
                        {
                            if (CurrentChargeAmt >= AdjustUpto)
                            {
                                DecimalAmt = parseFloat(AdjustUpto).toFixed(2);
                                currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                DecimalAmt = parseFloat(AdjustUpto + CurrentAdj + OtherChargesAmt).toFixed(2);
                                currentRow.find("td:eq(10)").text(DecimalAmt);
                                DecimalAmt = parseFloat((TotalBalAmtOfBill - (AdjustUpto + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                currentRow.find("td:eq(11)").text(DecimalAmt);
                            }
                            else
                            {
                                DecimalAmt = parseFloat(CurrentChargeAmt).toFixed(2);
                                currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(DecimalAmt);
                                DecimalAmt = parseFloat(CurrentChargeAmt + CurrentAdj + OtherChargesAmt).toFixed(2);
                                currentRow.find("td:eq(10)").text(DecimalAmt);
                                DecimalAmt = parseFloat((TotalBalAmtOfBill - (CurrentChargeAmt + CurrentAdj + OtherChargesAmt))).toFixed(2);
                                currentRow.find("td:eq(11)").text(DecimalAmt);
                            }
                        }
                    }
                }
                else if (Equation == FLD && Fld != "+")
                {
                    
                    var skipSrno = (currentRow.find("td:eq(1)").text());
                    var CurrentChargeAmt = parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                    var CharegesAmt = 0; 
                    
                    var TotAmt = 0;
                    $('#tabledatapick tbody tr').each(function () {
                        var currentRow = $(this).closest("tr");
                        var Srno = (currentRow.find("td:eq(1)").text());
                        var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                        if (checkbool == true)
                        {
                            
                            TotAmt += parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
                            if (Srno != skipSrno)
                            {
                                var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
                                var kl = 20;
                                for (var i = 0; i < NoofCharges; i++) {
                                    var Equation = currentRow.find("td:eq(" + kl + ")").find("input[class='enttxtcls']").attr("id");
                                    if (Equation != "+" && Equation != "-") {
                                        CharegesAmt += parseFloat(currentRow.find("td:eq(" + kl + ")").find("input[class='enttxtcls']").val());
                                    }
                                    ++kl;
                                }
                            }
                            
                        }
                    });
                    
                    var ApplicabaleAmt = AcAmt - (TotAmt + CharegesAmt);
                    if (CurrentChargeAmt >= ApplicabaleAmt)
                    {
                        currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(ApplicabaleAmt);
                    }
                    else
                    {
                        currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val(CurrentChargeAmt);
                    }

                }
                ++J;
            }

            var Adjust = 0, TotalAdjust = 0, CharegesAmt=0;
            $('#tabledatapick tbody tr').each(function ()
            {
                
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    Adjust += parseFloat(currentRow.find('td').find("input[class='txtfvalue']").val());
                    TotalAdjust += parseFloat(currentRow.find("td:eq(10)").text());
                    var NoofCharges = currentRow.find('td').find("input[class='enttxtcls']").length;
                    var J = 20;
                    for (var i = 0; i < NoofCharges; i++) {
                        var Equation = currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").attr("id");
                        if (Equation != "+" && Equation != "-") {
                            CharegesAmt += parseFloat(currentRow.find("td:eq(" + J + ")").find("input[class='enttxtcls']").val());
                        }
                        ++J;
                    }
                }
            });

            
            var Charges =GetNoOfChargesCount;
            var charges = [];
            for (var i = 0; i < 10; i++) {
                charges.push(0);
            }

            $('#tabledatapick tbody tr').each(function () {
                var currentRow = $(this).closest("tr");
                var checkbool = currentRow.find('td').find('input[type="checkbox"]').is(':checked');
                if (checkbool == true)
                {
                    var j = 20;
                    for (var i = 0; i < Charges; i++) {
                        charges[i] += parseFloat(currentRow.find("td:eq(" + j + ") input[type='number']").val());
                        ++j;
                    }
                }
            });

            $("#Charges1").html(parseFloat(charges[0]));
            $("#Charges2").html(parseFloat(charges[1]));
            $("#Charges3").html(parseFloat(charges[2]));
            $("#Charges4").html(parseFloat(charges[3]));
            $("#Charges5").html(parseFloat(charges[4]));
            $("#Charges6").html(parseFloat(charges[5]));
            $("#Charges7").html(parseFloat(charges[6]));
            $("#Charges8").html(parseFloat(charges[7]));
            $("#Charges9").html(parseFloat(charges[8]));
            $("#Charges10").html(parseFloat(charges[9]));

            $('#lblSelectAmount').html(parseFloat(Adjust));
            $('#lblTotalAdjAmount').html(parseFloat(TotalAdjust));
            DecimalAmt = parseFloat(Adjust + CharegesAmt).toFixed(2);
            $("#PickAdjustedAmt").val(DecimalAmt);
            DecimalAmt = parseFloat(AcAmt - (Adjust + CharegesAmt)).toFixed(2);
            $("#PickUnAdjustedAmt").val(DecimalAmt);
        });

        $('#RefAddClear').click(function () {
            $('#tabledatapick tbody tr').each(function () {
                var tds = $(this).find('td');
                tds.find('input[type="checkbox"]').prop("checked", false);
                $('#TxtA_' + tds.eq(1).text() + '').val(0);
            })
            $('#AdjAgaintsInvoices').html('Adj.Against Invoice: 0:00');
            $('#OnAccount').html('On Account: 0:00');
        });

    });

    function CheckAdjAgaintsInvoices() {
        var adjsum1 = 0;
        $('#tabledatapick tbody tr').each(function () {
            var tds1 = $(this).find('td');
            //if (tds1.find('input[type="checkbox"]').is(':checked')) {
            var abc1 = $('#TxtA_' + tds1.eq(1).text() + '').val();
            adjsum1 += (parseFloat(abc1));
        });

        $('#AdjAgaintsInvoices').html('Adj.Against Invoice:' + adjsum1.toFixed(2));
    }

    function CheckOnAccount() {
        var adjsum2 = 0;
        var TopAmount1 = parseFloat(0);
        var TotalAmt = 0;
        $('#tabledatapick tbody tr').each(function () {
            var tds2 = $(this).find('td');
            //if (tds2.find('input[type="checkbox"]').is(':checked')) {
            var abc2 = $('#TxtA_' + tds2.eq(1).text() + '').val();
            adjsum2 += (parseFloat(abc2));
            if (TopAmount1 == 0) {
                TotalAmt = 0;
            }
            else {
                TotalAmt = TopAmount1 - adjsum2;
            }
        });
        $('#OnAccount').html('On Account:' + (parseFloat(TotalAmt)).toFixed(2));
    }


</script>

<div class="modal-body">
    <div class="modal-content">
        <div class="modal-header" style="background-color:#cccccc;padding:7px;font-weight:bolder;">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"></span></button>
            <h4 class="modal-title">Pick from Source Document</h4>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <div class="col-sm-1 control-label" style="width:6%">Filter By:</div>
                <div class="col-sm-3" style="display:flex;">
                    <input type="radio" class="form-control" name="filBranch" id="AllBranch" value="AllBranch" style="height:20px;width:35px;" /><label class=" bold control-label" style="font-size: 14px;"> All Branch</label>

                    <input type="radio" class="form-control" name="filBranch" id="CurrentBranch" value="CurrentBranch" style="height:20px;width:35px;" /><label class=" bold control-label" style="font-size: 14px;"> Current Branch</label>
                </div>


                <label class="col-sm-1 control-label" style="width:auto;">Search</label>

                <div class="col-sm-2">
                    <input type="text" id="SearchPickup" class="form-control" placeholder="Search Here" />
                </div>


                <label class="col-sm-1 control-label" style="width:auto;">Total Amt</label>
                <div class="col-sm-1">
                    @Html.TextBoxFor(x => x.AccAmt, new { @class = "form-control", @id = "PickAccAmt", @Name = "PickAccAmt", @Value = Model.AccAmt, @disabled = "disabled" })
                </div>

                <label class="col-sm-1 control-label" style="width:auto;">Adjust Amt</label>
                <div class="col-sm-1">
                    @Html.TextBoxFor(x => x.AdjustedAmt, new { @class = "form-control", @id = "PickAdjustedAmt", @Name = "PickAdjustedAmt", @disabled = "disabled" })
                </div>

                <label class="col-sm-1 control-label" style="width:auto;">UnAdjust Amt</label>
                <div class="col-sm-1">
                    @Html.TextBoxFor(x => x.UnAdjustedAmt, new { @class = "form-control", @id = "PickUnAdjustedAmt", @Name = "PickUnAdjustedAmt", @Value = Model.UnAdjustedAmt, @disabled = "disabled" })
                </div>

            </div>

            <div class="fixPickupTableHead" id="PickTable" style="max-height:450px; min-height:450px;width:100%; overflow: scroll;">

                <table id="tabledatapick" class="zui-table">
                    <thead>
                        <tr role="row">
                            <th style="width:1%"><input id="AllxCess" name="AllxCess" style="width:16px;height:16px;" type="checkbox"></th>
                            <th style="vertical-align:inherit;width:1%;">Sr.</th>
                            <th style="vertical-align:inherit;width:5%;">Type</th>
                            <th style="vertical-align:inherit;width:0%;" hidden="hidden">Prefix</th>
                            <th style="vertical-align:inherit;width:5%;">Serial</th>

                            <th style="vertical-align:inherit;width:7%;">Bill No</th>
                            <th style="vertical-align:inherit;width:7%;">Date</th>
                            <th style="vertical-align:inherit;width:5%;">Branch</th>
                            <th style="vertical-align:inherit;width:7%;">Bill Amt</th>
                            <th style="vertical-align:inherit;width:7%;">Total Balance</th>
                            <th style="vertical-align:inherit;width:7%;">Total Adjustment</th>
                            <th style="vertical-align:inherit;width:7%;">Current Balance</th>
                            <th style="vertical-align:inherit;width:5%;">Adjustment</th>
                            <th style="vertical-align:inherit;width:5%;">Tds Amt</th>

                            @if (Model.HeaderList != null)
                            {
                                foreach (var a in @Model.HeaderList)
                                {
                                    <th style="width:10%">@a</th>
                                }
                            }
                            <th style="width:5%">Narr</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.PickupList != null)
                        {
                            foreach (var item in @Model.PickupList.ToList())
                            {
                                if (item != null)
                                {
                                    <tr class="clstr" style="font-family:Tahoma;font-size:9pt;border: solid 1px lightgray;">
                                        <td><input type="checkbox" class='rolemaster_AccessType' atr="@item.RecordKey" value="@item.tempid" /></td>
                                        <td style="vertical-align:inherit;width:1%;">@item.tempid</td>
                                        <td style="vertical-align:inherit;width:5%;">@item.Type</td>
                                        <td style="vertical-align:inherit;width:0%;" hidden="hidden">@item.Prefix</td>
                                        <td style="vertical-align:inherit;width:5%;">@item.Srl</td>

                                        <td style="vertical-align:inherit;width:7%;">@item.BillNumber</td>
                                        <td style="vertical-align:inherit;width:7%;">@item.StrBillDate</td>
                                        <td style="vertical-align:inherit;width:5%;">@item.BranchName</td>
                                        <td style="text-align:right;vertical-align:inherit;width:7%;">@item.BillAmt.ToString("F2")</td>
                                        <td style="text-align:right;vertical-align:inherit;width:7%;">@item.BalAmt.ToString("F2")</td>
                                        <td style="vertical-align:inherit;width:7%;">@item.AdjustAmt.ToString("F2")</td>
                                        <td style="vertical-align:inherit;width:7%;">@item.BalAmt.ToString("F2")</td>
                                        <td contenteditable="true" class="sum" style="text-align:right;vertical-align:inherit;width:5%;"><input type="text" id="TxtA_@item.tempid" alt="@item.tempid" class="txtfvalue" disabled="disabled" style="text-align:right;width:100px;" value="@item.AdjustAmt.ToString("F2")" /></td>
                                        <td contenteditable="true" class="sum" style="text-align:right;vertical-align:inherit;width:5%;"><input type="text" id="TxtA_@item.tempid" alt="@item.tempid" class="txtftdsvalue" disabled="disabled" style="text-align:right;width:100px;" value="@item.BillTDS.ToString("F2")" /></td>

                                        <td style="vertical-align:inherit;" hidden="hidden">@item.ParentKey</td>
                                        <td style="vertical-align:inherit;" hidden="hidden">@item.TableKey</td>
                                        <td style="vertical-align:inherit;" hidden="hidden">@item.MainType</td>
                                        <td style="vertical-align:inherit;" hidden="hidden">@item.SubType</td>
                                        <td style="vertical-align:inherit;" hidden="hidden">@item.Branch</td>
                                        <td style="vertical-align:inherit;" hidden="hidden">@item.Sno</td>
                                        @if (item.ChgPickupList != null)
                                        {
                                            for (int i = 0; i < item.ChgPickupList.Count; i++)
                                            {
                                                <td class="txtentercls" style="width:10%"><input type="number" disabled="disabled" id="@Model.EquationList[i]" alt="@Model.FldList[i]" class="enttxtcls" style="width:100%" value="0" /></td>
                                            }
                                        }
                                        <td style="width:5%"><input style="width:130px;" type="text" class="remrkcls" maxlength="50" value="@item.Remark" /></td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr style="font-family:Tahoma;font-size:9pt;border:solid 1px lightgray;background-color:seashell">
                            <td><label id="lblSelectTotal" style="font-weight: bold;color: red;">0</label></td>
                            <td></td>

                            <td></td>
                            <td hidden="hidden"></td>




                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td><label id="lbltotalBalAmount" style="font-weight:bold;color: red;">0</label></td>
                            <td><label id="lblTotalAdjAmount" style="font-weight:bold;color: red;">0</label></td>
                            <td></td>
                            <td><label id="lblSelectAmount" style="font-weight:bold;color: red;">0</label></td>
                            <td><label id="lblTotalTDSAmount" style="font-weight:bold;color: red;">0</label></td>

                            <td hidden="hidden"></td>
                            <td hidden="hidden"></td>
                            <td hidden="hidden"></td>
                            <td hidden="hidden"></td>
                            <td hidden="hidden"></td>
                            <td hidden="hidden"></td>
                            @if (Model.HeaderList != null)
                            {
                                for (int i = 1; i <= @Model.HeaderList.Count; i++)
                                {

                                    <td style="padding-left: 15px;font-weight: bold;color: red;">
                                        0
                                    </td>
                                }


                            }
                            <td></td>
                        </tr>
                    </tfoot>
                </table>


            </div>
        </div>
        <div class="modal-footer" style="background-color:#cccccc;">


            <button type="button" class="btn btn-success" id="pickrecord">Accept Data</button>
            <button type="button" class="btn btn-danger" data-dismiss="modal">Discard</button>
        </div>
    </div>
</div>
@Html.HiddenFor(x => x.TotalQty, new { @id = "hdnuCount" })
<script src="@Url.Content("~/Content/js/jquery.constrain.js")" type="text/javascript"></script>
<script>
    $(document).ready(function () {

        var BalAmtD = 0;
        $('#tabledatapick tbody tr').each(function () {
            var tds = $(this).find('td');
            BalAmtD += parseFloat(tds.eq(8).text());

        });
        debugger;
        $('#lbltotalBalAmount').html(BalAmtD);


        $("#AllBranch").attr("checked", true);
        if ('@Model.OthPostType' != 'D') {
            $('.othtypecls').hide();
        }

        if ('@Model.FilBranch' == 'Current') {
            $("#CurrentBranch").attr("checked", true);
        }
        if ('@Model.FilBranch' == 'All') {
            $("#AllBranch").attr("checked", true);
        }

        $('#CurrentBranch').click(function (event) {
            event.preventDefault();

            var ModelData = {};


            ModelData["SubType"] = $("#hdnSType").val();
            ModelData["MainType"] = $("#hdnMType").val();

            ModelData["Type"] = $("#hdnType").val();

            ModelData["Account"] = $("#Account").val();

            if (($("#CurrentBranch").is(":checked") == true)) {
                ModelData["FilBranch"] = "Current"
            }
            else {
                ModelData["FilBranch"] = "All";
            }

            var DTO = { Model: ModelData };
            var url = '@Url.Action("GetPickUp")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    $('#PickUpList').html(data.Html);


                },
                error: function () {
                    alert("Error occured while processing your request.");
                }
            });
        });

        $('#AllBranch').click(function (event) {
            event.preventDefault();

            var ModelData = {};


            ModelData["SubType"] = $("#hdnSType").val();
            ModelData["MainType"] = $("#hdnMType").val();

            ModelData["Type"] = $("#hdnType").val();

            ModelData["Account"] = $("#Account").val();

            if (($("#CurrentBranch").is(":checked") == true)) {
                ModelData["FilBranch"] = "Current"
            }
            else {
                ModelData["FilBranch"] = "All";
            }

            var DTO = { Model: ModelData };
            var url = '@Url.Action("GetPickUp")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    $('#PickUpList').html(data.Html);


                },
                error: function () {
                    alert("Error occured while processing your request.");
                }
            });
        });

        $('#SearchPickup').keyup(function () {
            var value = $(this).val();
            if (value != "") {
                $('#tabledatapick td').removeClass('SearchRow');

                $('#tabledatapick > tbody > tr > td ').each(function () {
                    if ($(this).text().toLowerCase().indexOf(value.toLowerCase()) >= 0) {
                        var dd = $(this).text().toLowerCase();
                        $(this).addClass("SearchRow");
                    }
                    else {
                        $(this).removeClass("SearchRow");
                    }
                });
            }
            else {
                $('#tabledatapick td').removeClass('SearchRow');
            }
        });

        $('#AllxCess').click(function () {
            var xcess = $('#AllxCess').is(':checked');
            if (xcess == true) {
                $('#tabledatapick tbody tr').each(function () {
                    var tds = $(this).find('td');
                    tds.find("input[class='rolemaster_AccessType']").prop("checked", true);
                    tds.find("input[class='enttxtcls']").prop("disabled", false);
                    if (tds.find("input[class='rolemaster_AccessType']").is(':checked')) {
                        var mtempid = tds.eq(1).text();
                        var mpendi = parseFloat(tds.eq(9).text());
                        $('#TxtA_' + mtempid + '').val(mpendi.toFixed(2));
                        var mpending = parseFloat($('#TxtA_' + mtempid + '').val());
                        tds.eq(11).html(mpending.toFixed(2));
                        tds.eq(12).html('0');

                    }
                    else {
                        tds.eq(11).html('');
                        tds.eq(12).html('0');
                    }
                })
            }
            else {
                $('#tabledatapick tbody tr').each(function () {
                    var tds = $(this).find('td');
                    tds.find("input[class='rolemaster_AccessType']").prop("checked", false);
                    tds.find("input[class='pod_AccessType']").prop("checked", false);
                    if (tds.find("input[class='rolemaster_AccessType']").is(':checked')) {
                        var mtempid = tds.eq(1).text();
                        var mpendi = parseFloat(tds.eq(9).text());
                        $('#TxtA_' + mtempid + '').val(mpendi.toFixed(2));
                        var mpending = parseFloat($('#TxtA_' + mtempid + '').val());
                        tds.eq(11).html(mpending.toFixed(2));
                        tds.eq(12).html('0');
                    }
                    else {
                        tds.eq(11).html('');
                        tds.eq(12).html('0');
                    }
                })
            }

            var acheckmil = 0;
            var mtotal = 0;
            $('#tabledatapick tr:not(:first)').each(function () {
                var tds = $(this).find('td');
                if (tds.find('input[type="checkbox"]').is(':checked')) {
                    acheckmil = parseInt(acheckmil) + parseInt(1);
                    var mtot = tds.eq(11).text();
                    mtotal = parseFloat(mtotal) + parseFloat(mtot);
                }
            })
            $('#lblSelectTotal').html(acheckmil);
            $('#lblSelectAmount').html(mtotal);
        });

        var mselectAmt = 0;

        $('#pickrecord').click(function (event) {
            event.preventDefault();
            var myTableArray = [];
            var acheckmil = 0;
            $('#tabledatapick tr:not(:first)').each(function () {
                var tds = $(this).find('td');
                if (tds.find('input[type="checkbox"]').is(':checked')) {
                    acheckmil = parseInt(acheckmil) + parseInt(1);
                }
            })
            if (parseInt(acheckmil) == parseInt(0)) {
                alert('Select a Ledger to Pickup')
                return;
            }
            $(':input[id="pickrecord"]').prop('disabled', true);
            var abcCount = parseInt(20) + parseInt($('#hdnuCount').val());

            $('#tabledatapick tr:not(:first)').each(function () {
                var tds = $(this).find('td');
                if (tds.find('input[type="checkbox"]').is(':checked')) {
                    var PPSerial = [];
                    for (i = 20; i <= abcCount; i++) {
                        PPSerial.push(tds.eq(i).find('input[class="enttxtcls"]').val());
                    }
                    var myDets = {
                        tempId: tds.eq(1).text(),
                        LedgerType: tds.eq(2).text(),
                        LedgerPrefix: tds.eq(3).text(),
                        LedgerSrl: tds.eq(4).text(),
                        BillNumber: tds.eq(5).text(),
                        StrBillDate: tds.eq(6).text(),
                        BranchName: tds.eq(7).text(),
                        BillAmt: tds.eq(8).text(),
                        BalAmt: tds.eq(9).text(),
                        Amt: tds.find('input[class="txtfvalue"]').val(),
                        BillTDS: tds.find('input[class="txtftdsvalue"]').val(),

                        LedgerParentKey: tds.eq(14).text(),
                        LedgerTableKey: tds.eq(15).text(),
                        LedgerMainType: tds.eq(16).text(),
                        LedgerSubType: tds.eq(17).text(),
                        Branch: tds.eq(18).text(),
                        LedgerSno: tds.eq(19).text(),
                        ChgPickupList: PPSerial,
                        Remark: tds.find('input[class="remrkcls"]').val()
                    }
                    myTableArray.push(myDets);
                }
            });

            var ModelData = {};
            ModelData["PickUpList"] = myTableArray;
            ModelData["SubType"] = $("#hdnSubType").val();
            ModelData["MainType"] = $("#hdnMainType").val();
            ModelData["AccAmt"] = $("#PickAccAmt").val();
            ModelData["Type"] = $("#hdnType").val();
            ModelData["Mode"] = $('#hdnMode').val();
            ModelData["Taxable"] = $('#UpAccAmt').val();

            if ($('#addGSTNoItc').is(":checked")) {

                ModelData["GSTFlag"] = $('#addGSTNoItc').is(":checked");
                ModelData["GSTCode"] = $("#addGSTCode").val();
                ModelData["CGSTAmt"] = $('#txttotcgst').val();
                ModelData["SGSTAmt"] = $('#txttotsgst').val();
                ModelData["IGSTAmt"] = $('#txttotigst').val();
                ModelData["CGSTRate"] = $('#addCGSTRate').val();
                ModelData["IGSTRate"] = $('#addIGSTRate').val();
                ModelData["SGSTRate"] = $('#addSGSTRate').val();
            }
            if ($('#addTDSFlag').is(":checked")) {
                ModelData["TDSFlag"] = $('#addTDSFlag').is(":checked");
                ModelData["TDSCode"] = $("#addTDSCode").val();
                ModelData["TDSRate"] = $("#addTDSRate").val();
                ModelData["TDSAmt"] = $('#TDSAmt').val();
            }

            var DTO = { Model: ModelData };
            var url = '@Url.Action("PostPickUp")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();

                },
                success: function (data) {
                    $(':input[id="pickrecord"]').prop('disabled', false);

                    if (data.Status == "Success") {
                        $('.spinner').hide();
                        $('#ErrorMessage').hide();
                        $('#pickuplist').modal('hide');
                        $('#divLedgerTable').html(data.Html);
                        $('#NetAmt').val(data.SumAmt);

                        $('#addTDSAmt').val(data.TdsAmt);
                        $('#TDSAmt').val(data.TdsAmt);

                        $('#addIGSTAmt').val(data.IGST);
                        $('#txttotigst').val(data.IGST);

                        $('#addCGSTAmt').val(data.CGST);
                        $('#txttotcgst').val(data.CGST);

                        $('#addSGSTAmt').val(data.SGST);
                        $('#txttotsgst').val(data.SGST);

                        $('#txtinvamt').val(data.InvAmt);

                    }
                    else if (data.Status == "Fail") {
                        alert(data.Message)
                    }
                },
                error: function (err) {
                    alert(JSON.stringify(err))
                    $('.spinner').hide();
                    alert("error occured while processing your request.");
                }
            });
        });

        @*$("#tabledatapick tbody").on('dblclick','.clstr', function () {
            var tds2 = $(this).closest("tr");
            if (tds2.find("input[class='rolemaster_AccessType']").is(':checked')) {

                var abcCount = parseInt(17) + parseInt($('#hdnuCount').val());

                var PPSerial = [];

                for (i = 17; i <= abcCount; i++) {
                    PPSerial.push(tds2.find('td').eq(i).find('input[class="enttxtcls"]').val());
                }
                var ModelData = {};
                ModelData["FMNo"] = tds2.find('td').eq(2).text();
                ModelData["FMDateStr"] = tds2.find('td').eq(3).text();
                ModelData["Branch"] = tds2.find('td').eq(4).text();

                ModelData["AdvType"] = tds2.find('td').eq(5).text();
                ModelData["Party"] = tds2.find('td').eq(6).text();
                ModelData["RelatedTo"] = tds2.find('td').eq(7).text();
                ModelData["PartyCode"] = tds2.find('td').eq(14).text();
                ModelData["RelatedToCode"] = tds2.find('td').eq(15).text();
                ModelData["AdvAmt"] = tds2.find('td').eq(8).text();
                ModelData["AdvPending"] = tds2.find('td').eq(9).text();
                ModelData["Amt"] = tds2.find('td').eq(11).text();
                ModelData["ChgPickupList"] = PPSerial;
                ModelData["Remark"] = tds2.find('td').find('input[class="remrkcls"]').val();
                ModelData["RefTableKey"] = tds2.find('td').eq(12).text();
                var DTO = { Model: ModelData };
                var url = '@Url.Action("GetFMDetailsFromPickup")';
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json;charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data) {
                        $('.spinner').hide();
                        $('#addcashbank').modal('show');
                        $('#AddCashBank').html(data.Html);
                        $('#btnAddAdvanceList').hide();
                        $('#pushrecord').show();
                    },
                    error: function (er) {
                        alert("Error occured while processing your request.");
                    }
                });
            }
            else {
                alert('Please select FM for details')
                return;
            }
        });*@
    });


</script>

<style>
    .fixPickupTableHead {
        overflow-y: auto;
        height: 300px;
    }

        .fixPickupTableHead thead th {
            position: sticky;
            top: 0;
        }

        .fixPickupTableHead tfoot tr {
            position: sticky;
            bottom: 0;
        }

    .SearchRow {
        background-color: coral;
    }
</style>

