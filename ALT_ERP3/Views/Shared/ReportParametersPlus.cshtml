@model GridOption
@using Common;
<script src="~/Scripts/jquery.jstree.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        document.getElementById("headerdiv").style.backgroundColor = '@Session["headerdivcolor"]';
        document.getElementById("headercaption").style.color = '@Session["headercaptioncolor"]';
        document.getElementById("fixedbottom").style.backgroundColor = '@Session["bottomcolor"]';
        if ($('#hdnsubcodeof').val() == "") {
            $('#hdnsubcodeof').val('@Model.ViewDataId');
        }
        $('#formatname').val('View: ' + '@Model.ViewDataId');
        //$('#types').hide();
        // initially disable all the controls
        //$('#itemgroups :input').prop('disabled', true);
        //$('#itemcatdiv :input').prop('disabled', true);
        //$('#processlistdiv :input').prop('disabled', true);
        //$('#storeslist :input').prop('disabled', true);
        //$('#brokerlistdiv :input').prop('disabled', true);
        //$('#arealistdiv :input').prop('disabled', true);
        //$('#itemslistdiv :input').prop('disabled', true);
        //$('#acclistdiv :input').prop('disabled', true);
        //$('#salesmanlist :input').prop('disabled', true);
        //$('#typeslist :input').prop('disabled', true);
        //$('#accgroupslist :input').prop('disabled', true);

        GetReportCode();
        //fillitemgrouptree();
        //fillaccgroups();
        //fillstorestree();
        //filltypestree("","");
        //fillsalesmantree();

        // enable relevant objects' div
        $('#isgroupsdiv').click(function () {
            var mdisable = !$('#isgroups').is(':checked');
            $(':input[id="itemgroups"]').prop('disabled', mdisable);
            $('#itemgroupsdiv :input').prop('disabled', mdisable);
        });

        $('#isitemcatdiv').click(function () {
            var mdisable = !$('#isitemcat').is(':checked');
            $(':input[id="itemcatlist"]').prop('disabled', mdisable);
            $('#itemcatdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetItemCatLists();
        });

        $('#isprocessdiv').click(function () {
            var mdisable = !$('#isprocess').is(':checked');
            $(':input[id="processlist"]').prop('disabled', mdisable);
            $('#processdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetProcessLists();
        });

        $('#isbrokerdiv').click(function () {
            var mdisable = !$('#isbroker').is(':checked');
            $(':input[id="brokerlist"]').prop('disabled', mdisable);
            $('#brokerdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetBrokerLists();
        });

        $('#iscitydiv').click(function () {
            var mdisable = !$('#iscity').is(':checked');
            $(':input[id="citylist"]').prop('disabled', mdisable);
            $('#citydiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetCityLists();
        });

        $('#iscountrydiv').click(function () {
            var mdisable = !$('#iscountry').is(':checked');
            $(':input[id="countrylist"]').prop('disabled', mdisable);
            $('#countrydiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetCountryLists();
        });

        $('#isstatediv').click(function () {
            var mdisable = !$('#isstate').is(':checked');
            $(':input[id="statelist"]').prop('disabled', mdisable);
            $('#statediv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetStateLists();
        });

        $('#isareasdiv').click(function () {
            var mdisable = !$('#isarea').is(':checked');
            $(':input[id="arealist"]').prop('disabled', mdisable);
            $('#arealistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetAreaLists();
        });

        $('#isacccatdiv').click(function () {
            var mdisable = !$('#isacccat').is(':checked');
            $(':input[id="acccatlist"]').prop('disabled', mdisable);
            $('#acccatdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetAccCatLists();
        });

        $('#isaccheaddiv').click(function () {
            var mdisable = !$('#isacchead').is(':checked');
            $(':input[id="accheadlist"]').prop('disabled', mdisable);
            $('#accheaddiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetAccHeadLists();
        });

        $('#isccdiv').click(function () {
            var mdisable = !$('#iscc').is(':checked');
            $(':input[id="cclist"]').prop('disabled', mdisable);
            $('#cclistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetCCLists();
        });

        $('#ispcdiv').click(function () {
            var mdisable = !$('#ispc').is(':checked');
            $(':input[id="pclist"]').prop('disabled', mdisable);
            $('#pclistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetPCLists();
        });

        $('#isunitdiv').click(function () {
            var mdisable = !$('#isunit').is(':checked');
            $(':input[id="unitlist"]').prop('disabled', mdisable);
            $('#unitlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetUnitLists();
        });

        $('#ismaintypediv').click(function () {
            var mdisable = !$('#ismaintype').is(':checked');
            $(':input[id="mainlist"]').prop('disabled', mdisable);
            $('#mainlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetMainTypeLists();
        });

        $('#issubtypediv').click(function () {
            var mdisable = !$('#issubtype').is(':checked');
            $(':input[id="subtypelist"]').prop('disabled', mdisable);
            $('#subtypelistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetSubTypeLists();
        });

        //$('#istypesdiv').click(function () {
        //    var mdisable = !$('#istypes').is(':checked');
        //    $(':input[id="typeslist"]').prop('disabled', mdisable);
        //});

        $('#istypesdiv').click(function () {
            var mdisable = !$('#istypes').is(':checked');
            $(':input[id="typelist"]').prop('disabled', mdisable);
            $('#typeslist :input').prop('disabled', mdisable);
            if (mdisable == false) {
                divText = [];
                $("#subtypelist :selected").each(function () {
                    divText.push("'" + $(this).val() + "'");
                });
                filltypestree("",divText);
            }
        });

        $('#iswarehousediv').click(function () {
            var mdisable = !$('#iswarehouse').is(':checked');
            $(':input[id="warehouselist"]').prop('disabled', mdisable);
            $('#warehousediv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetWarehouseLists();
        });

        $('#isbindiv').click(function () {
            var mdisable = !$('#isbin').is(':checked');
            $(':input[id="binlist"]').prop('disabled', mdisable);
            $('#binlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetBINLists();
        });

        $('#istaxdiv').click(function () {
            var mdisable = !$('#istax').is(':checked');
            $(':input[id="taxlist"]').prop('disabled', mdisable);
            $('#taxlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetTaxLists();
        });

        $('#ishsndiv').click(function () {
            var mdisable = !$('#ishsn').is(':checked');
            $(':input[id="hsnlist"]').prop('disabled', mdisable);
            $('#hsnlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetHSNLists();
        });

        $('#isempdiv').click(function () {
            var mdisable = !$('#isemp').is(':checked');
            $(':input[id="emplist"]').prop('disabled', mdisable);
            $('#empdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetEmployeeLists();
        });

        $('#isuserdiv').click(function () {
            var mdisable = !$('#isuser').is(':checked');
            $(':input[id="userlist"]').prop('disabled', mdisable);
            $('#userlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetUserLists();
        });

        $('#isempcatdiv').click(function () {
            var mdisable = !$('#isempcat').is(':checked');
            $(':input[id="empcatlist"]').prop('disabled', mdisable);
            $('#empcatlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetEmpCatLists();
        });

        $('#isdeptdiv').click(function () {
            var mdisable = !$('#isdept').is(':checked');
            $(':input[id="deptlist"]').prop('disabled', mdisable);
            $('#deptlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetDeptLists();
        });

        $('#ispostdiv').click(function () {
            var mdisable = !$('#ispost').is(':checked');
            $(':input[id="postlist"]').prop('disabled', mdisable);
            $('#postlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetPostLists();
        });

        $('#ismccatdiv').click(function () {
            var mdisable = !$('#ismccat').is(':checked');
            $(':input[id="mccatlist"]').prop('disabled', mdisable);
            $('#mccatlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetMCCatLists();
        });

        $('#ismachinediv').click(function () {
            var mdisable = !$('#ismachine').is(':checked');
            $(':input[id="machinelist"]').prop('disabled', mdisable);
            $('#machinelistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetMachineLists();
        });

        $('#isqctypediv').click(function () {
            var mdisable = !$('#isqctype').is(':checked');
            $(':input[id="qctypelist"]').prop('disabled', mdisable);
            $('#qctypelistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetQCParaTypeLists();
        });

        $('#isqccatdiv').click(function () {
            var mdisable = !$('#isqccat').is(':checked');
            $(':input[id="qccatlist"]').prop('disabled', mdisable);
            $('#qccatlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetQCCatLists();
        });

        $('#isqctestdiv').click(function () {
            var mdisable = !$('#isqctest').is(':checked');
            $(':input[id="qctestlist"]').prop('disabled', mdisable);
            $('#qctestlistdiv :input').prop('disabled', mdisable);
            if (mdisable == false)
                GetQCTestsLists();
        });

        $('#issalesmandiv').click(function () {
            var mdisable = !$('#issalesman').is(':checked');
            $(':input[id="salesmanlist"]').prop('disabled', mdisable);
            $('#salesmandiv :input').prop('disabled', mdisable);
        });

        $('#isacgroupsdiv').click(function () {
            var mdisable = !$('#isacgroups').is(':checked');
            $(':input[id="accgroupslist"]').prop('disabled', mdisable);
        });

        // select2 initialisation for multiselect controls
        $('#itemslist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#processlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#acclist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#arealist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#brokerlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#citylist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#statelist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#itemcatlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });

        $('#acccatlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#accheadlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#cclist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#pclist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#unitlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#mainlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#subtypelist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#countrylist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#warehouselist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#binlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#taxlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#hsnlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#empgradelist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#userlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#empcatlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#deptlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#postlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#emplist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#mccatlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#machinelist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#qctypelist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#qccatlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });
        $('#qctestlist').select2({ closeOnSelect: false, placeholder: "Placeholder", allowHtml: true, allowClear: true, });

        // fill itemlist with selected itemgroups, when itemlist checkbox is selected
        $('#isitemsdiv').click(function () {
            if ($('#isitems').is(':checked')) {
                //$('#itemslistdiv :input').prop('disabled', false);
                var divText = [];
                $("#itemgroups").jstree("get_checked", null, true).each
                    (function () {
                        divText.push($(this).children('a').text());
                    });
                $('#hdnitemgrouptreearray').val(divText.toString());
                GetItemsLists();
            }
        });

        // fill itemlist with selected itemgroups, when itemlist checkbox is selected
        $('#isaccounts').click(function () {
            if ($('#isaccounts').is(':checked')) {
                $('#acclistdiv :input').prop('disabled', false);
                var divText = [];
                $("#accgroupslist").jstree("get_checked", null, true).each
                    (function () {
                        divText.push($(this).children('a').text());
                    });
                $('#hdnaccgrouptreearray').val(divText.toString());
                GetAccountsLists();
            }
        });

        //$("#itemslist").change(function () {
        //    var selected = [];
        //    $("#itemslist :selected").each(function () {
        //        selected.push("'" + $(this).val() + "'");
        //    });
        //    $('#hdnitemarray').val(selected)
        //    return false;
        //});

        //$("#acclist").change(function () {
        //    var selected = [];
        //    $("#acclist :selected").each(function () {
        //        selected.push("'" + $(this).val()+"'");
        //    });
        //    $('#hdnaccarray').val(selected)
        //    return false;
        //});

        //$("#processlist").change(function () {
        //    var selected = [];
        //    $("#processlist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdnprocessarray').val(selected)
        //    return false;
        //});

        //$("#arealist").change(function () {
        //    var selected = [];
        //    $("#arealist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdnarealistarray').val(selected)
        //    return false;
        //});

        //$("#brokerlist").change(function () {
        //    var selected = [];
        //    $("#brokerlist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdnbrokerlistarray').val(selected)
        //    return false;
        //});

        //$("#citylist").change(function () {
        //    var selected = [];
        //    $("#citylist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdncitylistarray').val(selected)
        //    return false;
        //});

        //$("#statelist").change(function () {
        //    var selected = [];
        //    $("#statelist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdnstatelistarray').val(selected)
        //    return false;
        //});

        //$("#itemcatlist").change(function () {
        //    var selected = [];
        //    $("#itemcatlist :selected").each(function () {
        //        selected.push($(this).val());
        //    });
        //    $('#hdnitemcatarray').val(selected)
        //    return false;
        //});

        // expand / collapse / close
        $('#expandall').click(function () {
            $("#itemgroups").jstree("open_all", "#0");
        });
        $('#closeall').click(function () {
            $("#itemgroups").jstree("close_all", "#0");
        });

        $('#expandstores').click(function () {
            $("#storeslist").jstree("open_all", "#0");
        });
        $('#closestores').click(function () {
            $("#storeslist").jstree("close_all", "#0");
        });

        $('#expandsalesman').click(function () {
            $("#salesmanlist").jstree("open_all", "#0");
        });
        $('#closesalesman').click(function () {
            $("#salesmanlist").jstree("close_all", "#0");
        });

        $('#expandaccgrp').click(function () {
            $("#accgroupslist").jstree("open_all", "#0");
        });
        $('#closeaccgrp').click(function () {
            $("#accgroupslist").jstree("close_all", "#0");
        });

        $('#expandtypes').click(function () {
            $("#typeslist").jstree("open_all", "#0");
        });
        $('#closetypes').click(function () {
            $("#typeslist").jstree("close_all", "#0");
        });

        $("#submit").click(function (event) {
            event.preventDefault();

            var divText = [];
            if ($('#viewcode').val() == 0) {
                alert("Format is Required..");
                return false;
            }
            $('.spinner').show();
            debugger;
            $("#accgroupslist").jstree("get_checked", null, true).each
                (function () {
                    divText.push($(this).children('a').text());
                });
            $('#hdnaccgrouptreearray').val(divText.toString());

            divText = [];
            $("#itemgroups").jstree("get_checked", null, true).each
                (function () {
                    divText.push($(this).children('a').text());
                });
            $('#hdnitemgrouptreearray').val(divText.toString());

            divText = [];
            $("#storeslist").jstree("get_checked", null, true).each
                (function () {
                    divText.push($(this).children('a').text());
                });
            $('#hdnstorestreearray').val(divText.toString());

            divText = [];
            $("#typeslist").jstree("get_checked", null, true).each
                (function () {
                    divText.push($(this).children('a').text());
                });
            $('#hdntypestreearray').val(divText.toString());

            divText = [];
            $("#salesmanlist").jstree("get_checked", null, true).each
                (function () {
                    divText.push($(this).children('a').text());
                });
            $('#hdnsalesmantreearray').val(divText.toString());

            divText = [];
            $("#itemslist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnitemarray').val(divText)

            divText = [];
            $("#acclist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnaccarray').val(divText)

            divText = [];
            $("#processlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnprocessarray').val(divText)

            divText = [];
            $("#arealist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnareaarray').val(divText)

            divText = [];
            $("#brokerlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnbrokerarray').val(divText)

            divText = [];
            $("#citylist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdncityarray').val(divText)

            divText = [];
            $("#statelist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnstatearray').val(divText)

            divText = [];
            $("#itemcatlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnitemcatarray').val(divText)

            divText = [];
            $("#acccatlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdncategory').val(divText)

            divText = [];
            $("#accheadlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnaccheads').val(divText)

            divText = [];
            $("#cclist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdncostcent').val(divText)

            divText = [];
            $("#pclist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnprofitcent').val(divText)

            divText = [];
            $("#unitlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnunits').val(divText)

            divText = [];
            $("#mainlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnmaintype').val(divText)

            divText = [];
            $("#subtypelist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnsubtype').val(divText)

            divText = [];
            $("#countrylist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdncountry').val(divText)

            divText = [];
            $("#warehouselist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnwarehouse').val(divText)

            divText = [];
            $("#binlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnbin').val(divText)

            divText = [];
            $("#taxlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdntaxmas').val(divText)

            divText = [];
            $("#hsnlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnhsn').val(divText)

            divText = [];
            $("#empgradelist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdngrade').val(divText)

            divText = [];
            $("#userlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnuser').val(divText)

            divText = [];
            $("#empcatlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnempcat').val(divText)

            divText = [];
            $("#deptlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdndept').val(divText)

            divText = [];
            $("#postlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnpost').val(divText)

            divText = [];
            $("#emplist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnemployee').val(divText)

            divText = [];
            $("#mccatlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnmccat').val(divText)

            divText = [];
            $("#machinelist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnmachines').val(divText)

            divText = [];
            $("#qctypelist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdnparatype').val(divText)

            divText = [];
            $("#qccatlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdntestcat').val(divText)

            divText = [];
            $("#qctestlist :selected").each(function () {
                divText.push("'" + $(this).val() + "'");
            });
            $('#hdntests').val(divText)

            var PSerial = [];
            var PPSerial = "";
            var FPSerial = "";
            //$('#addongrid').find('tr[id="datacharge"]').each(function () {
            //    var tds = $(this).find('td');
            //    var ApplCode = tds.find(".addontxtfvalue").val();
            //    //alert(ApplCode);
            //    PSerial.push(ApplCode);
            //});
            $('#addongrid').find('tr[id="datacharge"]').each(function () {
                var tds = $(this).find('td');
                var ApplCode = "";
                if (tds.eq(2).text() == "X") {
                    tds.find(".addontxtMXvalue input:checked").each(function () {
                        ApplCode = ApplCode + "'" + $(this).val() + "'^";
                    })
                    if (ApplCode.endsWith('^')) {
                        ApplCode = ApplCode.substring(0, ApplCode.length - 1);
                    }
                } else {
                    ApplCode = tds.find(".addontxtfvalue").val();
                }
                PSerial.push(ApplCode);
            });

            PPSerial = PSerial.toString();
            FPSerial = PPSerial.replace(/,/g, "|");
            var ModelData = {};
            var mpass = $('#hdnitemgrouptreearray').val() + "~" + $('#hdnaccgrouptreearray').val() + "~" + $('#hdnstorestreearray').val() + "~" + $('#hdntypestreearray').val() + "~" + $('#hdnsalesmantreearray').val() + "~" + $('#hdnitemarray').val() + "~" + $('#hdnaccarray').val() + "~" + $('#hdnitemcatarray').val() + "~" + $('#hdnprocessarray').val() + "~" + $('#hdnareaarray').val() + "~" + $('#hdnbrokerarray').val() + "~" + $('#hdncityarray').val() + "~" + $('#hdnstatearray').val();
            mpass = mpass + "~" + $('#hdncategory').val() + "~" + $('#hdnaccheads').val() + "~" + $('#hdncostcent').val() + "~" + $('#hdnprofitcent').val();
            mpass = mpass + "~" + $('#hdnunits').val() + "~" + $('#hdnmaintype').val() + "~" + $('#hdnsubtype').val() + "~" + $('#hdncountry').val() + "~" + $('#hdnwarehouse').val() + "~" + $('#hdnbin').val() + "~" + $('#hdntaxmas').val();
            mpass = mpass + "~" + $('#hdngsttype').val() + "~" + $('#hdnhsn').val() + "~" + $('#hdngrade').val() + "~" + $('#hdnuser').val() + "~" + $('#hdnempcat').val() + "~" + $('#hdndept').val();
            mpass = mpass + "~" + $('#hdnpost').val() + "~" + $('#hdnemployee').val() + "~" + $('#hdnmccat').val() + "~" + $('#hdnmctype').val() + "~" + $('#hdnmachines').val() + "~" + $('#hdnparatype').val() + "~" + $('#hdntestcat').val() + "~" + $('#hdntests').val() + "~" + FPSerial;
            $("#hdnparastring").val(mpass);
            ModelData["SelectContent"] = mpass;
            ModelData["ViewDataId"] = $("#viewcode").val();
            ModelData["IsFormatSelected"] = $('#isdefault').is(':checked');
            ModelData["OptionCode"] = $("#hdnsubcodeof").val();
            ModelData["FromDate"] = $("#Fromdate").val();
            ModelData["ToDate"] = $("#ToDate").val();
            var DTO = { Model: ModelData };
            var url = '@Url.Action("SaveParametersRep")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforesend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $('.spinner').hide();
                    $('#hdngroupby').val(data.Group);
                },
                error: function () {
                    $('.spinner').hide();
                    alert("error occured while Saving Para.");
                }
            });
        });

        $('#viewcode').change(function () {
            event.preventDefault();
            $('#formatname').val('View: ' + $('#viewcode').val());
            var url = '@Url.Action("GetParameterValueReport")?mformat=' + $('#viewcode').val();
            $.ajax({
                type: "POST",
                dataType: "json",
                data: {},
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $('.spinner').hide();
                    SetParameters(data.tabs, data.parastring, data.itemgroup, data.accgroup, data.sub, data.inputpara);
                    $('#ReportAddOnDiv').html(data.Html);
                },
                error: function () {
                    alert("Error while Processing Parameters.");
                }
            });
        });
    });

    @*$('#btnopnFormat').click(function (event) {
        event.preventDefault();
        var ModelData = {};
        ModelData["ViewDataId"] = $("#viewcode").val();
        var DTO = { Model: ModelData };
        var url = '@Url.Action("GetReportFormat")';
        $.ajax({
            type: "POST",
            dataType: "json",
            data: JSON.stringify(DTO),
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (data) {
                $("#ErrorMessage").hide();
                $('.spinner').hide();
                $('#updTfatsearch').modal('show');
                $('#updTfatsearchDiv').html(data.Html);
            },
            error: function () {
                alert("Error occured while processing your request.");
            }
        });
    });*@

    function SetParameters(tabs, parastring, itemgroup, accgroup, sub, inputpara) {
        //if (tabs != "" && tabs != null) {
            var mtab = "xudf";
            if (tabs.endsWith("^") == false) {
                tabs = tabs + "^";
            }
            if (tabs.includes("account^") == false) {
                $('#xaccounts').hide();
            } else {
                mtab = "xaccounts";
            }
            if (tabs.includes("item^") == false) {
                $('#xitems').hide();
            } else {
                if (mtab == "")
                    mtab = "xitems";
            }
            if (tabs.includes("type^") == false) {
                $('#xtypes').hide();
            } else {
                if (mtab == "")
                    mtab = "xtypes";
            }
            if (tabs.includes("geo^") == false) {
                $('#xgeo').hide();
            } else {
                if (mtab == "")
                    mtab = "xgeo";
            }
            if (tabs.includes("location^") == false) {
                $('#xlocation').hide();
            } else {
                if (mtab == "")
                    mtab = "xlocation";
            }
            if (tabs.includes("tax^") == false) {
                $('#xtax').hide();
            } else {
                if (mtab == "")
                    mtab = "xtax";
            }
            if (tabs.includes("employee^") == false) {
                $('#xemployee').hide();
            } else {
                if (mtab == "")
                    mtab = "xemployee";
            }
            if (tabs.includes("machine^") == false) {
                $('#xmachines').hide();
            } else {
                if (mtab == "")
                    mtab = "xmachines";
            }
            if (tabs.includes("qc^") == false) {
                $('#xqcprocess').hide();
            } else {
                if (mtab == "")
                    mtab = "xqcprocess";
            }
            if (tabs.includes("process^") == false) {
                $('#xprocess').hide();
            } else {
                if (mtab == "")
                    mtab = "xprocess";
            }
            if (tabs.includes("addon^") == false) {
                $('#xaddon').hide();
            } else {
                if (mtab == "")
                    mtab = "xaddon";
            }
            if (mtab == "")
                mtab = "xudf";

            document.getElementById(mtab).click();
        //}
        //basegr^groups^category^accheads^accounts^costcent^profitcent^salesman^broker^
        //itemcat^groups^units^items^
        //maintype^subtype^types^
        //country^state^city^pincode^area^
        //warehouse^stores^bin^
        //taxmas^gsttype^hsn^
        //grade^user^empcat^dept^post^employee^
        //mccat^mctype^machines^
        //paratype^testcat^tests^
        //proctype^process^
        //adddoc^additem^
        if (parastring != "" && parastring != null) {
            //var para = parastring.split("^");
            if (parastring.endsWith("^") == false) {
                parastring = parastring + "^";
            }
            //basegr^groups^category^accheads^accounts^costcent^profitcent^salesman^broker^
            //groups
            if (parastring.includes("groups^") == true) {
                $('#isacgroups').prop('checked', true);
                $(':input[id="isacgroups"]').prop('disabled', false);
                fillaccgroups(accgroup);
            } else {
                $('#isacgroups').prop('checked', false);
                $(':input[id="isacgroups"]').prop('disabled', true);
            }
            //party category
            if (parastring.includes("category^") == true) {
                //$('#isacccat').prop('checked', true);
                $(':input[id="isacccat"]').prop('disabled', false);
            } else {
                $('#isacccat').prop('checked', false);
                $(':input[id="isacccat"]').prop('disabled', true);
            }
            //accheads
            if (parastring.includes("accheads^") == true) {
                //$('#isacchead').prop('checked', true);
                $(':input[id="isacchead"]').prop('disabled', false);
            } else {
                $('#isacchead').prop('checked', false);
                $(':input[id="isacchead"]').prop('disabled', true);
            }
            //accounts
            if (parastring.includes("accounts^") == true) {
                //$('#isaccounts').prop('checked', true);
                $(':input[id="isaccounts"]').prop('disabled', false);
            } else {
                $('#isaccounts').prop('checked', false);
                $(':input[id="isaccounts"]').prop('disabled', true);
            }
            //pc
            if (parastring.includes("profitcent^") == true) {
                //$('#ispc').prop('checked', true);
                $(':input[id="ispc"]').prop('disabled', false);
            } else {
                $('#ispc').prop('checked', false);
                $(':input[id="ispc"]').prop('disabled', true);
            }
            //cc
            if (parastring.includes("costcent^") == true) {
                //$('#iscc').prop('checked', true);
                $(':input[id="iscc"]').prop('disabled', false);
            } else {
                $('#iscc').prop('checked', false);
                $(':input[id="iscc"]').prop('disabled', true);
            }
            //salesman
            if (parastring.includes("salesman^") == true) {
                //$('#issalesman').prop('checked', true);
                $(':input[id="issalesman"]').prop('disabled', false);
                fillsalesmantree();
            } else {
                $('#issalesman').prop('checked', false);
                $(':input[id="issalesman"]').prop('disabled', true);
            }
            //broker
            if (parastring.includes("broker^") == true) {
                //$('#isbroker').prop('checked', true);
                $(':input[id="isbroker"]').prop('disabled', false);
            } else {
                $('#isbroker').prop('checked', false);
                $(':input[id="isbroker"]').prop('disabled', true);
            }

            //itemcat^groups^units^items^
            //temcat
            if (parastring.includes("itemcat^") == true) {
                //$('#isitemcat').prop('checked', true);
                $(':input[id="isitemcat"]').prop('disabled', false);
            } else {
                $('#isitemcat').prop('checked', false);
                $(':input[id="isitemcat"]').prop('disabled', true);
            }
            //itemgroups
            if (parastring.includes("groups^") == true) {
                $('#isgroups').prop('checked', true);
                $(':input[id="isgroups"]').prop('disabled', false);
                fillitemgrouptree(itemgroup);
            } else {
                $('#isgroups').prop('checked', false);
                $(':input[id="isgroups"]').prop('disabled', true);
            }
            //unit
            if (parastring.includes("units^") == true) {
                //$('#isunit').prop('checked', true);
                $(':input[id="isunit"]').prop('disabled', false);
            } else {
                $('#isunit').prop('checked', false);
                $(':input[id="isunit"]').prop('disabled', true);
            }
            //items
            if (parastring.includes("items^") == true) {
                //$('#isitems').prop('checked', true);
                $(':input[id="isitems"]').prop('disabled', false);
            } else {
                $('#isitems').prop('checked', false);
                $(':input[id="isitems"]').prop('disabled', true);
            }

            //maintype^subtype^types^
            //types
            if (parastring.includes("maintype^") == true) {
                //$('#ismaintype').prop('checked', true);
                $(':input[id="ismaintype"]').prop('disabled', false);
            } else {
                $('#ismaintype').prop('checked', false);
                $(':input[id="ismaintype"]').prop('disabled', true);
            }
            if (parastring.includes("subtype^") == true) {
                //$('#issubtype').prop('checked', true);
                $(':input[id="issubtype"]').prop('disabled', false);
            } else {
                $('#issubtype').prop('checked', false);
                $(':input[id="issubtype"]').prop('disabled', true);
            }
            if (parastring.includes("types^") == true) {
                $('#istypes').prop('checked', true);
                $(':input[id="istypes"]').prop('disabled', false);
                filltypestree("", sub);
            } else {
                //filltypestree("", sub);
                $('#istypes').prop('checked', false);
                $(':input[id="istypes"]').prop('disabled', true);
            }

            //country^state^city^pincode^area^
            //area
            if (parastring.includes("country^") == true) {
                //$('#iscountry').prop('checked', true);
                $(':input[id="iscountry"]').prop('disabled', false);
            } else {
                $('#iscountry').prop('checked', false);
                $(':input[id="iscountry"]').prop('disabled', true);
            }
            if (parastring.includes("state^") == true) {
                //$('#isstate').prop('checked', true);
                $(':input[id="isstate"]').prop('disabled', false);
            } else {
                $('#isstate').prop('checked', false);
                $(':input[id="isstate"]').prop('disabled', true);
            }
            if (parastring.includes("city^") == true) {
                //$('#iscity').prop('checked', true);
                $(':input[id="iscity"]').prop('disabled', false);
            } else {
                $('#iscity').prop('checked', false);
                $(':input[id="iscity"]').prop('disabled', true);
            }
            if (parastring.includes("area^") == true) {
                //$('#isarea').prop('checked', true);
                $(':input[id="isarea"]').prop('disabled', false);
            } else {
                $('#isarea').prop('checked', false);
                $(':input[id="isarea"]').prop('disabled', true);
            }

            //warehouse^stores^bin^
            //warehouse
            if (parastring.includes("warehouse^") == true) {
                //$('#iswarehouse').prop('checked', true);
                $(':input[id="iswarehouse"]').prop('disabled', false);
            } else {
                $('#iswarehouse').prop('checked', false);
                $(':input[id="iswarehouse"]').prop('disabled', true);
            }
            //stores
            if (parastring.includes("stores^") == true) {
                $('#isstores').prop('checked', true);
                $(':input[id="isstores"]').prop('disabled', false);
                fillstorestree();
            } else {
                $('#isstores').prop('checked', false);
                $(':input[id="isstores"]').prop('disabled', true);
            }
            //bin
            if (parastring.includes("bin^") == true) {
                //$('#isbin').prop('checked', true);
                $(':input[id="isbin"]').prop('disabled', false);
            } else {
                $('#isbin').prop('checked', false);
                $(':input[id="isbin"]').prop('disabled', true);
            }

            //taxmas^gsttype^hsn^
            if (parastring.includes("taxmas^") == true) {
                //$('#istax').prop('checked', true);
                $(':input[id="istax"]').prop('disabled', false);
            } else {
                $('#istax').prop('checked', false);
                $(':input[id="istax"]').prop('disabled', true);
            }
            if (parastring.includes("hsn^") == true) {
                //$('#ishsn').prop('checked', true);
                $(':input[id="ishsn"]').prop('disabled', false);
            } else {
                $('#ishsn').prop('checked', false);
                $(':input[id="ishsn"]').prop('disabled', true);
            }
            //grade^user^empcat^dept^post^employee^
            if (parastring.includes("grade^") == true) {
                //$('#isempgrade').prop('checked', true);
                $(':input[id="isempgrade"]').prop('disabled', false);
            } else {
                $('#isempgrade').prop('checked', false);
                $(':input[id="isempgrade"]').prop('disabled', true);
            }
            if (parastring.includes("user^") == true) {
                //$('#isuser').prop('checked', true);
                $(':input[id="isuser"]').prop('disabled', false);
            } else {
                $('#isuser').prop('checked', false);
                $(':input[id="isuser"]').prop('disabled', true);
            }
            if (parastring.includes("empcat^") == true) {
                //$('#isempcat').prop('checked', true);
                $(':input[id="isempcat"]').prop('disabled', false);
            } else {
                $('#isempcat').prop('checked', false);
                $(':input[id="isempcat"]').prop('disabled', true);
            }
            if (parastring.includes("dept^") == true) {
                //$('#isdept').prop('checked', true);
                $(':input[id="isdept"]').prop('disabled', false);
            } else {
                $('#isdept').prop('checked', false);
                $(':input[id="isdept"]').prop('disabled', true);
            }
            if (parastring.includes("post^") == true) {
                //$('#ispost').prop('checked', true);
                $(':input[id="ispost"]').prop('disabled', false);
            } else {
                $('#ispost').prop('checked', false);
                $(':input[id="ispost"]').prop('disabled', true);
            }
            if (parastring.includes("employee^") == true) {
                //$('#isemp').prop('checked', true);
                $(':input[id="isemp"]').prop('disabled', false);
            } else {
                $('#isemp').prop('checked', false);
                $(':input[id="isemp"]').prop('disabled', true);
            }

            //mccat^mctype^machines^
            if (parastring.includes("mccat^") == true) {
                //$('#ismccat').prop('checked', true);
                $(':input[id="ismccat"]').prop('disabled', false);
            } else {
                $('#ismccat').prop('checked', false);
                $(':input[id="ismccat"]').prop('disabled', true);
            }
            if (parastring.includes("mctype^") == true) {
                //$('#ismctype').prop('checked', true);
                $(':input[id="ismctype"]').prop('disabled', false);
            } else {
                $('#ismctype').prop('checked', false);
                $(':input[id="ismctype"]').prop('disabled', true);
            }
            if (parastring.includes("machines^") == true) {
                //$('#ismachine').prop('checked', true);
                $(':input[id="ismachine"]').prop('disabled', false);
            } else {
                $('#ismachine').prop('checked', false);
                $(':input[id="ismachine"]').prop('disabled', true);
            }
            //paratype^testcat^tests^process
            if (parastring.includes("paratype^") == true) {
                //$('#isqctype').prop('checked', true);
                $(':input[id="isqctype"]').prop('disabled', false);
            } else {
                $('#isqctype').prop('checked', false);
                $(':input[id="isqctype"]').prop('disabled', true);
            }
            if (parastring.includes("testcat^") == true) {
                //$('#isqccat').prop('checked', true);
                $(':input[id="isqccat"]').prop('disabled', false);
            } else {
                $('#isqccat').prop('checked', false);
                $(':input[id="isqccat"]').prop('disabled', true);
            }
            if (parastring.includes("tests^") == true) {
                //$('#isqctest').prop('checked', true);
                $(':input[id="isqctest"]').prop('disabled', false);
            } else {
                $('#isqctest').prop('checked', false);
                $(':input[id="isqctest"]').prop('disabled', true);
            }
            //proctype^process^
            //if (parastring.includes("proctype^") == false) {
            //    $('#isproc').prop('checked', true);
            //    $(':input[id="isqctest"]').prop('disabled', false);
            //} else {
            //    $('#isqctest').prop('checked', false);
            //    $(':input[id="isqctest"]').prop('disabled', true);
            //}
            if (parastring.includes("process^") == true) {
                //$('#isprocess').prop('checked', true);
                $(':input[id="isprocess"]').prop('disabled', false);
            } else {
                $('#isacgroups').prop('checked', false);
                $(':input[id="isprocess"]').prop('disabled', true);
            }
            //adddoc^additem^
            // set treeview filters
            //itemgroups
            //if (para[0] != "") { fillitemgrouptree(itemgroup); }
            //accgroups
            //if (para[2] != "") { fillaccgroups(accgroup); }
            //types
            //if (para[10] != "") { filltypestree(sub); }
        }
    }

    function GetProcessLists() {
        var url = '@Url.Action("GetProcessLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#processlist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Process List." + ex);
            }
        });
        return false;
    };

    function GetAccCatLists() {
        var url = '@Url.Action("GetAccCategoryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#acccatlist").empty();
                $("#acccatlist").select2('data', null);
                $("#hdncategory").val('');
                $.each(result, function (i, item) {
                    $("#acccatlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Category List." + ex);
            }
        });
        return false;
    };

    function GetAccHeadLists() {
        var url = '@Url.Action("GetAccHeadLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#accheadlist").empty();
                $("#accheadlist").select2('data', null);
                $("#hdnaccheads").val('');
                $.each(result, function (i, item) {
                    $("#accheadlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting AccHead List." + ex);
            }
        });
        return false;
    };

    function GetCCLists() {
        var url = '@Url.Action("GetCostCentLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#cclist").empty();
                $("#cclist").select2('data', null);
                $("#hdncostcent").val('');
                $.each(result, function (i, item) {
                    $("#cclist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Cost-Centre List." + ex);
            }
        });
        return false;
    };

    function GetPCLists() {
        var url = '@Url.Action("GetProfitCentLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#pclist").empty();
                $("#pclist").select2('data', null);
                $("#hdnprofitcent").val('');
                $.each(result, function (i, item) {
                    $("#pclist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Profit-Centre List." + ex);
            }
        });
        return false;
    };

    function GetUnitLists() {
        var url = '@Url.Action("GetUnitLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#unitlist").empty();
                $("#unitlist").select2('data', null);
                $("#hdnunits").val('');
                $.each(result, function (i, item) {
                    $("#unitlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Unit List." + ex);
            }
        });
        return false;
    };

    function GetMainTypeLists() {
        var url = '@Url.Action("GetMainTypeLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#mainlist").empty();
                $("#mainlist").select2('data', null);
                $("#hdnmaintype").val('');
                $.each(result, function (i, item) {
                    $("#mainlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting MainTypes List." + ex);
            }
        });
        return false;
    };

    function GetSubTypeLists() {
        var url = '@Url.Action("GetSubTypeLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#subtypelist").empty();
                $("#subtypelist").select2('data', null);
                $("#hdnsubtype").val('');
                $.each(result, function (i, item) {
                    $("#subtypelist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Sub-Types List." + ex);
            }
        });
        return false;
    };

    function GetWarehouseLists() {
        var url = '@Url.Action("GetWarehouseLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#warehouselist").empty();
                $("#warehouselist").select2('data', null);
                $("#hdnwarehouse").val('');
                $.each(result, function (i, item) {
                    $("#warehouselist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Warehouse List." + ex);
            }
        });
        return false;
    };

    function GetBINLists() {
        var url = '@Url.Action("GetBINLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#binlist").empty();
                $("#binlist").select2('data', null);
                $("#hdnbin").val('');
                $.each(result, function (i, item) {
                    $("#binlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting BIN List." + ex);
            }
        });
        return false;
    };

    function GetTaxLists() {
        var url = '@Url.Action("GetTaxLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#taxlist").empty();
                $("#taxlist").select2('data', null);
                $("#hdntaxmas").val('');
                $.each(result, function (i, item) {
                    $("#taxlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Tax List." + ex);
            }
        });
        return false;
    };

    function GetHSNLists() {
        var url = '@Url.Action("GetHSNLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#hsnlist").empty();
                $("#hsnlist").select2('data', null);
                $("#hdnhsn").val('');
                $.each(result, function (i, item) {
                    $("#hsnlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting HSN List." + ex);
            }
        });
        return false;
    };

    function GetEmpGradeLists() {
        var url = '@Url.Action("GetEmpGradeLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#empgradelist").empty();
                $("#empgradelist").select2('data', null);
                $("#hdngrade").val('');
                $.each(result, function (i, item) {
                    $("#empgradelist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting EmpGrades List." + ex);
            }
        });
        return false;
    };

    function GetUserLists() {
        var url = '@Url.Action("GetUserLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#userlist").empty();
                $("#userlist").select2('data', null);
                $("#hdnuser").val('');
                $.each(result, function (i, item) {
                    $("#userlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Users List." + ex);
            }
        });
        return false;
    };

    function GetEmpCatLists() {
        var url = '@Url.Action("GetEmpCategoryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#empcatlist").empty();
                $("#empcatlist").select2('data', null);
                $("#hdnempcat").val('');
                $.each(result, function (i, item) {
                    $("#empcatlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Emp.Category List." + ex);
            }
        });
        return false;
    };

    function GetEmployeeLists() {
        var url = '@Url.Action("GetEmployeeLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#emplist").empty();
                $("#emplist").select2('data', null);
                $("#hdnemployee").val('');
                $.each(result, function (i, item) {
                    $("#emplist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Employee List." + ex);
            }
        });
        return false;
    };

    function GetDeptLists() {
        var url = '@Url.Action("GetDeptLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#deptlist").empty();
                $("#deptlist").select2('data', null);
                $("#hdndept").val('');
                $.each(result, function (i, item) {
                    $("#deptlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Dept List." + ex);
            }
        });
        return false;
    };

    function GetPostLists() {
        var url = '@Url.Action("GetPostLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#postlist").empty();
                $("#postlist").select2('data', null);
                $("#hdnpost").val('');
                $.each(result, function (i, item) {
                    $("#postlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Post List." + ex);
            }
        });
        return false;
    };

    function GetMCCatLists() {
        var url = '@Url.Action("GetMCCategoryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#mccatlist").empty();
                $("#mccatlist").select2('data', null);
                $("#hdnmccat").val('');
                $.each(result, function (i, item) {
                    $("#mccatlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting M/C Category List." + ex);
            }
        });
        return false;
    };

    function GetMachineLists() {
        var url = '@Url.Action("GetMachineLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#machinelist").empty();
                $("#machinelist").select2('data', null);
                $("#hdnmachines").val('');
                $.each(result, function (i, item) {
                    $("#machinelist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Machines List." + ex);
            }
        });
        return false;
    };

    function GetQCParaTypeLists() {
        var url = '@Url.Action("GetQCParaTypeLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#qctypelist").empty();
                $("#qctypelist").select2('data', null);
                $("#hdnparatype").val('');
                $.each(result, function (i, item) {
                    $("#qctypelist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting QC Para Types List." + ex);
            }
        });
        return false;
    };

    function GetQCCatLists() {
        var url = '@Url.Action("GetQCCategoryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#qccatlist").empty();
                $("#qccatlist").select2('data', null);
                $("#hdntestcat").val('');
                $.each(result, function (i, item) {
                    $("#qccatlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting QC Category List." + ex);
            }
        });
        return false;
    };

    function GetQCTestsLists() {
        var url = '@Url.Action("GetQCTestLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#qctestlist").empty();
                $("#qctestlist").select2('data', null);
                $("#hdntests").val('');
                $.each(result, function (i, item) {
                    $("#qctestlist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting QC Tests List." + ex);
            }
        });
        return false;
    };

    function GetAreaLists() {
        var url = '@Url.Action("GetAreaLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#arealist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Area List." + ex);
            }
        });
        return false;
    };

    function GetItemCatLists() {
        var url = '@Url.Action("GetItemCategoryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#itemcatlist").empty();
                $("#itemcatlist").select2('data', null);
                $("#hdnitemcatarray").val('');
                $.each(result, function (i, item) {
                    $("#itemcatlist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Item Category List." + ex.toString());
            }
        });
        return false;
    };

    function GetBrokerLists() {
        var url = '@Url.Action("GetBrokerLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#brokerlist").empty();
                $("#brokerlist").select2('data', null);
                $("#hdnbrokerarray").val('');
                $.each(result, function (i, item) {
                    $("#brokerlist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Broker List." + ex);
            }
        });
        return false;
    };

    function GetCountryLists() {
        var url = '@Url.Action("GetCountryLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#countrylist").empty();
                $("#countrylist").select2('data', null);
                $("#hdncountry").val('');
                $.each(result, function (i, item) {
                    $("#countrylist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Country List." + ex);
            }
        });
        return false;
    };

    function GetCityLists() {
        var url = '@Url.Action("GetCityLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#citylist").empty();
                $("#citylist").select2('data', null);
                $("#hdncityarray").val('');
                $.each(result, function (i, item) {
                    $("#citylist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting City List." + ex);
            }
        });
        return false;
    };

    function GetStateLists() {
        var url = '@Url.Action("GetStateLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: {},
            success: function (result) {
                $("#statelist").empty();
                $("#statelist").select2('data', null);
                $("#hdnstatearray").val('');
                $.each(result, function (i, item) {
                    $("#statelist").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting State List." + ex);
            }
        });
        return false;
    };

   function GetAccountsLists() {
        var myStockSerialArray = [];
        myStockSerialArray = StringToArray($('#hdnaccgrouptreearray').val());
        var ModelData = {};
        ModelData["AddOnParaList"] = myStockSerialArray;
        var DTO = { Model: ModelData };
        var url = '@Url.Action("GetAccountLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: JSON.stringify(DTO),
            contentType: "application/json;charset=utf-8",
            success: function (result) {
                $("#acclist").empty();
                $("#acclist").select2('data', null);
                $("#hdnaccarray").val('');
                $.each(result, function (i, item) {
                    $("#acclist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Accounts List." + ex);
            }
        });
        return false;
    };

    function GetItemsLists() {
        var myStockSerialArray = [];
        myStockSerialArray = StringToArray($('#hdnitemgrouptreearray').val());
        var ModelData = {};
        ModelData["AddOnParaList"] = myStockSerialArray;
        var DTO = { Model: ModelData };
        var url = '@Url.Action("GetItemLists")';
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: JSON.stringify(DTO),
            contentType: "application/json;charset=utf-8",
            success: function (result) {
                $("#itemslist").empty();
                $("#itemslist").select2('data', null);
                $("#hdnitemarray").val('');
                $.each(result, function (i, item) {
                    $("#itemslist").append("<option value='" + item.Value + "'>" + "[" + item.Value + "] " + item.Text + "</option>");
                });
                $('.spinner').hide();
            },
            error: function (ex) {
                alert("Error! While Collecting Items List." + ex);
            }
        });
        return false;
    };

    function GetReportCode() {
        var url = '@Url.Action("GetViewCodes")?mSubCodeOf=' + '@Model.ViewDataId';
        $.ajax({
            type: "GET",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#viewcode").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('#viewcode').val('@Model.ViewCode').attr("selected", "selected");
                $('#formatname').val('View: ' + $('#viewcode').val());
                SetReportPara();
                $('.spinner').hide();
            },
            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };

    function SetReportPara() {
        event.preventDefault();
        var url = '@Url.Action("GetParameterValueReport")?mformat=' + $('#viewcode').val();
        $.ajax({
            type: "POST",
            dataType: "json",
            data: {},
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (data) {
                $('.spinner').hide();
                SetParameters(data.tabs, data.parastring, data.itemgroup, data.accgroup, data.sub, data.inputpara);
                $('#ReportAddOnDiv').html(data.Html);
            },
            error: function () {
                alert("Error while Processing Parameters.");
            }
        });
    }

    function fillitemgrouptree(mitemgroup) {
        $("#itemgroups").jstree({
            json_data: {
                "ajax": {
                    "url": "/ReportCentrePlus/GetItemGroupsTree?ItemGroups=" + mitemgroup,
                    "type": "POST",
                    "dataType": "json",
                    "contentType": "application/json charset=utf-8"
                }
            },
            checkbox: {
                real_checkboxes: true,
                checked_parent_open: true
            },
            plugins: ["themes", "json_data", "ui", "checkbox"]
        });
    };

    function filltypestree(mmain,msub) {
        $("#typeslist").jstree({
            json_data: {
                "ajax": {
                    "url": "/ReportCentrePlus/GetTypesTree?mmain=" + mmain + "&msub=" + msub,
                    "type": "POST",
                    "dataType": "json",
                    "contentType": "application/json charset=utf-8"
                }
            },
            checkbox: {
                real_checkboxes: true,
                checked_parent_open: true
            },
            plugins: ["themes", "json_data", "ui", "checkbox"]
        });
    };

    function fillstorestree() {
        $("#storeslist").jstree({
            json_data: {
                "ajax": {
                    "url": "/ReportCentrePlus/GetStoresTree",
                    "type": "POST",
                    "dataType": "json",
                    "contentType": "application/json charset=utf-8"
                }
            },
            checkbox: {
                real_checkboxes: true,
                checked_parent_open: true
            },
            plugins: ["themes", "json_data", "ui", "checkbox"]
        });
    };

    function fillsalesmantree() {
        $("#salesmanlist").jstree({
            json_data: {
                "ajax": {
                    "url": "/ReportCentrePlus/GetSalesmanTree",
                    "type": "POST",
                    "dataType": "json",
                    "contentType": "application/json charset=utf-8"
                }
            },
            checkbox: {
                real_checkboxes: true,
                checked_parent_open: true
            },
            plugins: ["themes", "json_data", "ui", "checkbox"]
        });
    };

    function fillaccgroups(maccgroup) {
        $("#accgroupslist").jstree({
            json_data: {
                "ajax": {
                    "url": "/ReportCentrePlus/GetAccGroupsTree?maccgroup=" + maccgroup,
                    "type": "POST",
                    "dataType": "json",
                    "contentType": "application/json charset=utf-8"
                }
            },
            checkbox: {
                real_checkboxes: true,
                checked_parent_open: true
            },
            plugins: ["themes", "json_data", "ui", "checkbox"]
        });
    };

    function StringToArray(mstr) {
        var myStockSerialArray = [];
        var texttocheck = mstr;
        var texttocheck2 = texttocheck.replace(/&nbsp;/g, '')
        var texttocheck3 = texttocheck2.split(',');
        var i;
        for (i = 0; i < texttocheck3.length; ++i) {
            myStockSerialArray.push(texttocheck3[i]);
        }
        return myStockSerialArray;
    }
</script>

<div class="modal-content" style="width:1000px;padding-bottom:0px;">
    <div class="modal-header" id="headerdiv" style="background-color:#cccccc;padding-top:7px;">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title" id="headercaption"><b>Parameters</b></h4>
    </div>
    <div class="modal-body" style="padding-top:-15px;padding-top:5px;">
        <div class="form-horizontal" id="paramaindiv" style="min-height:350px;">
            <div class="tab">
                <button class="tablinks" id="xaccounts" style="width:90px;" onclick="openTab(event, 'tabaccounts')">Accounts</button>
                <button class="tablinks" id="xitems" style="width:90px;" onclick="openTab(event, 'tabitems')">Items</button>
                <button class="tablinks" id="xtypes" style="width:90px;" onclick="openTab(event, 'tabtypes')">Types</button>
                <button class="tablinks" id="xgeo" style="width:90px;" onclick="openTab(event, 'tabgeo')">Geo</button>
                <button class="tablinks" id="xlocation" style="width:90px;" onclick="openTab(event, 'tablocation')">Location</button>
                <button class="tablinks" id="xtax" style="width:90px;" onclick="openTab(event, 'tabtax')">Tax</button>
                <button class="tablinks" id="xemployee" style="width:120px;" onclick="openTab(event, 'tabemp')">Employee/User</button>
                <button class="tablinks" id="xmachines" style="width:90px;" onclick="openTab(event, 'tabmc')">Machines</button>
                <button class="tablinks" id="xqcprocess" style="width:90px;" onclick="openTab(event, 'tabqc')">QC/Process</button>
                <button class="tablinks" id="xudf" style="width:90px;" onclick="openTab(event, 'tabudf')">UDF</button>
            </div>
            <div id="tabaccounts" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                @*@Html.Partial("ReportAccounts", Model)*@
                <div class="row" style="margin-top:5px;">
                    <div id="ReportAccountDiv">
                        @Html.Partial("ReportAccounts", Model)
                    </div>
                </div>
            </div>
            <div id="tabitems" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div id="ReportItemsDiv">
                        @Html.Partial("ReportItems", Model)
                    </div>
                </div>
            </div>
            <div id="tabsalesman" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isbrokerdiv">
                                <input type="checkbox" id="isbroker" name="isbroker" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">Broker:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="brokerlistdiv" style="overflow-y:scroll;min-height:175px;max-height:175px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "brokerlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="issalesmandiv">
                                <input type="checkbox" id="issalesman" name="issalesman" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">Salesman:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="salesmanlist" style="width:400px;overflow-y:scroll;min-height:375px;max-height:375px;padding:10px;font-size:12px;border:solid 1px;">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-8">
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="expandsalesman">Expand All</button>
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="closesalesman">Close All</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabtypes" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="ismaintypediv">
                                <input type="checkbox" id="ismaintype" name="ismaintype" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Main Category:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="mainlistdiv" style="overflow-y:scroll;min-height:175px;max-height:175px;height:175px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "mainlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="issubtypediv">
                                <input type="checkbox" id="issubtype" name="issubtype" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Sub-Category:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="subtypelistdiv" style="overflow-y:scroll;height:200px;min-height:200px;max-height:200px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "subtypelist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="istypesdiv">
                                <input type="checkbox" id="istypes" name="istypes" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-5 control-label">Transaction Types:</label>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-6" style="width:450px;">
                                <div id="typeslist" style="width:400px;overflow-y:scroll;min-height:375px;max-height:375px;padding:10px;font-size:12px;border:solid 1px;">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-8">
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="expandtypes">Expand All</button>
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="closetypes">Close All</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabgeo" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="iscountrydiv">
                                <input type="checkbox" id="iscountry" name="iscountry" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">Country:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="countrylistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "countrylist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isstatediv">
                                <input type="checkbox" id="isstate" name="isstate" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">States:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="statelistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "statelist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="iscitydiv">
                                <input type="checkbox" id="iscity" name="iscity" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">City:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="citylistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "citylist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isareadiv">
                                <input type="checkbox" id="isarea" name="isarea" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Areas:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="arealistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "arealist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tablocation" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="iswarehousediv">
                                <input type="checkbox" id="iswarehouse" name="iswarehouse" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Warehouse/Location:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="warehousediv" style="overflow-y:scroll;min-height:200px;max-height:200px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "warehouselist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isbindiv">
                                <input type="checkbox" id="isbin" name="isbin" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">BIN:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="binlistdiv" style="overflow-y:scroll;min-height:175px;max-height:175px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "binlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isstoresdiv">
                                <input type="checkbox" id="isstores" name="isstores" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">Stores:</label>
                            <div class="col-sm-6" id="xid" style="width:450px;">
                                <div id="storeslist" style="width:400px;overflow-y:scroll;min-height:375px;max-height:375px;padding:10px;font-size:12px;border:solid 1px;">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-8">
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="expandstores">Expand All</button>
                                <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="closestores">Close All</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabtax" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="istaxdiv">
                                <input type="checkbox" id="istax" name="istax" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-2 control-label">Tax:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="taxlistdiv" style="overflow-y:scroll;min-height:390px;max-height:390px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "taxist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="ishsndiv">
                                <input type="checkbox" id="ishsn" name="ishsn" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">HSN:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="hsnlistdiv" style="overflow-y:scroll;min-height:390px;max-height:390px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "hsnlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabemp" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div id="ReportEmpDiv">
                        @Html.Partial("ReportEmployee", Model)
                    </div>
                </div>
            </div>
            <div id="tabmc" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="ismccatdiv">
                                <input type="checkbox" id="ismccat" name="ismccat" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">M/C Category:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="mccatlistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "mccatlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="ismctypediv">
                                <input type="checkbox" id="ismctype" name="ismctype" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">M/C Type:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="mctypelistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "mctypelist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="ismachinediv">
                                <input type="checkbox" id="ismachine" name="ismachine" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Machines:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="machinelistdiv" style="overflow-y:scroll;min-height:410px;max-height:410px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "machinelist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabqc" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isqctypediv">
                                <input type="checkbox" id="isqctype" name="isqctype" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">QC Para Type:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="qctypelistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "qctypelist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isqccatdiv">
                                <input type="checkbox" id="isqccat" name="isqccat" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-4 control-label">QC Test Category:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="qccatlistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "qccatlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6" style="width:450px;">
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isqctestdiv">
                                <input type="checkbox" id="isqctest" name="isqctest" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">QC Tests:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="qctestlistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "qctestlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isprocessdiv">
                                <input type="checkbox" id="isprocess" name="isprocess" style="width:17px;height:17px;" />
                            </div>
                            <label class="col-sm-3 control-label">Process:</label>
                            <div class="col-sm-6" style="width:450px;">
                                <div id="processlistdiv" style="overflow-y:scroll;min-height:190px;max-height:190px;padding:10px;font-size:12px;border:solid 1px;">
                                    @Html.DropDownListFor(x => x.Item, DropdownHelper.EmptyList(), new { @Multiple = "multiple", @Id = "processlist", @style = "height:100%;width:100%" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="tabudf" class="tabcontent" style="height:450px;padding:0px 0px 0px 30px;">
                <div class="row" style="margin-top:5px;">
                    <br />
                    <div id="ReportAddOnDiv">
                        @Html.Partial("ReportAddOnGrid", Model)
                    </div>
                </div>
            </div>
            <script>
                function openTab(evt, tabName) {
                    var i, tabcontent, tablinks;
                    tabcontent = document.getElementsByClassName("tabcontent");
                    for (i = 0; i < tabcontent.length; i++) {
                        tabcontent[i].style.display = "none";
                    }
                    tablinks = document.getElementsByClassName("tablinks");
                    for (i = 0; i < tablinks.length; i++) {
                        tablinks[i].className = tablinks[i].className.replace(" active", "");
                    }
                    document.getElementById(tabName).style.display = "block";
                    evt.currentTarget.className += " active";
                }
                document.getElementById("xudf").click();
            </script>
        </div>
    </div>
    <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;padding-right: 5px;padding-left: 5px;">
        <div class="form-group">
            <div class="col-sm-1" style="margin-top:5px;">
                <a id="btnopnFormat" href=""><i class="fa fa-edit" style="color:blue;"></i> Views:</a>
            </div>
            @*<label class="col-sm-1 control-label" style="margin-top:5px;">View Formats:</label>*@
            <div class="col-sm-6">
                @Html.DropDownListFor(x => x.ViewCode, DropdownHelper.EmptyList(), new { @class = "form-control", @Id = "viewcode", @Name = "viewcode", @style = "width:100%;text-align:left;font-weight:bolder;color:black;", @Value = Model.ViewCode })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-1" style="padding-left:20px;width:30px;" id="isdefaultdiv">
                <input type="checkbox" id="isdefault" name="isdefault" style="margin-top:2px; width:17px;height:17px;" />
            </div>
            <label class="col-sm-2 control-label" style="text-align:left;padding-top:2px;">Set as Default</label>
        </div>
        <div class="form-group" style="margin-top:-3px;">
            <button type="button" class="btn btn-success" data-dismiss="modal" style="font-family:Verdana, Geneva, Tahoma, sans-serif" id="submit"><i class="fa fa-save"></i>&nbsp;&nbsp;Save Para</button>
            <button data-dismiss="modal" class="btn btn-danger" type="button"><i class="fa fa-arrow-left"></i>&nbsp;&nbsp;Close</button>
        </div>
    </div>
</div>
<input type="hidden" id="hdnitemgrouptreearray" />
<input type="hidden" id="hdnaccgrouptreearray" />
<input type="hidden" id="hdnstorestreearray" />
<input type="hidden" id="hdntypestreearray" />
<input type="hidden" id="hdnsalesmantreearray" />
<input type="hidden" id="hdnsubcodeof" />
<input type="hidden" id="hdnitemarray" />
<input type="hidden" id="hdnaccarray" />
<input type="hidden" id="hdnitemcatarray" />
<input type="hidden" id="hdnprocessarray" />
<input type="hidden" id="hdnareaarray" />
<input type="hidden" id="hdnbrokerarray" />
<input type="hidden" id="hdncityarray" />
<input type="hidden" id="hdnstatearray" />
<input type="hidden" id="hdncategory" />
<input type="hidden" id="hdnaccheads" />
<input type="hidden" id="hdncostcent" />
<input type="hidden" id="hdnprofitcent" />
<input type="hidden" id="hdnbroker" />
<input type="hidden" id="hdnunits" />
<input type="hidden" id="hdnmaintype" />
<input type="hidden" id="hdnsubtype" />
<input type="hidden" id="hdncountry" />
<input type="hidden" id="hdnwarehouse" />
<input type="hidden" id="hdnbin" />
<input type="hidden" id="hdntaxmas" />
<input type="hidden" id="hdngsttype" />
<input type="hidden" id="hdnhsn" />
<input type="hidden" id="hdngrade" />
<input type="hidden" id="hdnuser" />
<input type="hidden" id="hdnempcat" />
<input type="hidden" id="hdndept" />
<input type="hidden" id="hdnpost" />
<input type="hidden" id="hdnemployee" />
<input type="hidden" id="hdnmccat" />
<input type="hidden" id="hdnmctype" />
<input type="hidden" id="hdnmachines" />
<input type="hidden" id="hdnparatype" />
<input type="hidden" id="hdntestcat" />
<input type="hidden" id="hdntests" />