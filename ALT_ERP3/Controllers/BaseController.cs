using ALT_ERP3.Areas.Accounts.Models;
using ALT_ERP3.Areas.DashBoard.Models;
using ALT_ERP3.Areas.Logistics.Controllers;
using ALT_ERP3.Areas.Logistics.Models;
using ALT_ERP3.Models;
using Common;
using CrystalDecisions.CrystalReports.Engine;
using EntitiModel;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Microsoft.Reporting.WebForms;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Helpers;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace ALT_ERP3.Controllers
{
    public class BaseController : Controller
    {
        public ALT_ERP21Entities ctxTFAT = new ALT_ERP21Entities();
        public string mbranchcode = (System.Web.HttpContext.Current.Session["BranchCode"] ?? "HO0000").ToString();
        public string muserid = (System.Web.HttpContext.Current.Session["UserId"] ?? "Super").ToString();
        public string mcompcode = (System.Web.HttpContext.Current.Session["CompCode"] ?? "100").ToString();
        public string mcompname = (System.Web.HttpContext.Current.Session["CompName"] ?? " ").ToString();
        public string mperiod = (System.Web.HttpContext.Current.Session["FPerd"] ?? "").ToString();
        public int mlocationcode = Convert.ToInt32(System.Web.HttpContext.Current.Session["LocationCode"] ?? 100001);
        public string mDocString = (System.Web.HttpContext.Current.Session["DocString"] ?? "").ToString();
        public string mlastmodule = "";
        public string EmialLogReportName = "";
        public string EmialLogPersonName = "";
        public string EmialLogHeader = "";
        public string EmialLogAutoRemark = "";
        //Regex Emailregex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");

        #region parameters	
        public static string ppara01 = "";
        public static string ppara02 = "";
        public static string ppara03 = "";
        public static string ppara04 = "";
        public static string ppara05 = "";
        public static string ppara06 = "";
        public static string ppara07 = "";
        public static string ppara08 = "";
        public static string ppara09 = "";
        public static string ppara10 = "";
        public static string ppara11 = "";
        public static string ppara12 = "";
        public static string ppara13 = "";
        public static string ppara14 = "";
        public static string ppara15 = "";
        public static string ppara16 = "";
        public static string ppara17 = "";
        public static string ppara18 = "";
        public static string ppara19 = "";
        public static string ppara20 = "";
        public static string ppara21 = "";
        public static string ppara22 = "";
        public static string ppara23 = "";
        public static string ppara24 = "";
        public static string mpara = "";
        #endregion parameters

        #region Notification

        #region Common Function

        public string GenerateNotificationCode()
        {
            var LastCode = ctxTFAT.tfatNotification.OrderByDescending(x => x.Srl).Select(x => x.Srl).FirstOrDefault();
            if (String.IsNullOrEmpty(LastCode))
            {
                LastCode = "000001";
            }
            else
            {
                int NewCode = Convert.ToInt32(LastCode) + 1;
                LastCode = NewCode.ToString("D6");
            }
            return LastCode;
        }

        public void SendNotificationMail(string mEmail, string mSubject, string mMsg, string EmailLogHeader, string LogRemark)
        {
            int mid = 0;
            try
            {
                string msmtppassword = "";
                string msmtphost = "";
                int msmtpport = 25;
                string msmtpuser = "";
                string mFromEmail = "";
                mEmail = mEmail.Trim();
                var mEmailInfo = ctxTFAT.TfatComp.Where(z => z.Code == mcompcode).Select(x => new
                {
                    x.SMTPUser,
                    x.SMTPServer,
                    x.SMTPPassword,
                    x.SMTPPort,
                    x.CCTo,
                    x.BCCTo,
                    x.Email
                }).FirstOrDefault();
                if (mEmailInfo != null)
                {
                    msmtpuser = mEmailInfo.SMTPUser == null ? "" : mEmailInfo.SMTPUser.Trim();
                    msmtppassword = mEmailInfo.SMTPPassword == null ? "" : mEmailInfo.SMTPPassword.Trim();
                    msmtphost = mEmailInfo.SMTPServer == null ? "" : mEmailInfo.SMTPServer.Trim();
                    msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                    mFromEmail = (mEmailInfo.Email ?? "").Trim();
                }

                if (msmtpport != 587)
                {
                    msmtpport = 587;
                }
                MailMessage message = new MailMessage();

                message.From = new MailAddress(mFromEmail);
                mEmail = CutRightString(mEmail, 1, ";");
                mEmail = CutRightString(mEmail, 1, ",");
                message.To.Add(mEmail);
                message.Subject = mSubject;
                message.IsBodyHtml = true;
                message.BodyEncoding = System.Text.Encoding.UTF8;
                mMsg = mMsg.Replace("^~|", "<br>");
                if (mMsg.Contains("<html>") == false)
                {
                    mMsg = TextToHtml(mMsg);
                }
                message.Body = mMsg;
                message.Priority = MailPriority.High;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = msmtphost;
                smtp.Port = msmtpport;
                smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);

                smtp.EnableSsl = true;

                smtp.Send(message);
                mid = SaveEmailLog(mEmail, "", "", mSubject, mMsg, "", "", "", "", EmailLogHeader, LogRemark);

                //return Json(new { Status = "Success", Message = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update Emaillog Set sentStatus=0 where RecordKey=" + mid);
                //return Json(new { Status = "Error", Message = smtex.InnerException }, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region Consignment

        public string GetConsignmentDetails(LRMaster lRMaster)
        {
            string Returnstring = "";
            Returnstring = "<br>Consignment No : " + lRMaster.LrNo + " .<br>Declare Value :" + (lRMaster.DecVal ?? 0) + " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Branch).Select(x => x.Name).FirstOrDefault() + " .<br>Consigment Book Date Is " + lRMaster.BookDate.ToShortDateString() + " .<br>Consigner : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name).FirstOrDefault() + " .<br>Consignee : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name).FirstOrDefault() + " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name).FirstOrDefault() + " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name).FirstOrDefault() + " .";
            return Returnstring;
        }

        public void OLD_ConsignmentNotification(LRMaster lRMaster)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string ConsignemntDetails = GetConsignmentDetails(lRMaster);

                //Back Days
                if (tfatAlt.CDBDN == true || tfatAlt.CDBDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays((tfatAlt.CDBDDays) * (-1));
                    if (lRMaster.BookDate < CurrentDate)
                    {
                        if (tfatAlt.CDBDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.CDBDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.CDBDSelf)
                                {
                                    var Userlist = tfatAlt.CDBDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.CDBDU))
                                {
                                    foreach (var item in tfatAlt.CDBDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDBDP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.CDBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.CDBDP;
                                    tfatNotification.DocType = "LR000";
                                    tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                    tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Back Date Notification!";
                                    if (tfatAlt.CDBDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.CDBDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.CDBDSelf)
                                    {
                                        var Userlist = tfatAlt.CDBDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.CDBDU))
                                    {
                                        foreach (var item in tfatAlt.CDBDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDBDP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.CDBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDBDP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.CDBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.CDBDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Back Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Back Date Notification " + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Consignment Back Date Notification!!!";
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.CDBDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.CDBDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.CDBDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }

                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Forward Days
                if (tfatAlt.CDFDN == true || tfatAlt.CDFDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays(tfatAlt.CDFDDays);
                    if (lRMaster.BookDate > CurrentDate)
                    {
                        if (tfatAlt.CDFDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.CDFDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.CDFDSelf)
                                {
                                    var Userlist = tfatAlt.CDFDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.CDFDU))
                                {
                                    foreach (var item in tfatAlt.CDFDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDFDP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.CDFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.CDFDP;
                                    tfatNotification.DocType = "LR000";
                                    tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                    tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Forward Date Notification!";
                                    if (tfatAlt.CDFDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.CDFDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.CDFDSelf)
                                    {
                                        var Userlist = tfatAlt.CDFDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.CDFDU))
                                    {
                                        foreach (var item in tfatAlt.CDFDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDFDP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.CDFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDFDP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.CDFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.CDFDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Forward Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Forward Date Notification " + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Consignment Forward Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.CDFDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.CDFDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.CDFDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.CDFDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }

                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Declare Value
                if (tfatAlt.CDDVN == true || tfatAlt.CDDVE == true)
                {
                    if (lRMaster.DecVal >= tfatAlt.CDDVDeclareVal)
                    {
                        if (tfatAlt.CDDVN)
                        {

                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.CDDVBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.CDDVSelf)
                                {
                                    var Userlist = tfatAlt.CDDVU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.CDDVU))
                                {
                                    foreach (var item in tfatAlt.CDDVU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDDVP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Declare Value Notification!";
                                        if (tfatAlt.CDDVP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.CDDVP;
                                    tfatNotification.DocType = "LR000";
                                    tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                    tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Declare Value Notification!";
                                    if (tfatAlt.CDDVP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.CDDVBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.CDDVSelf)
                                    {
                                        var Userlist = tfatAlt.CDDVU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.CDDVU))
                                    {
                                        foreach (var item in tfatAlt.CDDVU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDDVP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Declare Value Notification!";
                                            if (tfatAlt.CDDVP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDDVP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Declare Value Notification!";
                                        if (tfatAlt.CDDVP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVDeclareVal + "...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.CDDVE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Declare Value Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Declare Value Notification " + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Consignment Declare Value Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.CDDVU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.CDDVU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.CDDVU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.CDDVSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Declare Value Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Description
                if (tfatAlt.CDDSN == true || tfatAlt.CDDSE == true)
                {
                    if (!string.IsNullOrEmpty(tfatAlt.CDDSDescription))
                    {
                        var Descriptionlist = tfatAlt.CDDSDescription.Split(',').ToList();
                        int index = Descriptionlist.FindIndex(a => a == lRMaster.DescrType);
                        if (index >= 0)
                        {
                            if (tfatAlt.CDDSN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.CDDSBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.CDDSSelf)
                                    {
                                        var Userlist = tfatAlt.CDDSU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.CDDSU))
                                    {
                                        foreach (var item in tfatAlt.CDDSU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDDSP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Description Notification!";
                                            if (tfatAlt.CDDSP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDDSP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Description Notification!";
                                        if (tfatAlt.CDDSP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.CDDSBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.CDDSSelf)
                                        {
                                            var Userlist = tfatAlt.CDDSU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.CDDSU))
                                        {
                                            foreach (var item in tfatAlt.CDDSU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.CDDSP;
                                                tfatNotification.DocType = "LR000";
                                                tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                                tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Description Notification!";
                                                if (tfatAlt.CDDSP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDDSP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Description Notification!";
                                            if (tfatAlt.CDDSP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.CDDSE)
                            {
                                string Body = "";
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Description Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Description Notification " + "</b></span></p>";
                                Body += "<br/>";
                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                Body += "</html>";
                                string Subject = "Consignment Description Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.CDDSU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.CDDSU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.CDDSU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.CDDSSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Description Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }
                }

                //Declare Value (Eway Bill)
                if (tfatAlt.CDDVEN == true || tfatAlt.CDDVEE == true)
                {
                    if (lRMaster.DecVal >= tfatAlt.CDDVEDeclareVal)
                    {
                        if (string.IsNullOrEmpty(lRMaster.EwayBill))
                        {
                            if (tfatAlt.CDDVEN)
                            {

                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.CDDVEBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.CDDVESelf)
                                    {
                                        var Userlist = tfatAlt.CDDVEU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.CDDVEU))
                                    {
                                        foreach (var item in tfatAlt.CDDVEU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDDVEP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Eway Bill Notification!";
                                            if (tfatAlt.CDDVEP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.CDDVEP;
                                        tfatNotification.DocType = "LR000";
                                        tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                        tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Eway Bill Notification!";
                                        if (tfatAlt.CDDVEP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.CDDVEBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.CDDVESelf)
                                        {
                                            var Userlist = tfatAlt.CDDVEU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.CDDVEU))
                                        {
                                            foreach (var item in tfatAlt.CDDVEU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.CDDVEP;
                                                tfatNotification.DocType = "LR000";
                                                tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                                tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Eway Bill Notification!";
                                                if (tfatAlt.CDDVEP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.CDDVEP;
                                            tfatNotification.DocType = "LR000";
                                            tfatNotification.DocNo = lRMaster.LrNo.ToString();
                                            tfatNotification.Parentkey = lRMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lRMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Eway Bill Notification!";
                                            if (tfatAlt.CDDVEP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Consignment Book by Declare Value is Greater Than " + tfatAlt.CDDVEDeclareVal + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.CDDVEE)
                            {
                                string Body = "";
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Eway Bill Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Eway Bill Notification" + "</b></span></p>";
                                Body += "<br/>";
                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                Body += "</html>";
                                string Subject = "Consignment Eway Bill Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.CDDVEU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.CDDVEU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.CDDVEU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.CDDVESelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Eway Bill Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }
                }
            }
        }

        public void ConsignmentNotification(LRMaster lRMaster)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "CONSIGNMENT").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string ConsignemntDetails = GetConsignmentDetails(lRMaster);

                #region Back Days Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Back Days" &&
                    lRMaster.BookDate < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails : "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails : "<span>Consignment Book Using Back Date Selected...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Back Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Back Date Notification " + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Consignment Back Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Back Days Notification

                #region Forward Days Notification

                CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Forward Days" &&
                     lRMaster.BookDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails : "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails : "<span>Consignment Book Using Forward Date Selected...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Forward Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Forward Date Notification " + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Consignment Forward Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Forward Days Notification

                #region Declare Value Notification 

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Declare Value" &&
                     lRMaster.DecVal >= Convert.ToDecimal(x.Param1) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Declare Value Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + ConsignemntDetails : "<span>Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Declare Value Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + ConsignemntDetails : "<span>Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Declare Value Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Declare Value Notification " + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Consignment Declare Value Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Declare Value Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Declare Value Notification

                #region Description Notification 

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Description" &&
                     x.Param1 != null && x.Param1.Split(',').Any(code => code == lRMaster.DescrType) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Description Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(descibe => descibe.Code == lRMaster.DescrType).Select(descibe => descibe.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails : "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(descibe => descibe.Code == lRMaster.DescrType).Select(descibe => descibe.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Description Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(descibe => descibe.Code == lRMaster.DescrType).Select(descibe => descibe.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails : "<span>Consignment Book with Description Is " + ctxTFAT.DescriptionMaster.Where(descibe => descibe.Code == lRMaster.DescrType).Select(descibe => descibe.Description).FirstOrDefault() + "...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Description Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Description Notification " + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Consignment Description Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Description Notification. ", "Auto Mail Notification");
                    }
                    #endregion

                }

                #endregion Description Notification

                #region Eway-Bill Declare Value Notification 

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Eway Bill" &&
                     lRMaster.DecVal >= Convert.ToDecimal(x.Param1) &&
                     string.IsNullOrEmpty(lRMaster.EwayBill) == true &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Eway Bill Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails : "<span>Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LR000",
                                               DocNo = lRMaster.LrNo.ToString(),
                                               Parentkey = lRMaster.ParentKey.ToString(),
                                               Tablekey = lRMaster.TableKey.ToString(),
                                               Describe = "Eway Bill Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails : "<span>Consignment Book by Declare Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + " and Eway Bill No Not Entered...!</span>" + ConsignemntDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Consignment Eway Bill Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Consignment Eway Bill Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Consignment Eway Bill Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Eway Bill Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Eway-Bill Declare Value Notification
            }
        }

        #endregion

        #region Lorry Challan

        public string GetLorryChallanDetails(LCMaster lCMaster)
        {
            string Returnstring = "";
            Returnstring = "<br>Lorry Challan No : " + lCMaster.LCno + " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.Branch).Select(x => x.Name).FirstOrDefault() + " .<br>Lorry Challan Date Is " + lCMaster.Date.ToShortDateString() + " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.FromBranch).Select(x => x.Name).FirstOrDefault() + " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.ToBranch).Select(x => x.Name).FirstOrDefault() + " .";
            return Returnstring;
        }

        public void OLD_LorryChallanNotification(LCMaster lCMaster)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string LorryChallanDetails = GetLorryChallanDetails(lCMaster);

                //Back Days
                if (tfatAlt.LCBDN == true || tfatAlt.LCBDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays((tfatAlt.LCBDDays) * (-1));
                    if (lCMaster.Date < CurrentDate)
                    {
                        if (tfatAlt.LCBDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.LCBDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.LCBDSelf)
                                {
                                    var Userlist = tfatAlt.LCBDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.LCBDU))
                                {
                                    foreach (var item in tfatAlt.LCBDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.LCBDP;
                                        tfatNotification.DocType = "LC000";
                                        tfatNotification.DocNo = lCMaster.LCno.ToString();
                                        tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.LCBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.LCBDP;
                                    tfatNotification.DocType = "LC000";
                                    tfatNotification.DocNo = lCMaster.LCno.ToString();
                                    tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Back Date Notification!";
                                    if (tfatAlt.LCBDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.LCBDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.LCBDSelf)
                                    {
                                        var Userlist = tfatAlt.LCBDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.LCBDU))
                                    {
                                        foreach (var item in tfatAlt.LCBDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.LCBDP;
                                            tfatNotification.DocType = "LC000";
                                            tfatNotification.DocNo = lCMaster.LCno.ToString();
                                            tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.LCBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.LCBDP;
                                        tfatNotification.DocType = "LC000";
                                        tfatNotification.DocNo = lCMaster.LCno.ToString();
                                        tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.LCBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.LCBDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Lorry Challan Back Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Lorry Challan Back Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">LC No: <b>" + lCMaster.LCno + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + lCMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Total Qty: <b>" + lCMaster.TotalQty + "</b></span></p>";
                            if (!String.IsNullOrEmpty(lCMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + lCMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Lorry Challan Back Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.LCBDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.LCBDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.LCBDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.LCBDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }

                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Forward Days
                if (tfatAlt.LCFDN == true || tfatAlt.LCFDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays(tfatAlt.LCFDDays);
                    if (lCMaster.Date > CurrentDate)
                    {
                        if (tfatAlt.LCFDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.LCFDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.LCFDSelf)
                                {
                                    var Userlist = tfatAlt.LCFDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.LCFDU))
                                {
                                    foreach (var item in tfatAlt.LCFDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.LCFDP;
                                        tfatNotification.DocType = "LC000";
                                        tfatNotification.DocNo = lCMaster.LCno.ToString();
                                        tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.LCFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.LCFDP;
                                    tfatNotification.DocType = "LC000";
                                    tfatNotification.DocNo = lCMaster.LCno.ToString();
                                    tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Forward Date Notification!";
                                    if (tfatAlt.LCFDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.LCFDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.LCFDSelf)
                                    {
                                        var Userlist = tfatAlt.LCFDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.LCFDU))
                                    {
                                        foreach (var item in tfatAlt.LCFDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.LCFDP;
                                            tfatNotification.DocType = "LC000";
                                            tfatNotification.DocNo = lCMaster.LCno.ToString();
                                            tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.LCFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.LCFDP;
                                        tfatNotification.DocType = "LC000";
                                        tfatNotification.DocNo = lCMaster.LCno.ToString();
                                        tfatNotification.Parentkey = lCMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = lCMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.LCFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.LCFDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Lorry Challan Forward Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Lorry Challan Forward Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">LC No: <b>" + lCMaster.LCno + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + lCMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Total Qty: <b>" + lCMaster.TotalQty + "</b></span></p>";
                            if (!String.IsNullOrEmpty(lCMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + lCMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Lorry Challan Forward Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.LCFDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.LCFDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.LCFDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.LCFDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }

                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }
            }
        }

        public void LorryChallanNotification(LCMaster lCMaster)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "LORRY CHALLAN").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string LorryChallanDetails = GetLorryChallanDetails(lCMaster);

                #region Back Days Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Back Days" &&
                    lCMaster.Date < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LC000",
                                               DocNo = lCMaster.LCno.ToString(),
                                               Parentkey = lCMaster.ParentKey.ToString(),
                                               Tablekey = lCMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails : "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LC000",
                                               DocNo = lCMaster.LCno.ToString(),
                                               Parentkey = lCMaster.ParentKey.ToString(),
                                               Tablekey = lCMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails : "<span>Lorry Challan Date Using Back Date Selected...!</span>" + LorryChallanDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Lorry Challan Back Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Lorry Challan Back Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LC No: <b>" + lCMaster.LCno + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + lCMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Total Qty: <b>" + lCMaster.TotalQty + "</b></span></p>";
                        if (!String.IsNullOrEmpty(lCMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + lCMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Lorry Challan Back Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Back Days Notification

                #region Forward Days Notification

                CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Forward Days" &&
                     lCMaster.Date > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LC000",
                                               DocNo = lCMaster.LCno.ToString(),
                                               Parentkey = lCMaster.ParentKey.ToString(),
                                               Tablekey = lCMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails : "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "LC000",
                                               DocNo = lCMaster.LCno.ToString(),
                                               Parentkey = lCMaster.ParentKey.ToString(),
                                               Tablekey = lCMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails : "<span>Lorry Challan Date Using Forward Date Selected...!</span>" + LorryChallanDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Lorry Challan Forward Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Lorry Challan Forward Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">LC No: <b>" + lCMaster.LCno + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + lCMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lCMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Total Qty: <b>" + lCMaster.TotalQty + "</b></span></p>";
                        if (!String.IsNullOrEmpty(lCMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + lCMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Lorry Challan Forward Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Forward Days Notification

            }
        }

        #endregion

        #region Freight Femo

        public string GetFreightMemoDetails(FMMaster fMMaster)
        {
            string Returnstring = "";
            Returnstring = "<br>Freight Memo No : " + fMMaster.FmNo;
            Returnstring += " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.Branch).Select(x => x.Name).FirstOrDefault();
            Returnstring += " .<br>Freight Memo Date Is " + fMMaster.Date.ToShortDateString();
            Returnstring += " .<br>Vehicle Group :" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault();
            Returnstring += " .<br>Vehicle Category :" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault();
            if (fMMaster.VehicleStatus == "100001")
            {
                Returnstring += " .<br>Vehicle NO :" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                Returnstring += " .<br>Driver :" + fMMaster.Driver;
            }
            else
            {
                Returnstring += " .<br>Vehicle NO :" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                Returnstring += " .<br>Driver :" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault();
            }
            Returnstring += " .<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault();
            Returnstring += " .<br>Freight :" + fMMaster.Freight.ToString("F2");
            Returnstring += " .<br>Advance :" + fMMaster.Adv.ToString("F2");
            Returnstring += " .<br>Balance :" + fMMaster.Balance.ToString("F2");
            Returnstring += " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name).FirstOrDefault();
            Returnstring += " .<br>Via :" + fMMaster.SelectedRoute;
            Returnstring += " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name).FirstOrDefault();
            if (!String.IsNullOrEmpty(fMMaster.Remark))
            {
                Returnstring += " .<br>Remark :" + fMMaster.Remark + " .";
            }
            return Returnstring;
        }

        public void OLD_FreightMemoNotification(FMMaster fMMaster)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetFreightMemoDetails(fMMaster);

                //Back Days
                if (tfatAlt.FMBDN == true || tfatAlt.FMBDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays((tfatAlt.FMBDDays) * (-1));
                    if (fMMaster.Date < CurrentDate)
                    {
                        if (tfatAlt.FMBDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.FMBDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.FMBDSelf)
                                {
                                    var Userlist = tfatAlt.FMBDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.FMBDU))
                                {
                                    foreach (var item in tfatAlt.FMBDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMBDP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.FMBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.FMBDP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Back Date Notification!";
                                    if (tfatAlt.FMBDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.FMBDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.FMBDSelf)
                                    {
                                        var Userlist = tfatAlt.FMBDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.FMBDU))
                                    {
                                        foreach (var item in tfatAlt.FMBDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMBDP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.FMBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMBDP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.FMBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.FMBDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Back Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Back Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Freight Memo Back Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMBDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.FMBDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.FMBDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Forward Days
                if (tfatAlt.FMFDN == true || tfatAlt.FMFDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays(tfatAlt.FMFDDays);
                    if (fMMaster.Date > CurrentDate)
                    {
                        if (tfatAlt.FMFDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.FMFDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.FMFDSelf)
                                {
                                    var Userlist = tfatAlt.FMFDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.FMFDU))
                                {
                                    foreach (var item in tfatAlt.FMFDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMFDP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.FMFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.FMFDP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Forward Date Notification!";
                                    if (tfatAlt.FMFDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.FMFDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.FMFDSelf)
                                    {
                                        var Userlist = tfatAlt.FMFDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.FMFDU))
                                    {
                                        foreach (var item in tfatAlt.FMFDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMFDP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.FMFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMFDP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.FMFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.FMFDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Forward Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Forward Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Freight Memo Forward Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMFDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMFDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.FMFDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.FMFDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Driver Licence Expired
                if (tfatAlt.FMDLN == true || tfatAlt.FMDLE == true)
                {
                    if (fMMaster.VehicleStatus != "100001")
                    {
                        var DriverExpiredDate = ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate).FirstOrDefault();
                        if (DriverExpiredDate != null)
                        {
                            var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                            if (DriverExpiredDate < CurrentDate)
                            {
                                if (tfatAlt.FMDLN)
                                {
                                    //if branch is null means send notification to all branch
                                    if (string.IsNullOrEmpty(tfatAlt.FMDLBranch))
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.FMDLSelf)
                                        {
                                            var Userlist = tfatAlt.FMDLU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.FMDLU))
                                        {
                                            foreach (var item in tfatAlt.FMDLU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.FMDLP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Driver Licence Expired Notification!";
                                                if (tfatAlt.FMDLP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMDLP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Driver Licence Expired Notification!";
                                            if (tfatAlt.FMDLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                    else
                                    //Send Notification to particular branch only
                                    {
                                        var BranchNotiReq = 0;
                                        var Branchlist = tfatAlt.FMDLBranch.Split(',').ToList();
                                        BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                        if (BranchNotiReq >= 0)
                                        {
                                            bool SendToSelfNoti = false;
                                            if (tfatAlt.FMDLSelf)
                                            {
                                                var Userlist = tfatAlt.FMDLU.Split(',').ToList();
                                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                if (UserIndex < 0)
                                                {
                                                    SendToSelfNoti = true;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(tfatAlt.FMDLU))
                                            {
                                                foreach (var item in tfatAlt.FMDLU.Split(',').ToList())
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.FMDLP;
                                                    tfatNotification.DocType = "FM000";
                                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "Driver Licence Expired Notification!";
                                                    if (tfatAlt.FMDLP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                    }
                                                    tfatNotification.HtmlString = null;
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = item;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }

                                            if (SendToSelfNoti)
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.FMDLP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Driver Licence Expired Notification!";
                                                if (tfatAlt.FMDLP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault();
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = muserid;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                if (tfatAlt.FMDLE)
                                {
                                    string Body = "";
                                    Body = "<html>";
                                    Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Driver Licence Expired Notification!!!" + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                    Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Driver Licence Expired Notification" + "</b></span></p>";
                                    Body += "<br/>";
                                    Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                                    if (fMMaster.VehicleStatus == "100001")
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                                    }
                                    else
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver Licence Exp Date: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault() + "</b></span></p>";
                                    }
                                    Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    if (!String.IsNullOrEmpty(fMMaster.Remark))
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                                    }
                                    Body += "</html>";
                                    string Subject = "Driver Licence Expired Notification!!!";
                                    //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMDLU + "')<>0 and Email like '%@%'");
                                    string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMDLU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                    var Userlist = tfatAlt.FMDLU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0 && tfatAlt.FMDLSelf)
                                    {
                                        var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                        if (!string.IsNullOrEmpty(UserMailId))
                                        {
                                            if (UserMailId.Contains("@"))
                                            {
                                                SendTo += "," + UserMailId;
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(SendTo))
                                    {
                                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Driver Licence Expired Notification. ", "Auto Mail Notification");
                                    }
                                }
                            }
                        }
                    }
                }

                //Freight Memo
                if (tfatAlt.FMDAN == true || tfatAlt.FMDAE == true)
                {
                    if (fMMaster.Freight >= tfatAlt.FMDADocAmt)
                    {
                        if (tfatAlt.FMDAN)
                        {

                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.FMDABranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.FMDASelf)
                                {
                                    var Userlist = tfatAlt.FMDAU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.FMDAU))
                                {
                                    foreach (var item in tfatAlt.FMDAU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMDAP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Freight Value Notification!";
                                        if (tfatAlt.FMDAP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.FMDAP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Freight Value Notification!";
                                    if (tfatAlt.FMDAP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.FMDABranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.FMDASelf)
                                    {
                                        var Userlist = tfatAlt.FMDAU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.FMDAU))
                                    {
                                        foreach (var item in tfatAlt.FMDAU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMDAP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Freight Value Notification!";
                                            if (tfatAlt.FMDAP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMDAP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Freight Value Notification!";
                                        if (tfatAlt.FMDAP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Book by Freight Value is Greater Than " + tfatAlt.FMDADocAmt + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.FMDAE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Freight Value Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Freight Value Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver Licence Exp Date: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Freight Memo Freight Value Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMDAU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMDAU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.FMDAU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.FMDASelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Freight Value Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Broker
                if (tfatAlt.FMBRN == true || tfatAlt.FMBRE == true)
                {
                    if (!string.IsNullOrEmpty(tfatAlt.FMBRBroker))
                    {
                        var Descriptionlist = tfatAlt.FMBRBroker.Split(',').ToList();
                        int index = Descriptionlist.FindIndex(a => a == fMMaster.BroCode);
                        if (index >= 0)
                        {
                            if (tfatAlt.FMBRN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.FMBRBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.FMBRSelf)
                                    {
                                        var Userlist = tfatAlt.FMBRU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.FMBRU))
                                    {
                                        foreach (var item in tfatAlt.FMBRU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMBRP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Broker Notification!";
                                            if (tfatAlt.FMBRP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMBRP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Broker Notification!";
                                        if (tfatAlt.FMBRP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.FMBRBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.FMBRSelf)
                                        {
                                            var Userlist = tfatAlt.FMBRU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.FMBRU))
                                        {
                                            foreach (var item in tfatAlt.FMBRU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.FMBRP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Broker Notification!";
                                                if (tfatAlt.FMBRP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMBRP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Broker Notification!";
                                            if (tfatAlt.FMBRP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.FMBRE)
                            {
                                string Body = "";
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Broker Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Broker Notification" + "</b></span></p>";
                                Body += "<br/>";
                                Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                                if (fMMaster.VehicleStatus == "100001")
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                                }
                                else
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                }
                                Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                if (!String.IsNullOrEmpty(fMMaster.Remark))
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                                }
                                Body += "</html>";
                                string Subject = "Freight Memo Broker Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBRU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMBRU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.FMBRU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.FMBRSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Broker Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }
                }

                //Vehicle
                if (tfatAlt.FMVLN == true || tfatAlt.FMVLE == true)
                {
                    if (!string.IsNullOrEmpty(tfatAlt.FMVLVehicles))
                    {
                        var Descriptionlist = tfatAlt.FMVLVehicles.Split(',').ToList();
                        int index = Descriptionlist.FindIndex(a => a == fMMaster.TruckNo);
                        if (index >= 0)
                        {
                            if (tfatAlt.FMVLN)
                            {
                                string VehicleNo = "";
                                if (fMMaster.VehicleStatus == "100001")
                                {
                                    VehicleNo = ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                                }
                                else
                                {
                                    VehicleNo = ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                                }
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.FMVLBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.FMVLSelf)
                                    {
                                        var Userlist = tfatAlt.FMVLU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.FMVLU))
                                    {
                                        foreach (var item in tfatAlt.FMVLU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMVLP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Vehicle Notification!";
                                            if (tfatAlt.FMVLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.FMVLP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Vehicle Notification!";
                                        if (tfatAlt.FMVLP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.FMVLBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.FMVLSelf)
                                        {
                                            var Userlist = tfatAlt.FMVLU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.FMVLU))
                                        {
                                            foreach (var item in tfatAlt.FMVLU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.FMVLP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Vehicle Notification!";
                                                if (tfatAlt.FMVLP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.FMVLP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Vehicle Notification!";
                                            if (tfatAlt.FMVLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.FMVLE)
                            {
                                string Body = "";
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Vehicle Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Vehicle Notification" + "</b></span></p>";
                                Body += "<br/>";
                                Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                                if (fMMaster.VehicleStatus == "100001")
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                                }
                                else
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                }
                                Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                if (!String.IsNullOrEmpty(fMMaster.Remark))
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                                }
                                Body += "</html>";
                                string Subject = "Freight Memo Vehicle Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMVLU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.FMVLU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.FMVLU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.FMVLSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Vehicle Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }
                }

            }
        }

        public void FreightMemoNotification(FMMaster fMMaster)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "FREIGHT MEMO").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string FreightMemoDetails = GetFreightMemoDetails(fMMaster);

                #region Back Days Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Back Days" &&
                    fMMaster.Date < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails : "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails : "<span>Freight Memo Date Using Back Date Selected...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Back Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Back Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Freight Memo Back Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Back Days Notification

                #region Forward Days Notification

                CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Forward Days" &&
                     fMMaster.Date > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails : "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails : "<span>Freight Memo Date Using Forward Date Selected...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Forward Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Forward Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Freight Memo Forward Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Forward Days Notification

                #region Driver Lic Expired Notification

                CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                if (fMMaster.LicenceExpDate != null && fMMaster.LicenceExpDate < CurrentDate)
                {
                    Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Driver Lic" &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Driver Licence Expired Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + fMMaster.LicenceExpDate.Value.ToShortDateString() : "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + fMMaster.LicenceExpDate.Value.ToShortDateString(),
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Driver Licence Expired Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + fMMaster.LicenceExpDate.Value.ToShortDateString() : "<span>Driver Licence Expired...!</span>" + FreightMemoDetails + "<br>Driver Licence Exp Date : " + fMMaster.LicenceExpDate.Value.ToShortDateString(),
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Driver Licence Expired Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Driver Licence Expired Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver Licence Exp Date: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Driver Licence Expired Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email For Driver Licence Expired Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }
                }
                #endregion Driver Lic Expired Notification

                #region Doc Amount Notification

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Doc Amount" &&
                     fMMaster.Freight >= Convert.ToDecimal(x.Param1) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Freight Value Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book by Freight Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Freight Value Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book by Freight Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book by Freight Value is Greater Than " + string.Format("{0:0.00}", Convert.ToDecimal(x.Param1)) + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Freight Value Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Freight Value Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver Licence Exp Date: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.LicenceExpDate.Value.ToShortDateString()).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Freight Memo Freight Value Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Freight Value Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Doc Amount Notification

                #region Broker Notification

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Broker" &&
                     x.Param1 != null && x.Param1.Split(',').Any(code => code == fMMaster.BroCode) &&
                     fMMaster.Freight >= Convert.ToDecimal(x.Param2) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Broker Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(mast => mast.Code == fMMaster.BroCode).Select(mast => mast.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(mast => mast.Code == fMMaster.BroCode).Select(mast => mast.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Broker Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(mast => mast.Code == fMMaster.BroCode).Select(mast => mast.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book with Broker Is " + ctxTFAT.Master.Where(mast => mast.Code == fMMaster.BroCode).Select(mast => mast.Name).FirstOrDefault() + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Broker Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Broker Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Freight Memo Broker Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Broker Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Broker Notification

                #region Vehicle Notification

                Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Vehicle" &&
                     x.Param1 != null && x.Param1.Split(',').Any(code => code == fMMaster.TruckNo) &&
                     fMMaster.Freight >= Convert.ToDecimal(x.Param2) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    string VehicleNo = "";
                    if (fMMaster.VehicleStatus == "100001")
                    {
                        VehicleNo = ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    }
                    else
                    {
                        VehicleNo = ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    }
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Vehicle Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Vehicle Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails : "<span>Freight Memo Book with Vehicle Is " + VehicleNo + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Freight Memo Vehicle Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Freight Memo Vehicle Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Freight Memo Vehicle Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Vehicle Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Vehicle Notification
            }
        }

        #endregion

        #region Vehicle Activity

        public string GetVehicleBranchActivityDetails(FMROUTETable fMROUTETable)
        {
            FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
            string Returnstring = "";
            if (fMMaster != null)
            {
                Returnstring = "<br>Freight Memo No : " + fMMaster.FmNo;
                Returnstring += " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.Branch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Freight Memo Date Is " + fMMaster.Date.ToShortDateString();
                Returnstring += " .<br>Vehicle Group :" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault();
                Returnstring += " .<br>Vehicle Category :" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault();
                if (fMMaster.VehicleStatus == "100001")
                {
                    Returnstring += " .<br>Vehicle NO :" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    Returnstring += " .<br>Driver :" + fMMaster.Driver;
                }
                else
                {
                    Returnstring += " .<br>Vehicle NO :" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    Returnstring += " .<br>Driver :" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault();
                }
                Returnstring += " .<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Freight :" + fMMaster.Freight.ToString("F2");
                Returnstring += " .<br>Advance :" + fMMaster.Adv.ToString("F2");
                Returnstring += " .<br>Balance :" + fMMaster.Balance.ToString("F2");
                Returnstring += " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Via :" + fMMaster.SelectedRoute;
                Returnstring += " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name).FirstOrDefault();
                if (!String.IsNullOrEmpty(fMMaster.Remark))
                {
                    Returnstring += " .<br>Remark :" + fMMaster.Remark + " .";
                }
            }
            return Returnstring;
        }

        public string GetVehicleBranchActivityOverloadDetails(FMROUTETable fMROUTETable, int Payload, int LodedWeight)
        {
            FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
            string Returnstring = "";
            if (fMMaster != null)
            {
                Returnstring = "<br>Freight Memo No : " + fMMaster.FmNo;
                Returnstring += " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.Branch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Freight Memo Date Is " + fMMaster.Date.ToShortDateString();
                Returnstring += " .<br>Vehicle Group :" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault();
                Returnstring += " .<br>Vehicle Category :" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault();
                Returnstring += " .<br>Vehicle Paylaod :" + Payload;
                Returnstring += " .<br>Vehicle Loded Weight :" + LodedWeight;
                if (fMMaster.VehicleStatus == "100001")
                {
                    Returnstring += " .<br>Vehicle NO :" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    Returnstring += " .<br>Driver :" + fMMaster.Driver;
                }
                else
                {
                    Returnstring += " .<br>Vehicle NO :" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault();
                    Returnstring += " .<br>Driver :" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault();
                }
                Returnstring += " .<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Freight :" + fMMaster.Freight.ToString("F2");
                Returnstring += " .<br>Advance :" + fMMaster.Adv.ToString("F2");
                Returnstring += " .<br>Balance :" + fMMaster.Balance.ToString("F2");
                Returnstring += " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Via :" + fMMaster.SelectedRoute;
                Returnstring += " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name).FirstOrDefault();
                if (!String.IsNullOrEmpty(fMMaster.Remark))
                {
                    Returnstring += " .<br>Remark :" + fMMaster.Remark + " .";
                }
            }
            return Returnstring;
        }

        public void OLD_VehicleArrivalNotification(FMROUTETable fMROUTETable)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                //Arrival
                if (tfatAlt.VAARN == true || tfatAlt.VAARE == true)
                {
                    if (fMROUTETable.ArrivalReSchDate != null && string.IsNullOrEmpty(tfatAlt.VAARArrival) == false)
                    {
                        var ArrivalSchDate = fMROUTETable.ArrivalReSchDate.Value.ToShortDateString().Split('/');
                        var ArrivalSchTime = fMROUTETable.ArrivalReSchTime.Split(':');
                        DateTime ArrivalSchDateTime = new DateTime(Convert.ToInt32(ArrivalSchDate[2]), Convert.ToInt32(ArrivalSchDate[1]), Convert.ToInt32(ArrivalSchDate[0]), Convert.ToInt32(ArrivalSchTime[0]), Convert.ToInt32(ArrivalSchTime[1]), 00);

                        var ArrivalDate = fMROUTETable.ArrivalDate.Value.ToShortDateString().Split('/');
                        var ArrivalTime = fMROUTETable.ArrivalTime.Split(':');
                        DateTime ArrivalDateTime = new DateTime(Convert.ToInt32(ArrivalDate[2]), Convert.ToInt32(ArrivalDate[1]), Convert.ToInt32(ArrivalDate[0]), Convert.ToInt32(ArrivalTime[0]), Convert.ToInt32(ArrivalTime[1]), 00);

                        // Calculate time difference
                        TimeSpan timeDifference = ArrivalDateTime - ArrivalSchDateTime;

                        double GetTotalMinutes = 0;
                        var NotiFicationTime = tfatAlt.VAARArrival.Trim().Split(':');
                        GetTotalMinutes = (Convert.ToInt32(NotiFicationTime[0]) * 60) + (Convert.ToInt32(NotiFicationTime[1]));

                        //Compare with entered time
                        if (timeDifference.TotalMinutes > GetTotalMinutes)
                        {
                            FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                            //Set Notification
                            if (fMMaster != null)
                            {
                                if (tfatAlt.VAARN)
                                {
                                    //if branch is null means send notification to all branch
                                    if (string.IsNullOrEmpty(tfatAlt.VAARBranch))
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.VAARSelf)
                                        {
                                            var Userlist = tfatAlt.VAARU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(tfatAlt.VAARU))
                                        {
                                            foreach (var item in tfatAlt.VAARU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.VAARP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Late Arrival Notification!";
                                                if (tfatAlt.VAARP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.VAARP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Late Arrival Notification!";
                                            if (tfatAlt.VAARP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                    else
                                    //Send Notification to particular branch only
                                    {
                                        var BranchNotiReq = 0;
                                        var Branchlist = tfatAlt.VAARBranch.Split(',').ToList();
                                        BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                        if (BranchNotiReq >= 0)
                                        {
                                            bool SendToSelfNoti = false;
                                            if (tfatAlt.VAARSelf)
                                            {
                                                var Userlist = tfatAlt.VAARU.Split(',').ToList();
                                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                if (UserIndex < 0)
                                                {
                                                    SendToSelfNoti = true;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(tfatAlt.VAARU))
                                            {
                                                foreach (var item in tfatAlt.VAARU.Split(',').ToList())
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.VAARP;
                                                    tfatNotification.DocType = "FM000";
                                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "Late Arrival Notification!";
                                                    if (tfatAlt.VAARP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails;
                                                    }
                                                    tfatNotification.HtmlString = null;
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = item;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }

                                            if (SendToSelfNoti)
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.VAARP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Late Arrival Notification!";
                                                if (tfatAlt.VAARP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = muserid;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                if (tfatAlt.VAARE)
                                {
                                    string Body = "";
                                    Body = "<html>";
                                    Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Vehicle Late Arrival Notification!!!" + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                    Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Vehicle Late Arrival In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " At " + ArrivalDateTime + "</b></span></p>";
                                    Body += "<br/>";
                                    Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                                    if (fMMaster.VehicleStatus == "100001")
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                                    }
                                    else
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    }
                                    Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    if (!String.IsNullOrEmpty(fMMaster.Remark))
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                                    }
                                    Body += "</html>";
                                    string Subject = "Vehicle Late Arrival Notification!!!";
                                    //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.VAARU + "')<>0 and Email like '%@%'");
                                    string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.VAARU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                    var Userlist = tfatAlt.VAARU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0 && tfatAlt.VAARSelf)
                                    {
                                        var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                        if (!string.IsNullOrEmpty(UserMailId))
                                        {
                                            if (UserMailId.Contains("@"))
                                            {
                                                SendTo += "," + UserMailId;
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(SendTo))
                                    {
                                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Late Arrival Vehicle Notification. ", "Auto Mail Notification");
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }

        public void VehicleArrivalNotification(FMROUTETable fMROUTETable)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "VEHICLE ACTIVITY" && x.SubType == "Arrival" && string.IsNullOrEmpty(x.Param1) == false).ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                if (fMROUTETable.ArrivalReSchDate != null && fMROUTETable.ArrivalDate != null)
                {
                    string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                    var ArrivalSchDate = fMROUTETable.ArrivalReSchDate.Value.ToShortDateString().Split('/');
                    var ArrivalSchTime = fMROUTETable.ArrivalReSchTime.Split(':');
                    DateTime ArrivalSchDateTime = new DateTime(Convert.ToInt32(ArrivalSchDate[2]), Convert.ToInt32(ArrivalSchDate[1]), Convert.ToInt32(ArrivalSchDate[0]), Convert.ToInt32(ArrivalSchTime[0]), Convert.ToInt32(ArrivalSchTime[1]), 00);

                    var ArrivalDate = fMROUTETable.ArrivalDate.Value.ToShortDateString().Split('/');
                    var ArrivalTime = fMROUTETable.ArrivalTime.Split(':');
                    DateTime ArrivalDateTime = new DateTime(Convert.ToInt32(ArrivalDate[2]), Convert.ToInt32(ArrivalDate[1]), Convert.ToInt32(ArrivalDate[0]), Convert.ToInt32(ArrivalTime[0]), Convert.ToInt32(ArrivalTime[1]), 00);

                    // Calculate time difference
                    TimeSpan timeDifference = ArrivalDateTime - ArrivalSchDateTime;

                    #region Arrival Notification

                    var Notificationlist = tfatAlt.
                        Where(x => x.SubType == "Arrival" &&
                        timeDifference.TotalMinutes > (Convert.ToInt32(x.Param1.Trim().Split(':')[0]) * 60) + (Convert.ToInt32(x.Param1.Trim().Split(':')[1])) &&
                        ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                        .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();

                        #region Notification Send

                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Late Arrival Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails : "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Late Arrival Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + " ...!</span>" + FreightMemoDetails : "<span>Late Arrival Vehicle IN " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + ArrivalDateTime + "...!</span>" + FreightMemoDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Vehicle Late Arrival Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Vehicle Late Arrival In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " At " + ArrivalDateTime + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Vehicle Late Arrival Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email For Late Arrival Vehicle Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Arrival Notification
                }
            }
        }

        public void OLD_VehicleDispatchNotification(FMROUTETable fMROUTETable)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                //Arrival
                if (tfatAlt.VADSN == true || tfatAlt.VADSE == true)
                {
                    if (fMROUTETable.DispatchReSchDate != null && string.IsNullOrEmpty(tfatAlt.VADSDispatch) == false)
                    {
                        var DispatchSchDate = fMROUTETable.DispatchReSchDate.Value.ToShortDateString().Split('/');
                        var DispatchSchTime = fMROUTETable.DispatchReSchTime.Split(':');
                        DateTime DispatchSchDateTime = new DateTime(Convert.ToInt32(DispatchSchDate[2]), Convert.ToInt32(DispatchSchDate[1]), Convert.ToInt32(DispatchSchDate[0]), Convert.ToInt32(DispatchSchTime[0]), Convert.ToInt32(DispatchSchTime[1]), 00);

                        var DispatchDate = fMROUTETable.DispatchDate.Value.ToShortDateString().Split('/');
                        var DispatchTime = fMROUTETable.DispatchTime.Split(':');
                        DateTime DispatchDateTime = new DateTime(Convert.ToInt32(DispatchDate[2]), Convert.ToInt32(DispatchDate[1]), Convert.ToInt32(DispatchDate[0]), Convert.ToInt32(DispatchTime[0]), Convert.ToInt32(DispatchTime[1]), 00);

                        // Calculate time difference
                        TimeSpan timeDifference = DispatchDateTime - DispatchSchDateTime;

                        double GetTotalMinutes = 0;
                        var NotiFicationTime = tfatAlt.VADSDispatch.Trim().Split(':');
                        GetTotalMinutes = (Convert.ToInt32(NotiFicationTime[0]) * 60) + (Convert.ToInt32(NotiFicationTime[1]));

                        //Compare with entered time
                        if (timeDifference.TotalMinutes > GetTotalMinutes)
                        {
                            FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                            //Set Notification
                            if (fMMaster != null)
                            {
                                if (tfatAlt.VADSN)
                                {
                                    //if branch is null means send notification to all branch
                                    if (string.IsNullOrEmpty(tfatAlt.VADSBranch))
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.VADSSelf)
                                        {
                                            var Userlist = tfatAlt.VADSU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(tfatAlt.VADSU))
                                        {
                                            foreach (var item in tfatAlt.VADSU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.VADSP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Late Dispatch Notification!";
                                                if (tfatAlt.VADSP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.VADSP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Late Dispatch Notification!";
                                            if (tfatAlt.VADSP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                    else
                                    //Send Notification to particular branch only
                                    {
                                        var BranchNotiReq = 0;
                                        var Branchlist = tfatAlt.VADSBranch.Split(',').ToList();
                                        BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                        if (BranchNotiReq >= 0)
                                        {
                                            bool SendToSelfNoti = false;
                                            if (tfatAlt.VADSSelf)
                                            {
                                                var Userlist = tfatAlt.VADSU.Split(',').ToList();
                                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                if (UserIndex < 0)
                                                {
                                                    SendToSelfNoti = true;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(tfatAlt.VADSU))
                                            {
                                                foreach (var item in tfatAlt.VADSU.Split(',').ToList())
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.VADSP;
                                                    tfatNotification.DocType = "FM000";
                                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "Late Dispatch Notification!";
                                                    if (tfatAlt.VADSP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails;
                                                    }
                                                    tfatNotification.HtmlString = null;
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = item;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }

                                            if (SendToSelfNoti)
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.VADSP;
                                                tfatNotification.DocType = "FM000";
                                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Late Dispatch Notification!";
                                                if (tfatAlt.VADSP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = muserid;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                if (tfatAlt.VADSE)
                                {
                                    string Body = "";
                                    Body = "<html>";
                                    Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Vehicle Late Dispatch Notification!!!" + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                    Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Vehicle Late Dispatch From " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " At " + DispatchDateTime + "</b></span></p>";
                                    Body += "<br/>";
                                    Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                                    if (fMMaster.VehicleStatus == "100001")
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                                    }
                                    else
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    }
                                    Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    if (!String.IsNullOrEmpty(fMMaster.Remark))
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                                    }
                                    Body += "</html>";
                                    string Subject = "Vehicle Late Dispatch Notification!!!";
                                    //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.VADSU + "')<>0 and Email like '%@%'");
                                    string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.VADSU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                    var Userlist = tfatAlt.VADSU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0 && tfatAlt.VADSSelf)
                                    {
                                        var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                        if (!string.IsNullOrEmpty(UserMailId))
                                        {
                                            if (UserMailId.Contains("@"))
                                            {
                                                SendTo += "," + UserMailId;
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(SendTo))
                                    {
                                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Late Dispatch Vehicle Notification. ", "Auto Mail Notification");
                                    }
                                }
                            }
                        }
                    }
                }

            }
        }

        public void VehicleDispatchNotification(FMROUTETable fMROUTETable)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "VEHICLE ACTIVITY" && x.SubType == "Dispatch" && string.IsNullOrEmpty(x.Param1) == false).ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                if (fMROUTETable.DispatchReSchDate != null && fMROUTETable.DispatchDate != null)
                {
                    string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                    var DispatchSchDate = fMROUTETable.DispatchReSchDate.Value.ToShortDateString().Split('/');
                    var DispatchSchTime = fMROUTETable.DispatchReSchTime.Split(':');
                    DateTime DispatchSchDateTime = new DateTime(Convert.ToInt32(DispatchSchDate[2]), Convert.ToInt32(DispatchSchDate[1]), Convert.ToInt32(DispatchSchDate[0]), Convert.ToInt32(DispatchSchTime[0]), Convert.ToInt32(DispatchSchTime[1]), 00);

                    var DispatchDate = fMROUTETable.DispatchDate.Value.ToShortDateString().Split('/');
                    var DispatchTime = fMROUTETable.DispatchTime.Split(':');
                    DateTime DispatchDateTime = new DateTime(Convert.ToInt32(DispatchDate[2]), Convert.ToInt32(DispatchDate[1]), Convert.ToInt32(DispatchDate[0]), Convert.ToInt32(DispatchTime[0]), Convert.ToInt32(DispatchTime[1]), 00);

                    // Calculate time difference
                    TimeSpan timeDifference = DispatchDateTime - DispatchSchDateTime;

                    #region Dispatch Notification

                    var Notificationlist = tfatAlt.
                        Where(x => x.SubType == "Dispatch" &&
                        timeDifference.TotalMinutes > (Convert.ToInt32(x.Param1.Trim().Split(':')[0]) * 60) + (Convert.ToInt32(x.Param1.Trim().Split(':')[1])) &&
                        ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                        .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();

                        #region Notification Send

                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Late Dispatch Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails : "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FM000",
                                                   DocNo = fMMaster.FmNo.ToString(),
                                                   Parentkey = fMMaster.ParentKey.ToString(),
                                                   Tablekey = fMMaster.TableKey.ToString(),
                                                   Describe = "Late Dispatch Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + " ...!</span>" + FreightMemoDetails : "<span>Late Dispatch Vehicle From " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " At " + DispatchDateTime + "...!</span>" + FreightMemoDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Vehicle Late Dispatch Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Vehicle Late Dispatch From " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " At " + DispatchDateTime + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Vehicle Late Dispatch Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email For Late Dispatch Vehicle Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Dispatch Notification
                }
            }
        }

        public void OLD_VehicleOverloadNotification(FMROUTETable fMROUTETable, int OverLoadKg)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                //Arrival
                if (tfatAlt.VAOLN == true || tfatAlt.VAOLE == true)
                {
                    if (tfatAlt.VAOLOvelloadKG > 0 && OverLoadKg > tfatAlt.VAOLOvelloadKG)
                    {
                        FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                        //Set Notification
                        if (tfatAlt.VAOLN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.VAOLBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.VAOLSelf)
                                {
                                    var Userlist = tfatAlt.VAOLU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.VAOLU))
                                {
                                    foreach (var item in tfatAlt.VAOLU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.VAOLP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Overlaod Vehicle Notification!";
                                        if (tfatAlt.VAOLP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.VAOLP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Overlaod Vehicle Notification!";
                                    if (tfatAlt.VAOLP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.VAOLBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.VAOLSelf)
                                    {
                                        var Userlist = tfatAlt.VAOLU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.VAOLU))
                                    {
                                        foreach (var item in tfatAlt.VAOLU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.VAOLP;
                                            tfatNotification.DocType = "FM000";
                                            tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                            tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Overlaod Vehicle Notification!";
                                            if (tfatAlt.VAOLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.VAOLP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Overlaod Vehicle Notification!";
                                        if (tfatAlt.VAOLP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Total Weight(KGs) Is : " + OverLoadKg + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.VAOLE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Overload Vehicle Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Overload Vehicle In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " And Total Weight(KGs) Is : " + OverLoadKg + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            if (fMMaster.VehicleStatus == "100001")
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                            }
                            else
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(fMMaster.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "Overload Vehicle Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.VAOLU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.VAOLU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.VAOLU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.VAOLSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email For Overload Vehicle Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

            }
        }

        public void VehicleOverloadNotification(FMROUTETable fMROUTETable, int Payload, int LodedWeight, int OverLoadKg)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "VEHICLE ACTIVITY" && x.SubType == "Over-Load").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string FreightMemoDetails = GetVehicleBranchActivityOverloadDetails(fMROUTETable, Payload, LodedWeight);

                #region Over-Load Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Over-Load" &&
                    x.Param1 != null && Convert.ToInt32(x.Param1) > 0 && OverLoadKg > Convert.ToInt32(x.Param1) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();

                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Overlaod Vehicle Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " " + OverLoadKg + " (KGs)...!</span>" + FreightMemoDetails : "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " " + OverLoadKg + "(KGs)...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Overlaod Vehicle Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Overload Vehicle In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " " + OverLoadKg + " (KGs)...!</span>" + FreightMemoDetails : "<span>Overload Vehicle In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " " + OverLoadKg + "(KGs)...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Overload Vehicle Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Overload Vehicle In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " And OverLoad Weight Is : " + OverLoadKg + " (KGs)</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Overload Vehicle Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Overload Vehicle Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Over-Load Notification
            }
        }

        public void OLD_ClearVehicleNotification(FMROUTETable fMROUTETable)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                //Arrival
                if (tfatAlt.VACLN == true || tfatAlt.VACLE == true)
                {
                    FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                    //Set Notification
                    if (tfatAlt.VACLN)
                    {
                        //if branch is null means send notification to all branch
                        if (string.IsNullOrEmpty(tfatAlt.VACLBranch))
                        {
                            bool SendToSelfNoti = false;
                            if (tfatAlt.VACLSelf)
                            {
                                var Userlist = tfatAlt.VACLU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0)
                                {
                                    SendToSelfNoti = true;
                                }
                            }
                            if (!string.IsNullOrEmpty(tfatAlt.VACLU))
                            {
                                foreach (var item in tfatAlt.VACLU.Split(',').ToList())
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.VACLP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Move Vehicle Without Unlaod Material Notification!";
                                    if (tfatAlt.VACLP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = item;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }

                            if (SendToSelfNoti)
                            {
                                tfatNotification tfatNotification = new tfatNotification();
                                tfatNotification.Srl = GenerateNotificationCode();
                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                tfatNotification.Clear = false;
                                tfatNotification.Priority = tfatAlt.VACLP;
                                tfatNotification.DocType = "FM000";
                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                tfatNotification.Describe = "Move Vehicle Without Unlaod Material Notification!";
                                if (tfatAlt.VACLP)
                                {
                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                }
                                else
                                {
                                    tfatNotification.Msg = "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                }
                                tfatNotification.HtmlString = null;
                                tfatNotification.prefix = mperiod;
                                tfatNotification.Branch = mbranchcode;
                                tfatNotification.ToUser = muserid;
                                tfatNotification.AUTHIDS = muserid;
                                tfatNotification.AUTHORISE = "A00";
                                tfatNotification.ENTEREDBY = muserid;
                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                ctxTFAT.SaveChanges();
                            }
                        }
                        else
                        //Send Notification to particular branch only
                        {
                            var BranchNotiReq = 0;
                            var Branchlist = tfatAlt.VACLBranch.Split(',').ToList();
                            BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                            if (BranchNotiReq >= 0)
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.VACLSelf)
                                {
                                    var Userlist = tfatAlt.VACLU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.VACLU))
                                {
                                    foreach (var item in tfatAlt.VACLU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.VACLP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Move Vehicle Without Unlaod Material Notification!";
                                        if (tfatAlt.VACLP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.VACLP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Move Vehicle Without Unlaod Material Notification!";
                                    if (tfatAlt.VACLP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                        }
                    }
                    if (tfatAlt.VACLE)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Move Vehicle Without Unlaod Material Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Move Vehicle Without Unlaod Material In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Move Vehicle Without Unlaod Material Notification!!!";
                        //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.VACLU + "')<>0 and Email like '%@%'");
                        string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.VACLU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                        var Userlist = tfatAlt.VACLU.Split(',').ToList();
                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                        if (UserIndex < 0 && tfatAlt.VACLSelf)
                        {
                            var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                            if (!string.IsNullOrEmpty(UserMailId))
                            {
                                if (UserMailId.Contains("@"))
                                {
                                    SendTo += "," + UserMailId;
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(SendTo))
                        {
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email For Move Vehicle Without Unlaod Material Notification. ", "Auto Mail Notification");
                        }
                    }
                }
            }
        }

        public void ClearVehicleNotification(FMROUTETable fMROUTETable)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "VEHICLE ACTIVITY" && x.SubType == "Clear(Unload)").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                #region Clear(Unload) Notification

                var Notificationlist = tfatAlt.
                 Where(x => x.SubType == "Clear(Unload)" &&
                 ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                 .ToList();

                if (Notificationlist.Count() > 0)
                {
                    FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();

                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Move Vehicle Without Unlaod Material Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails : "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Move Vehicle Without Unlaod Material Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails : "<span>Move Vehicle Without Unlaod Material In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Move Vehicle Without Unlaod Material Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Move Vehicle Without Unlaod Material In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Move Vehicle Without Unlaod Material Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Move Vehicle Without Unlaod Material Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }


                #endregion Clear(Unload) Notification

            }
        }

        public void OLD_UnloadOtherBranchMaterialNotification(FMROUTETable fMROUTETable, string Consignmentkey)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                //Arrival
                if (tfatAlt.VAUNN == true || tfatAlt.VAUNE == true)
                {
                    FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                    LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == Consignmentkey).FirstOrDefault();
                    //Set Notification
                    if (tfatAlt.VAUNN)
                    {
                        //if branch is null means send notification to all branch
                        if (string.IsNullOrEmpty(tfatAlt.VAUNBranch))
                        {
                            bool SendToSelfNoti = false;
                            if (tfatAlt.VAUNSelf)
                            {
                                var Userlist = tfatAlt.VAUNU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0)
                                {
                                    SendToSelfNoti = true;
                                }
                            }
                            if (!string.IsNullOrEmpty(tfatAlt.VAUNU))
                            {
                                foreach (var item in tfatAlt.VAUNU.Split(',').ToList())
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.VAUNP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Other Branch Material Unlaod Notification!";
                                    if (tfatAlt.VAUNP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = item;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }

                            if (SendToSelfNoti)
                            {
                                tfatNotification tfatNotification = new tfatNotification();
                                tfatNotification.Srl = GenerateNotificationCode();
                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                tfatNotification.Clear = false;
                                tfatNotification.Priority = tfatAlt.VAUNP;
                                tfatNotification.DocType = "FM000";
                                tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                tfatNotification.Describe = "Other Branch Material Unlaod Notification!";
                                if (tfatAlt.VAUNP)
                                {
                                    tfatNotification.Msg = "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                }
                                else
                                {
                                    tfatNotification.Msg = "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                }
                                tfatNotification.HtmlString = null;
                                tfatNotification.prefix = mperiod;
                                tfatNotification.Branch = mbranchcode;
                                tfatNotification.ToUser = muserid;
                                tfatNotification.AUTHIDS = muserid;
                                tfatNotification.AUTHORISE = "A00";
                                tfatNotification.ENTEREDBY = muserid;
                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                ctxTFAT.SaveChanges();
                            }
                        }
                        else
                        //Send Notification to particular branch only
                        {
                            var BranchNotiReq = 0;
                            var Branchlist = tfatAlt.VAUNBranch.Split(',').ToList();
                            BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                            if (BranchNotiReq >= 0)
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.VAUNSelf)
                                {
                                    var Userlist = tfatAlt.VAUNU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.VAUNU))
                                {
                                    foreach (var item in tfatAlt.VAUNU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.VAUNP;
                                        tfatNotification.DocType = "FM000";
                                        tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                        tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Other Branch Material Unlaod Notification!";
                                        if (tfatAlt.VAUNP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.VAUNP;
                                    tfatNotification.DocType = "FM000";
                                    tfatNotification.DocNo = fMMaster.FmNo.ToString();
                                    tfatNotification.Parentkey = fMMaster.ParentKey.ToString();
                                    tfatNotification.Tablekey = fMMaster.TableKey.ToString();
                                    tfatNotification.Describe = "Other Branch Material Unlaod Notification!";
                                    if (tfatAlt.VAUNP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                        }
                    }
                    if (tfatAlt.VAUNE)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Other Branch Material Unlaod Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Other Branch Material Unlaod In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " And Consignment Is :" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Other Branch Material Unlaod Notification!!!";
                        //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.VAUNU + "')<>0 and Email like '%@%'");
                        string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.VAUNU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                        var Userlist = tfatAlt.VAUNU.Split(',').ToList();
                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                        if (UserIndex < 0 && tfatAlt.VAUNSelf)
                        {
                            var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                            if (!string.IsNullOrEmpty(UserMailId))
                            {
                                if (UserMailId.Contains("@"))
                                {
                                    SendTo += "," + UserMailId;
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(SendTo))
                        {
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email For Other Branch Material Unlaod Notification. ", "Auto Mail Notification");
                        }
                    }
                }
            }
        }

        public void UnloadOtherBranchMaterialNotification(FMROUTETable fMROUTETable, string Consignmentkey)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "VEHICLE ACTIVITY" && x.SubType == "Unload(Branch)").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                string FreightMemoDetails = GetVehicleBranchActivityDetails(fMROUTETable);

                #region Unload(Branch) Notification

                var Notificationlist = tfatAlt.
                 Where(x => x.SubType == "Unload(Branch)" &&
                 ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                 .ToList();

                if (Notificationlist.Count() > 0)
                {
                    FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.TableKey == fMROUTETable.Parentkey).FirstOrDefault();
                    LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == Consignmentkey).FirstOrDefault();

                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Other Branch Material Unlaod Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails : "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "FM000",
                                               DocNo = fMMaster.FmNo.ToString(),
                                               Parentkey = fMMaster.ParentKey.ToString(),
                                               Tablekey = fMMaster.TableKey.ToString(),
                                               Describe = "Other Branch Material Unlaod Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails : "<span>Other Branch Material Unlaod In " + ctxTFAT.TfatBranch.Where(tfat => tfat.Code == mbranchcode).Select(tfat => tfat.Name).FirstOrDefault().ToUpper() + " And Consignment Is :" + lRMaster.LrNo + "...!</span>" + FreightMemoDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Other Branch Material Unlaod Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Other Branch Material Unlaod In " + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault().ToUpper()) + " And Consignment Is :" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Group: <b>" + ctxTFAT.VehicleGrpStatusMas.Where(x => x.Code == fMMaster.VehicleStatus).Select(x => x.VehicleGroupStatus).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                        if (fMMaster.VehicleStatus == "100001")
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + fMMaster.Driver + "</b></span></p>";
                        }
                        else
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.VehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Driver: <b>" + ctxTFAT.DriverMaster.Where(x => x.Code == fMMaster.Driver).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance.ToString("F2") + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(fMMaster.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Remark: <b>" + fMMaster.Remark + "</b></span></p>";
                        }
                        Body += "</html>";
                        string Subject = "Other Branch Material Unlaod Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email For Other Branch Material Unlaod Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Unload(Branch) Notification
            }
        }

        #endregion

        #region Delivery

        public string GetDeliveryDetails(DeliveryMaster delivery)
        {
            string Returnstring = "";
            Returnstring += "<br>Delivery Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault();
            Returnstring += ".<br>Delivery No : " + delivery.DeliveryNo;
            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();
            if (lRMaster != null)
            {
                Returnstring += ".<br>Consignment No : " + lRMaster.LrNo;
                Returnstring += " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Branch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Consigment Book Date Is " + lRMaster.BookDate.ToShortDateString();
                Returnstring += " .<br>Consigner : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Consignee : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name).FirstOrDefault() + " .";
            }

            return Returnstring;
        }

        public void OLD_DeliveryNotification(DeliveryMaster delivery, bool OtherBranchDel, string ThroughtDelivery)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string DeliveryDetails = GetDeliveryDetails(delivery);

                //Status
                if (tfatAlt.DLSTN == true || tfatAlt.DLSTE == true)
                {
                    if (!string.IsNullOrEmpty(tfatAlt.DLSTStatus))
                    {
                        var Statuslist = tfatAlt.DLSTStatus.Split(',').ToList();
                        int index = Statuslist.FindIndex(a => a == delivery.DeliveryGoodStatus);
                        if (index >= 0)
                        {
                            if (tfatAlt.DLSTN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.DLSTBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.DLSTSelf)
                                    {
                                        var Userlist = tfatAlt.DLSTU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.DLSTU))
                                    {
                                        foreach (var item in tfatAlt.DLSTU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.DLSTP;
                                            tfatNotification.DocType = "DEL00";
                                            tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                            tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                            tfatNotification.Tablekey = delivery.TableKey.ToString();
                                            tfatNotification.Describe = "Delivery Status Notification!";
                                            if (tfatAlt.DLSTP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.DLSTP;
                                        tfatNotification.DocType = "DEL00";
                                        tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                        tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                        tfatNotification.Tablekey = delivery.TableKey.ToString();
                                        tfatNotification.Describe = "Delivery Status Notification!";
                                        if (tfatAlt.DLSTP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.DLSTBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.DLSTSelf)
                                        {
                                            var Userlist = tfatAlt.DLSTU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.DLSTU))
                                        {
                                            foreach (var item in tfatAlt.DLSTU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.DLSTP;
                                                tfatNotification.DocType = "DEL00";
                                                tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                                tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                                tfatNotification.Tablekey = delivery.TableKey.ToString();
                                                tfatNotification.Describe = "Delivery Status Notification!";
                                                if (tfatAlt.DLSTP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.DLSTP;
                                            tfatNotification.DocType = "DEL00";
                                            tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                            tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                            tfatNotification.Tablekey = delivery.TableKey.ToString();
                                            tfatNotification.Describe = "Delivery Status Notification!";
                                            if (tfatAlt.DLSTP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.DLSTE)
                            {
                                LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();
                                string Body = "";
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Delivery Status Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "</b></span></p>";
                                Body += "<br/>";
                                Body += "<p><span style=\"font-family:Tahoma\">Delivery No: <b>" + delivery.DeliveryNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Delivery Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                Body += "</html>";
                                string Subject = "Delivery Status Notification!!!";
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.DLSTU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.DLSTU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.DLSTSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email Delivery Status Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }
                }

                //Other Branch Delivery
                if (OtherBranchDel)
                {
                    if (tfatAlt.DLBRN == true || tfatAlt.DLBRE == true)
                    {
                        if (tfatAlt.DLBRN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.DLBRBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.DLBRSelf)
                                {
                                    var Userlist = tfatAlt.DLBRU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!String.IsNullOrEmpty(tfatAlt.DLBRU))
                                {
                                    foreach (var item in tfatAlt.DLBRU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.DLBRP;
                                        tfatNotification.DocType = "DEL00";
                                        tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                        tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                        tfatNotification.Tablekey = delivery.TableKey.ToString();
                                        tfatNotification.Describe = "Delivery Other Branch Stock Notification!";
                                        if (tfatAlt.DLBRP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.DLBRP;
                                    tfatNotification.DocType = "DEL00";
                                    tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                    tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                    tfatNotification.Tablekey = delivery.TableKey.ToString();
                                    tfatNotification.Describe = "Delivery Other Branch Stock Notification!";
                                    if (tfatAlt.DLBRP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.DLBRBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.DLBRSelf)
                                    {
                                        var Userlist = tfatAlt.DLBRU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.DLBRU))
                                    {
                                        foreach (var item in tfatAlt.DLBRU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.DLBRP;
                                            tfatNotification.DocType = "DEL00";
                                            tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                            tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                            tfatNotification.Tablekey = delivery.TableKey.ToString();
                                            tfatNotification.Describe = "Delivery Other Branch Stock Notification!";
                                            if (tfatAlt.DLBRP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.DLBRP;
                                        tfatNotification.DocType = "DEL00";
                                        tfatNotification.DocNo = delivery.DeliveryNo.ToString();
                                        tfatNotification.Parentkey = delivery.ParentKey.ToString();
                                        tfatNotification.Tablekey = delivery.TableKey.ToString();
                                        tfatNotification.Describe = "Delivery Other Branch Stock Notification!";
                                        if (tfatAlt.DLBRP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.DLBRE)
                        {
                            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Delivery Other Branch Stock Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "[ " + ThroughtDelivery + " ] Delivery Other Branch Stock</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">Delivery No: <b>" + delivery.DeliveryNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Delivery Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Delivery Other Branch Stock Notification!!!";
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.DLBRU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.DLBRU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.DLBRSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Delivery Other Branch Stock Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }
            }
        }

        public void DeliveryNotification(DeliveryMaster delivery, bool OtherBranchDel, string ThroughtDelivery)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "DELIVERY").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                string DeliveryDetails = GetDeliveryDetails(delivery);

                #region Delivery Status Notification

                var Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Delivery Status" &&
                     x.Param1 != null && x.Param1.Split(',').Any(code => code == delivery.DeliveryGoodStatus) &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "DEL00",
                                               DocNo = delivery.DeliveryNo.ToString(),
                                               Parentkey = delivery.ParentKey.ToString(),
                                               Tablekey = delivery.TableKey.ToString(),
                                               Describe = "Delivery Status Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails : "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "DEL00",
                                               DocNo = delivery.DeliveryNo.ToString(),
                                               Parentkey = delivery.ParentKey.ToString(),
                                               Tablekey = delivery.TableKey.ToString(),
                                               Describe = "Delivery Status Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails : "<span>[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "...!</span>" + DeliveryDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Delivery Status Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "[ " + ThroughtDelivery + " ] Delivery with Status Is " + delivery.DeliveryGoodStatus + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\">Delivery No: <b>" + delivery.DeliveryNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Delivery Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Delivery Status Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Delivery Status Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Delivery Status Notification

                #region Other Branch Stock Delivery Notification

                if (OtherBranchDel)
                {
                    Notificationlist = tfatAlt.
                     Where(x => x.SubType == "Branch(Delivery)" &&
                     ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                     .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "DEL00",
                                                   DocNo = delivery.DeliveryNo.ToString(),
                                                   Parentkey = delivery.ParentKey.ToString(),
                                                   Tablekey = delivery.TableKey.ToString(),
                                                   Describe = "Delivery Other Branch Stock Notification!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails : "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "DEL00",
                                                   DocNo = delivery.DeliveryNo.ToString(),
                                                   Parentkey = delivery.ParentKey.ToString(),
                                                   Tablekey = delivery.TableKey.ToString(),
                                                   Describe = "Delivery Other Branch Stock Notification!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails : "<span>[ " + ThroughtDelivery + " ] Delivery Other Branch Stock...!</span>" + DeliveryDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Delivery Other Branch Stock Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "[ " + ThroughtDelivery + " ] Delivery Other Branch Stock</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\">Delivery No: <b>" + delivery.DeliveryNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Delivery Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Delivery Other Branch Stock Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email Delivery Other Branch Stock Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }
                }

                #endregion Other Branch Stock Delivery Notification
            }
        }

        #endregion

        #region POD

        public string GetPODDetails(PODMaster pODMaster, PODRel pODRel)
        {
            string Returnstring = "";
            Returnstring += "<br>POD Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault();
            Returnstring += ".<br>POD No : " + pODMaster.PODNo;
            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
            if (lRMaster != null)
            {
                Returnstring += ".<br>Consignment No : " + lRMaster.LrNo;
                Returnstring += " .<br>Branch :" + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Branch).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Consigment Book Date Is " + lRMaster.BookDate.ToShortDateString();
                Returnstring += " .<br>Consigner : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>Consignee : " + ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>From : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name).FirstOrDefault();
                Returnstring += " .<br>To : " + ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name).FirstOrDefault() + " .";
            }

            return Returnstring;
        }

        public string GetPODHtmlDetails(PODMaster pODMaster, PODRel pODRel)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            if (pODMaster.Task == "Direct")
            {
                var Deliverylist = ctxTFAT.DeliveryMaster.Where(x => x.ParentKey == pODRel.LRRefTablekey).OrderByDescending(x => x.DeliveryDate).Take(5).ToList();
                if (Deliverylist.Count() > 0)
                {
                    htmlTableBuilder.Append("<table border='1'>");
                    htmlTableBuilder.Append("<tr><th colspan='4'>Top 5 Delivery Details</th></tr>");
                    htmlTableBuilder.Append("<tr><th>Branch</th><th>Srl</th><th>Date</th><th>Qty</th></tr>");
                    foreach (var item in Deliverylist)
                    {
                        htmlTableBuilder.Append("<tr><td>" + ctxTFAT.TfatBranch.Where(x => x.Code == item.LoginBranch).Select(x => x.Name).FirstOrDefault().ToUpper() + "</td><td>" + item.DeliveryNo + "</td><td>" + item.DeliveryDate.ToShortDateString() + "</td><td>" + item.Qty + "</td></tr>");
                    }
                    htmlTableBuilder.Append("</table>");
                }
            }
            else if (pODMaster.Task == "Branch" && pODMaster.SendReceive == "R")
            {
                var Sendlist = ctxTFAT.PODRel.Where(x => x.ParentKey == pODRel.LRRefTablekey && x.SendReceive == "S").OrderByDescending(x => x.RECORDKEY).Take(5).ToList();
                if (Sendlist.Count() > 0)
                {
                    htmlTableBuilder.Append("<table border='1'>");
                    htmlTableBuilder.Append("<tr><th colspan='4'>Top 5 POD Send Details</th></tr>");
                    htmlTableBuilder.Append("<tr><th>From Branch</th><th>To Branch</th><th>Srl</th><th>Date</th></tr>");
                    foreach (var item in Sendlist)
                    {
                        var PODM = ctxTFAT.PODMaster.Where(x => x.TableKey == item.ParentKey).FirstOrDefault();
                        htmlTableBuilder.Append("<tr><td>" + ctxTFAT.TfatBranch.Where(x => x.Code == item.FromBranch).Select(x => x.Name).FirstOrDefault().ToUpper() + "</td><td>" + ctxTFAT.TfatBranch.Where(x => x.Code == item.ToBranch).Select(x => x.Name).FirstOrDefault().ToUpper() + "</td><td>" + item.PODNo + "</td><td>" + (PODM == null ? "" : PODM.DeliveryDate.ToString()) + "</td></tr>");
                    }
                    htmlTableBuilder.Append("</table>");
                }
            }
            else if (pODMaster.Task == "Branch" && pODMaster.SendReceive == "S")
            {
                var Sendlist = ctxTFAT.PODRel.Where(x => x.ParentKey == pODRel.LRRefTablekey && x.SendReceive == "R").OrderByDescending(x => x.RECORDKEY).Take(5).ToList();
                if (Sendlist.Count() > 0)
                {
                    htmlTableBuilder.Append("<table border='1'>");
                    htmlTableBuilder.Append("<tr><th colspan='4'>Top 5 POD Received Details</th></tr>");
                    htmlTableBuilder.Append("<tr><th>From Branch</th><th>To Branch</th><th>Srl</th><th>Date</th></tr>");
                    foreach (var item in Sendlist)
                    {
                        var PODM = ctxTFAT.PODMaster.Where(x => x.TableKey == item.ParentKey).FirstOrDefault();
                        htmlTableBuilder.Append("<tr><td>" + ctxTFAT.TfatBranch.Where(x => x.Code == item.ToBranch).Select(x => x.Name).FirstOrDefault().ToUpper() + "</td><td>" + ctxTFAT.TfatBranch.Where(x => x.Code == item.FromBranch).Select(x => x.Name).FirstOrDefault().ToUpper() + "</td><td>" + item.PODNo + "</td><td>" + (PODM == null ? "" : PODM.DeliveryDate.ToString()) + "</td></tr>");
                    }
                    htmlTableBuilder.Append("</table>");
                }
            }
            return htmlTableBuilder.ToString();
        }

        public void OLD_PODNotification(PODMaster pODMaster, PODRel pODRel, bool NoDelivery)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                if (pODMaster.SendReceive == "R")
                {
                    string PODDetails = GetPODDetails(pODMaster, pODRel);

                    //Back Days
                    if (tfatAlt.PODBDN == true || tfatAlt.PODBDE == true)
                    {
                        var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                        CurrentDate = CurrentDate.AddDays((tfatAlt.PODBDDays) * (-1));
                        if (pODMaster.PODDate < CurrentDate)
                        {
                            if (tfatAlt.PODBDN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.PODBDBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.PODBDSelf)
                                    {
                                        var Userlist = tfatAlt.PODBDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(tfatAlt.PODBDU))
                                    {
                                        foreach (var item in tfatAlt.PODBDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODBDP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.PODBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Date Using Back Date Selected...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.PODBDP;
                                        tfatNotification.DocType = "POD00";
                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.PODBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>POD Date Using Back Date Selected...!</span>" + PODDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.PODBDBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.PODBDSelf)
                                        {
                                            var Userlist = tfatAlt.PODBDU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.PODBDU))
                                        {
                                            foreach (var item in tfatAlt.PODBDU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.PODBDP;
                                                tfatNotification.DocType = "POD00";
                                                tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Back Date Notification!";
                                                if (tfatAlt.PODBDP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>POD Date Using Back Date Selected...!</span>" + PODDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODBDP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.PODBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Date Using Back Date Selected...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.PODBDE)
                            {
                                string Body = "";
                                var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Back Date Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Back Date Notification" + "</b></span></p>";
                                Body += "<br/>";
                                if (lRMaster != null)
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                }
                                Body += "</html>";
                                string Subject = "POD Back Date Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODBDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.PODBDU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.PODBDSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email POD For Back Date Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }

                    //Forward Days
                    if (tfatAlt.PODFDN == true || tfatAlt.PODFDE == true)
                    {
                        var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                        CurrentDate = CurrentDate.AddDays(tfatAlt.PODFDDays);
                        if (pODMaster.PODDate > CurrentDate)
                        {
                            if (tfatAlt.PODFDN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.PODFDBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.PODFDSelf)
                                    {
                                        var Userlist = tfatAlt.PODFDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.PODFDU))
                                    {
                                        foreach (var item in tfatAlt.PODFDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODFDP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.PODFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.PODFDP;
                                        tfatNotification.DocType = "POD00";
                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.PODFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.PODFDBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.PODFDSelf)
                                        {
                                            var Userlist = tfatAlt.PODFDU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.PODFDU))
                                        {
                                            foreach (var item in tfatAlt.PODFDU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.PODFDP;
                                                tfatNotification.DocType = "POD00";
                                                tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                tfatNotification.Describe = "Forward Date Notification!";
                                                if (tfatAlt.PODFDP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                                }
                                                tfatNotification.HtmlString = null;
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODFDP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.PODFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.PODFDE)
                            {
                                string Body = "";
                                var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Forward Date Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Forward Date Notification" + "</b></span></p>";
                                Body += "<br/>";
                                if (lRMaster != null)
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                }
                                Body += "</html>";
                                string Subject = "POD Forward Date Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODFDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.PODFDU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.PODFDSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email POD For Forward Date Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }

                    //NO Delivery
                    if (pODMaster.Task == "Direct" && NoDelivery == true)
                    {
                        //NO Delivery
                        if (tfatAlt.PODNDLN == true || tfatAlt.PODNDLE == true)
                        {
                            if (tfatAlt.PODNDLN)
                            {
                                //if branch is null means send notification to all branch
                                if (string.IsNullOrEmpty(tfatAlt.PODNDLBranch))
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.PODNDLSelf)
                                    {
                                        var Userlist = tfatAlt.PODNDLU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.PODNDLU))
                                    {
                                        foreach (var item in tfatAlt.PODNDLU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODNDLP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "POD Received Without Delivery Notification!";
                                            if (tfatAlt.PODNDLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Received Without Delivery...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = PODDetails.ToString();
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.PODNDLP;
                                        tfatNotification.DocType = "POD00";
                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                        tfatNotification.Describe = "POD Received Without Delivery Notification!";
                                        if (tfatAlt.PODNDLP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>POD Received Without Delivery...!</span>" + PODDetails;
                                        }
                                        tfatNotification.HtmlString = PODDetails.ToString();
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                                else
                                //Send Notification to particular branch only
                                {
                                    var BranchNotiReq = 0;
                                    var Branchlist = tfatAlt.PODNDLBranch.Split(',').ToList();
                                    BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                    if (BranchNotiReq >= 0)
                                    {
                                        bool SendToSelfNoti = false;
                                        if (tfatAlt.PODNDLSelf)
                                        {
                                            var Userlist = tfatAlt.PODNDLU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0)
                                            {
                                                SendToSelfNoti = true;
                                            }
                                        }
                                        if (!String.IsNullOrEmpty(tfatAlt.PODNDLU))
                                        {
                                            foreach (var item in tfatAlt.PODNDLU.Split(',').ToList())
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.PODNDLP;
                                                tfatNotification.DocType = "POD00";
                                                tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                tfatNotification.Describe = "POD Received Without Delivery Notification!";
                                                if (tfatAlt.PODNDLP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>POD Received Without Delivery...!</span>" + PODDetails;
                                                }
                                                tfatNotification.HtmlString = PODDetails.ToString();
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = item;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }

                                        if (SendToSelfNoti)
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.PODNDLP;
                                            tfatNotification.DocType = "POD00";
                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                            tfatNotification.Describe = "POD Received Without Delivery Notification!";
                                            if (tfatAlt.PODNDLP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>POD Received Without Delivery...!</span>" + PODDetails;
                                            }
                                            tfatNotification.HtmlString = PODDetails.ToString();
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = muserid;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }
                                }
                            }
                            if (tfatAlt.PODNDLE)
                            {
                                string Body = "";
                                var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received Without Delivery Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received Without Delivery Notification" + "</b></span></p>";
                                Body += "<br/>";
                                if (lRMaster != null)
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                }

                                Body += "<br/>";
                                Body += PODDetails.ToString();
                                Body += "</html>";
                                string Subject = "POD Received Without Delivery Notification!!!";
                                //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODNDLU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                var Userlist = tfatAlt.PODNDLU.Split(',').ToList();
                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                if (UserIndex < 0 && tfatAlt.PODNDLSelf)
                                {
                                    var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(UserMailId))
                                    {
                                        if (UserMailId.Contains("@"))
                                        {
                                            SendTo += "," + UserMailId;
                                        }
                                    }
                                }
                                if (!string.IsNullOrEmpty(SendTo))
                                {
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received Without Delivery Notification. ", "Auto Mail Notification");
                                }
                            }
                        }
                    }

                    //POD Received
                    if (tfatAlt.PODRCN == true || tfatAlt.PODRCE == true)
                    {
                        var htmlTableBuilder = GetPODHtmlDetails(pODMaster, pODRel);
                        if (pODMaster.Task == "Direct")
                        {
                            var GetDelivery = ctxTFAT.DeliveryMaster.Where(x => x.ParentKey == pODRel.LRRefTablekey).OrderByDescending(x => x.DeliveryDate).FirstOrDefault();
                            if (GetDelivery != null)
                            {
                                var CurrentDate = ConvertDDMMYYTOYYMMDD(GetDelivery.DeliveryDate.ToShortDateString());
                                CurrentDate = CurrentDate.AddDays(tfatAlt.PODRCDays);
                                if (pODMaster.PODDate > CurrentDate)
                                {
                                    //Send Notification
                                    if (tfatAlt.PODRCN)
                                    {
                                        //if branch is null means send notification to all branch
                                        if (string.IsNullOrEmpty(tfatAlt.PODRCBranch))
                                        {
                                            bool SendToSelfNoti = false;
                                            if (tfatAlt.PODRCSelf)
                                            {
                                                var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                if (UserIndex < 0)
                                                {
                                                    SendToSelfNoti = true;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(tfatAlt.PODRCU))
                                            {
                                                foreach (var item in tfatAlt.PODRCU.Split(',').ToList())
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.PODRCP;
                                                    tfatNotification.DocType = "POD00";
                                                    tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                    tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "POD Received By Late Notification!";
                                                    if (tfatAlt.PODRCP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = item;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }

                                            if (SendToSelfNoti)
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.PODRCP;
                                                tfatNotification.DocType = "POD00";
                                                tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                tfatNotification.Describe = "POD Received By Late Notification!";
                                                if (tfatAlt.PODRCP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                }
                                                tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = muserid;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }
                                        else
                                        //Send Notification to particular branch only
                                        {
                                            var BranchNotiReq = 0;
                                            var Branchlist = tfatAlt.PODRCBranch.Split(',').ToList();
                                            BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                            if (BranchNotiReq >= 0)
                                            {
                                                bool SendToSelfNoti = false;
                                                if (tfatAlt.PODRCSelf)
                                                {
                                                    var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                    if (UserIndex < 0)
                                                    {
                                                        SendToSelfNoti = true;
                                                    }
                                                }
                                                if (!String.IsNullOrEmpty(tfatAlt.PODRCU))
                                                {
                                                    foreach (var item in tfatAlt.PODRCU.Split(',').ToList())
                                                    {
                                                        tfatNotification tfatNotification = new tfatNotification();
                                                        tfatNotification.Srl = GenerateNotificationCode();
                                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                        tfatNotification.Clear = false;
                                                        tfatNotification.Priority = tfatAlt.PODRCP;
                                                        tfatNotification.DocType = "POD00";
                                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                        tfatNotification.Describe = "POD Received By Late Notification!";
                                                        if (tfatAlt.PODRCP)
                                                        {
                                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        else
                                                        {
                                                            tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                        tfatNotification.prefix = mperiod;
                                                        tfatNotification.Branch = mbranchcode;
                                                        tfatNotification.ToUser = item;
                                                        tfatNotification.AUTHIDS = muserid;
                                                        tfatNotification.AUTHORISE = "A00";
                                                        tfatNotification.ENTEREDBY = muserid;
                                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                                        ctxTFAT.SaveChanges();
                                                    }
                                                }

                                                if (SendToSelfNoti)
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.PODRCP;
                                                    tfatNotification.DocType = "POD00";
                                                    tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                    tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "POD Received By Late Notification!";
                                                    if (tfatAlt.PODRCP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = muserid;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    if (tfatAlt.PODRCE)
                                    {
                                        string Body = "";
                                        var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                        Body = "<html>";
                                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received By Late Notification!!!" + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received By Late Notification" + "</b></span></p>";
                                        Body += "<br/>";
                                        if (lRMaster != null)
                                        {
                                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                        }

                                        Body += "<br/>";
                                        Body += htmlTableBuilder.ToString();
                                        Body += "</html>";
                                        string Subject = "POD Received By Late Notification!!!";
                                        //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                        string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODRCU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                        var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0 && tfatAlt.PODRCSelf)
                                        {
                                            var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(UserMailId))
                                            {
                                                if (UserMailId.Contains("@"))
                                                {
                                                    SendTo += "," + UserMailId;
                                                }
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(SendTo))
                                        {
                                            SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received By Late Notification. ", "Auto Mail Notification");
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            var GetLastPodSend = ctxTFAT.PODRel.Where(x => x.LRRefTablekey == pODRel.LRRefTablekey && x.SendReceive == "S").OrderByDescending(x => x.RECORDKEY).FirstOrDefault();
                            if (GetLastPodSend != null)
                            {
                                var POdMaster = ctxTFAT.PODMaster.Where(x => x.TableKey == GetLastPodSend.ParentKey).FirstOrDefault();
                                if (POdMaster != null)
                                {
                                    var CurrentDate = ConvertDDMMYYTOYYMMDD(POdMaster.PODDate.ToShortDateString());
                                    CurrentDate = CurrentDate.AddDays(tfatAlt.PODRCDays);
                                    if (pODMaster.PODDate > CurrentDate)
                                    {
                                        //Send Notification
                                        if (tfatAlt.PODRCN)
                                        {
                                            //if branch is null means send notification to all branch
                                            if (string.IsNullOrEmpty(tfatAlt.PODRCBranch))
                                            {
                                                bool SendToSelfNoti = false;
                                                if (tfatAlt.PODRCSelf)
                                                {
                                                    var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                    if (UserIndex < 0)
                                                    {
                                                        SendToSelfNoti = true;
                                                    }
                                                }
                                                if (!String.IsNullOrEmpty(tfatAlt.PODRCU))
                                                {
                                                    foreach (var item in tfatAlt.PODRCU.Split(',').ToList())
                                                    {
                                                        tfatNotification tfatNotification = new tfatNotification();
                                                        tfatNotification.Srl = GenerateNotificationCode();
                                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                        tfatNotification.Clear = false;
                                                        tfatNotification.Priority = tfatAlt.PODRCP;
                                                        tfatNotification.DocType = "POD00";
                                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                        tfatNotification.Describe = "POD Received By Late Notification!";
                                                        if (tfatAlt.PODRCP)
                                                        {
                                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        else
                                                        {
                                                            tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                        tfatNotification.prefix = mperiod;
                                                        tfatNotification.Branch = mbranchcode;
                                                        tfatNotification.ToUser = item;
                                                        tfatNotification.AUTHIDS = muserid;
                                                        tfatNotification.AUTHORISE = "A00";
                                                        tfatNotification.ENTEREDBY = muserid;
                                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                                        ctxTFAT.SaveChanges();
                                                    }
                                                }

                                                if (SendToSelfNoti)
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.PODRCP;
                                                    tfatNotification.DocType = "POD00";
                                                    tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                    tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "POD Received By Late Notification!";
                                                    if (tfatAlt.PODRCP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                    }
                                                    tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = muserid;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }
                                            else
                                            //Send Notification to particular branch only
                                            {
                                                var BranchNotiReq = 0;
                                                var Branchlist = tfatAlt.PODRCBranch.Split(',').ToList();
                                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                                if (BranchNotiReq >= 0)
                                                {
                                                    bool SendToSelfNoti = false;
                                                    if (tfatAlt.PODRCSelf)
                                                    {
                                                        var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                        if (UserIndex < 0)
                                                        {
                                                            SendToSelfNoti = true;
                                                        }
                                                    }
                                                    if (!String.IsNullOrEmpty(tfatAlt.PODRCU))
                                                    {
                                                        foreach (var item in tfatAlt.PODRCU.Split(',').ToList())
                                                        {
                                                            tfatNotification tfatNotification = new tfatNotification();
                                                            tfatNotification.Srl = GenerateNotificationCode();
                                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                            tfatNotification.Clear = false;
                                                            tfatNotification.Priority = tfatAlt.PODRCP;
                                                            tfatNotification.DocType = "POD00";
                                                            tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                            tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                            tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                            tfatNotification.Describe = "POD Received By Late Notification!";
                                                            if (tfatAlt.PODRCP)
                                                            {
                                                                tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                            }
                                                            else
                                                            {
                                                                tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                            }
                                                            tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                            tfatNotification.prefix = mperiod;
                                                            tfatNotification.Branch = mbranchcode;
                                                            tfatNotification.ToUser = item;
                                                            tfatNotification.AUTHIDS = muserid;
                                                            tfatNotification.AUTHORISE = "A00";
                                                            tfatNotification.ENTEREDBY = muserid;
                                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                                            ctxTFAT.SaveChanges();
                                                        }
                                                    }

                                                    if (SendToSelfNoti)
                                                    {
                                                        tfatNotification tfatNotification = new tfatNotification();
                                                        tfatNotification.Srl = GenerateNotificationCode();
                                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                        tfatNotification.Clear = false;
                                                        tfatNotification.Priority = tfatAlt.PODRCP;
                                                        tfatNotification.DocType = "POD00";
                                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                        tfatNotification.Describe = "POD Received By Late Notification!";
                                                        if (tfatAlt.PODRCP)
                                                        {
                                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        else
                                                        {
                                                            tfatNotification.Msg = "<span>POD Received By Late...!</span>" + PODDetails;
                                                        }
                                                        tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                        tfatNotification.prefix = mperiod;
                                                        tfatNotification.Branch = mbranchcode;
                                                        tfatNotification.ToUser = muserid;
                                                        tfatNotification.AUTHIDS = muserid;
                                                        tfatNotification.AUTHORISE = "A00";
                                                        tfatNotification.ENTEREDBY = muserid;
                                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                                        ctxTFAT.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                        if (tfatAlt.PODRCE)
                                        {
                                            string Body = "";
                                            var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                            Body = "<html>";
                                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received By Late Notification!!!" + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received By Late Notification" + "</b></span></p>";
                                            Body += "<br/>";
                                            if (lRMaster != null)
                                            {
                                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                            }

                                            Body += "<br/>";
                                            Body += htmlTableBuilder.ToString();
                                            Body += "</html>";
                                            string Subject = "POD Received By Late Notification!!!";
                                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODRCU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                            var Userlist = tfatAlt.PODRCU.Split(',').ToList();
                                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                                            if (UserIndex < 0 && tfatAlt.PODRCSelf)
                                            {
                                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                                if (!string.IsNullOrEmpty(UserMailId))
                                                {
                                                    if (UserMailId.Contains("@"))
                                                    {
                                                        SendTo += "," + UserMailId;
                                                    }
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(SendTo))
                                            {
                                                SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received By Late Notification. ", "Auto Mail Notification");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (pODMaster.SendReceive == "S")
                {
                    string PODDetails = GetPODDetails(pODMaster, pODRel);

                    //POD Send
                    if (tfatAlt.PODSDN == true || tfatAlt.PODSDE == true)
                    {
                        var htmlTableBuilder = GetPODHtmlDetails(pODMaster, pODRel);
                        var GetLastPodReceive = ctxTFAT.PODRel.Where(x => x.LRRefTablekey == pODRel.LRRefTablekey && x.SendReceive == "R").OrderByDescending(x => x.RECORDKEY).FirstOrDefault();
                        if (GetLastPodReceive != null)
                        {
                            var POdMaster = ctxTFAT.PODMaster.Where(x => x.TableKey == GetLastPodReceive.ParentKey).FirstOrDefault();
                            if (POdMaster != null)
                            {
                                var CurrentDate = ConvertDDMMYYTOYYMMDD(POdMaster.PODDate.ToShortDateString());
                                CurrentDate = CurrentDate.AddDays(tfatAlt.PODSDDays);
                                if (pODMaster.PODDate > CurrentDate)
                                {
                                    //Send Notification
                                    if (tfatAlt.PODSDN)
                                    {
                                        //if branch is null means send notification to all branch
                                        if (string.IsNullOrEmpty(tfatAlt.PODSDBranch))
                                        {
                                            bool SendToSelfNoti = false;
                                            if (tfatAlt.PODSDSelf)
                                            {
                                                var Userlist = tfatAlt.PODSDU.Split(',').ToList();
                                                var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                if (UserIndex < 0)
                                                {
                                                    SendToSelfNoti = true;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(tfatAlt.PODSDU))
                                            {
                                                foreach (var item in tfatAlt.PODSDU.Split(',').ToList())
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.PODSDP;
                                                    tfatNotification.DocType = "POD00";
                                                    tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                    tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "POD Send By Late Notification!";
                                                    if (tfatAlt.PODSDP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>POD Send By Late...!</span>" + PODDetails;
                                                    }
                                                    tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = item;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }

                                            if (SendToSelfNoti)
                                            {
                                                tfatNotification tfatNotification = new tfatNotification();
                                                tfatNotification.Srl = GenerateNotificationCode();
                                                tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                tfatNotification.Clear = false;
                                                tfatNotification.Priority = tfatAlt.PODSDP;
                                                tfatNotification.DocType = "POD00";
                                                tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                tfatNotification.Describe = "POD Send By Late Notification!";
                                                if (tfatAlt.PODSDP)
                                                {
                                                    tfatNotification.Msg = "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails;
                                                }
                                                else
                                                {
                                                    tfatNotification.Msg = "<span>POD Send By Late...!</span>" + PODDetails;
                                                }
                                                tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                tfatNotification.prefix = mperiod;
                                                tfatNotification.Branch = mbranchcode;
                                                tfatNotification.ToUser = muserid;
                                                tfatNotification.AUTHIDS = muserid;
                                                tfatNotification.AUTHORISE = "A00";
                                                tfatNotification.ENTEREDBY = muserid;
                                                tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                ctxTFAT.tfatNotification.Add(tfatNotification);
                                                ctxTFAT.SaveChanges();
                                            }
                                        }
                                        else
                                        //Send Notification to particular branch only
                                        {
                                            var BranchNotiReq = 0;
                                            var Branchlist = tfatAlt.PODSDBranch.Split(',').ToList();
                                            BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                            if (BranchNotiReq >= 0)
                                            {
                                                bool SendToSelfNoti = false;
                                                if (tfatAlt.PODSDSelf)
                                                {
                                                    var Userlist = tfatAlt.PODSDU.Split(',').ToList();
                                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                                    if (UserIndex < 0)
                                                    {
                                                        SendToSelfNoti = true;
                                                    }
                                                }
                                                if (!String.IsNullOrEmpty(tfatAlt.PODSDU))
                                                {
                                                    foreach (var item in tfatAlt.PODSDU.Split(',').ToList())
                                                    {
                                                        tfatNotification tfatNotification = new tfatNotification();
                                                        tfatNotification.Srl = GenerateNotificationCode();
                                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                        tfatNotification.Clear = false;
                                                        tfatNotification.Priority = tfatAlt.PODSDP;
                                                        tfatNotification.DocType = "POD00";
                                                        tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                        tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                        tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                        tfatNotification.Describe = "POD Send By Late Notification!";
                                                        if (tfatAlt.PODSDP)
                                                        {
                                                            tfatNotification.Msg = "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails;
                                                        }
                                                        else
                                                        {
                                                            tfatNotification.Msg = "<span>POD Send By Late...!</span>" + PODDetails;
                                                        }
                                                        tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                        tfatNotification.prefix = mperiod;
                                                        tfatNotification.Branch = mbranchcode;
                                                        tfatNotification.ToUser = item;
                                                        tfatNotification.AUTHIDS = muserid;
                                                        tfatNotification.AUTHORISE = "A00";
                                                        tfatNotification.ENTEREDBY = muserid;
                                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                                        ctxTFAT.SaveChanges();
                                                    }
                                                }

                                                if (SendToSelfNoti)
                                                {
                                                    tfatNotification tfatNotification = new tfatNotification();
                                                    tfatNotification.Srl = GenerateNotificationCode();
                                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                                    tfatNotification.Clear = false;
                                                    tfatNotification.Priority = tfatAlt.PODSDP;
                                                    tfatNotification.DocType = "POD00";
                                                    tfatNotification.DocNo = pODMaster.PODNo.ToString();
                                                    tfatNotification.Parentkey = pODMaster.ParentKey.ToString();
                                                    tfatNotification.Tablekey = pODMaster.TableKey.ToString();
                                                    tfatNotification.Describe = "POD Send By Late Notification!";
                                                    if (tfatAlt.PODSDP)
                                                    {
                                                        tfatNotification.Msg = "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails;
                                                    }
                                                    else
                                                    {
                                                        tfatNotification.Msg = "<span>POD Send By Late...!</span>" + PODDetails;
                                                    }
                                                    tfatNotification.HtmlString = htmlTableBuilder.ToString();
                                                    tfatNotification.prefix = mperiod;
                                                    tfatNotification.Branch = mbranchcode;
                                                    tfatNotification.ToUser = muserid;
                                                    tfatNotification.AUTHIDS = muserid;
                                                    tfatNotification.AUTHORISE = "A00";
                                                    tfatNotification.ENTEREDBY = muserid;
                                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                                    ctxTFAT.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    if (tfatAlt.PODSDE)
                                    {
                                        string Body = "";
                                        var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                        Body = "<html>";
                                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Send By Late Notification!!!" + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Send By Late Notification" + "</b></span></p>";
                                        Body += "<br/>";
                                        if (lRMaster != null)
                                        {
                                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                        }

                                        Body += "<br/>";
                                        Body += htmlTableBuilder.ToString();
                                        Body += "</html>";
                                        string Subject = "POD Send By Late Notification!!!";
                                        //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                                        string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.PODSDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                                        var Userlist = tfatAlt.PODSDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0 && tfatAlt.PODSDSelf)
                                        {
                                            var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(UserMailId))
                                            {
                                                if (UserMailId.Contains("@"))
                                                {
                                                    SendTo += "," + UserMailId;
                                                }
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(SendTo))
                                        {
                                            SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Send By Late Notification. ", "Auto Mail Notification");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public void PODNotification(PODMaster pODMaster, PODRel pODRel, bool NoDelivery)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "POD").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                if (pODMaster.SendReceive == "R")
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    string PODDetails = GetPODDetails(pODMaster, pODRel);

                    #region Back Days Notification

                    var Notificationlist = tfatAlt.
                        Where(x => x.SubType == "Back Days" &&
                        pODMaster.PODDate < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                        ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                        .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "POD00",
                                                   DocNo = pODMaster.PODNo.ToString(),
                                                   Parentkey = pODMaster.ParentKey.ToString(),
                                                   Tablekey = pODMaster.TableKey.ToString(),
                                                   Describe = "Back Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails : "<span>POD Date Using Back Date Selected...!</span>" + PODDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "POD00",
                                                   DocNo = pODMaster.PODNo.ToString(),
                                                   Parentkey = pODMaster.ParentKey.ToString(),
                                                   Tablekey = pODMaster.TableKey.ToString(),
                                                   Describe = "Back Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Date Using Back Date Selected...!</span>" + PODDetails : "<span>POD Date Using Back Date Selected...!</span>" + PODDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";
                            var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Back Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Back Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            if (lRMaster != null)
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "POD Back Date Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email POD For Back Date Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Back Days Notification

                    #region Forward Days Notification

                    CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    Notificationlist = tfatAlt.
                         Where(x => x.SubType == "Forward Days" &&
                         pODMaster.PODDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                         ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                         .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "POD00",
                                                   DocNo = pODMaster.PODNo.ToString(),
                                                   Parentkey = pODMaster.ParentKey.ToString(),
                                                   Tablekey = pODMaster.TableKey.ToString(),
                                                   Describe = "Forward Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails : "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "POD00",
                                                   DocNo = pODMaster.PODNo.ToString(),
                                                   Parentkey = pODMaster.ParentKey.ToString(),
                                                   Tablekey = pODMaster.TableKey.ToString(),
                                                   Describe = "Forward Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Date Using Forward Date Selected...!</span>" + PODDetails : "<span>POD Date Using Forward Date Selected...!</span>" + PODDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";
                            var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Forward Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Forward Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            if (lRMaster != null)
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            }
                            Body += "</html>";
                            string Subject = "POD Forward Date Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email POD For Forward Date Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Forward Days Notification

                    #region POD Received Notification

                    CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    if (pODMaster.Task == "Direct")
                    {
                        var GetDelivery = ctxTFAT.DeliveryMaster.Where(x => x.ParentKey == pODRel.LRRefTablekey).OrderByDescending(x => x.DeliveryDate).FirstOrDefault();
                        if (GetDelivery != null)
                        {
                            CurrentDate = ConvertDDMMYYTOYYMMDD(GetDelivery.DeliveryDate.ToShortDateString());

                            Notificationlist = tfatAlt.
                            Where(x => x.SubType == "Received Days" &&
                            pODMaster.PODDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                            ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                            .ToList();

                            if (Notificationlist.Count() > 0)
                            {
                                var htmlTableBuilder = GetPODHtmlDetails(pODMaster, pODRel);

                                #region Notification Send

                                //Bind Entity Using Users Columns
                                var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                                   SelectMany(x => x.User.Split(',').
                                                   Select(user => new tfatNotification
                                                   {
                                                       Srl = "",
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.Priority,
                                                       DocType = "POD00",
                                                       DocNo = pODMaster.PODNo.ToString(),
                                                       Parentkey = pODMaster.ParentKey.ToString(),
                                                       Tablekey = pODMaster.TableKey.ToString(),
                                                       Describe = "POD Received By Late Notification!!!",
                                                       Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails : "<span>POD Received By Late...!</span>" + PODDetails,
                                                       HtmlString = htmlTableBuilder.ToString(),
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = user,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   })).ToList();

                                //Bind Entity For Self
                                var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                                       x.Self == true &&
                                                       !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                       {
                                                           Srl = x.RECORDKEY.ToString(),
                                                           CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                           Clear = false,
                                                           Priority = x.Priority,
                                                           DocType = "POD00",
                                                           DocNo = pODMaster.PODNo.ToString(),
                                                           Parentkey = pODMaster.ParentKey.ToString(),
                                                           Tablekey = pODMaster.TableKey.ToString(),
                                                           Describe = "POD Received By Late Notification!!!",
                                                           Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails : "<span>POD Received By Late...!</span>" + PODDetails,
                                                           HtmlString = htmlTableBuilder.ToString(),
                                                           prefix = mperiod,
                                                           Branch = mbranchcode,
                                                           ToUser = muserid,
                                                           AUTHIDS = muserid,
                                                           AUTHORISE = "A00",
                                                           ENTEREDBY = muserid,
                                                           LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                       }).ToList();

                                SendNotification.AddRange(NotificatnToSelf);
                                SendNotification = SendNotification.Distinct().ToList();
                                var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                                foreach (var item in SendNotification)
                                {
                                    item.Srl = (NotificationCode++).ToString("D6");
                                }
                                ctxTFAT.tfatNotification.AddRange(SendNotification);
                                ctxTFAT.SaveChanges();

                                #endregion

                                #region Send Mail

                                //Bind Entity Using Users Columns
                                string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                                Regex regex = new Regex(emailPattern);

                                var SendMail = Notificationlist
                                    .Where(x => x.Email == true)
                                    .SelectMany(x => x.User.Split(',')
                                        .Select(user => ctxTFAT.TfatPass
                                            .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                            .Select(tfat => tfat.Email)
                                            .FirstOrDefault()))
                                    .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                                    .ToList();

                                var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                                      x.Self == true &&
                                                      !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                                if (SelfMaillist.Count() > 0)
                                {
                                    // Fetch data from the database
                                    var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                                    // Filter the results in memory using LINQ to Objects
                                    var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                                    SendMail.Add(SelfMailId);
                                }

                                //Send Mail Notification
                                SendMail = SendMail.Distinct().ToList();
                                if (SendMail.Count() > 0)
                                {
                                    string Body = "";
                                    var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                    Body = "<html>";
                                    Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received By Late Notification!!!" + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                    Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received By Late Notification" + "</b></span></p>";
                                    Body += "<br/>";
                                    if (lRMaster != null)
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                    }

                                    Body += "<br/>";
                                    Body += htmlTableBuilder.ToString();
                                    Body += "</html>";
                                    string Subject = "POD Received By Late Notification!!!";
                                    string SendTo = string.Join(",", SendMail);
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received By Late Notification. ", "Auto Mail Notification");
                                }
                                #endregion
                            }
                        }
                    }
                    else
                    {
                        var GetLastPodSend = ctxTFAT.PODRel.Where(x => x.LRRefTablekey == pODRel.LRRefTablekey && x.SendReceive == "S").OrderByDescending(x => x.RECORDKEY).FirstOrDefault();
                        if (GetLastPodSend != null)
                        {
                            var POdMaster = ctxTFAT.PODMaster.Where(x => x.TableKey == GetLastPodSend.ParentKey).FirstOrDefault();
                            if (POdMaster != null)
                            {
                                CurrentDate = ConvertDDMMYYTOYYMMDD(POdMaster.PODDate.ToShortDateString());
                                Notificationlist = tfatAlt.
                                    Where(x => x.SubType == "Received Days" &&
                                    pODMaster.PODDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                                    .ToList();

                                if (Notificationlist.Count() > 0)
                                {
                                    var htmlTableBuilder = GetPODHtmlDetails(pODMaster, pODRel);

                                    #region Notification Send

                                    //Bind Entity Using Users Columns
                                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                                       SelectMany(x => x.User.Split(',').
                                                       Select(user => new tfatNotification
                                                       {
                                                           Srl = "",
                                                           CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                           Clear = false,
                                                           Priority = x.Priority,
                                                           DocType = "POD00",
                                                           DocNo = pODMaster.PODNo.ToString(),
                                                           Parentkey = pODMaster.ParentKey.ToString(),
                                                           Tablekey = pODMaster.TableKey.ToString(),
                                                           Describe = "POD Received By Late Notification!!!",
                                                           Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails : "<span>POD Received By Late...!</span>" + PODDetails,
                                                           HtmlString = htmlTableBuilder.ToString(),
                                                           prefix = mperiod,
                                                           Branch = mbranchcode,
                                                           ToUser = user,
                                                           AUTHIDS = muserid,
                                                           AUTHORISE = "A00",
                                                           ENTEREDBY = muserid,
                                                           LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                       })).ToList();

                                    //Bind Entity For Self
                                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                                           x.Self == true &&
                                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                           {
                                                               Srl = x.RECORDKEY.ToString(),
                                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                               Clear = false,
                                                               Priority = x.Priority,
                                                               DocType = "POD00",
                                                               DocNo = pODMaster.PODNo.ToString(),
                                                               Parentkey = pODMaster.ParentKey.ToString(),
                                                               Tablekey = pODMaster.TableKey.ToString(),
                                                               Describe = "POD Received By Late Notification!!!",
                                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received By Late...!</span>" + PODDetails : "<span>POD Received By Late...!</span>" + PODDetails,
                                                               HtmlString = htmlTableBuilder.ToString(),
                                                               prefix = mperiod,
                                                               Branch = mbranchcode,
                                                               ToUser = muserid,
                                                               AUTHIDS = muserid,
                                                               AUTHORISE = "A00",
                                                               ENTEREDBY = muserid,
                                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                           }).ToList();

                                    SendNotification.AddRange(NotificatnToSelf);
                                    SendNotification = SendNotification.Distinct().ToList();
                                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                                    foreach (var item in SendNotification)
                                    {
                                        item.Srl = (NotificationCode++).ToString("D6");
                                    }
                                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                                    ctxTFAT.SaveChanges();

                                    #endregion

                                    #region Send Mail

                                    //Bind Entity Using Users Columns
                                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                                    Regex regex = new Regex(emailPattern);

                                    var SendMail = Notificationlist
                                        .Where(x => x.Email == true)
                                        .SelectMany(x => x.User.Split(',')
                                            .Select(user => ctxTFAT.TfatPass
                                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                                .Select(tfat => tfat.Email)
                                                .FirstOrDefault()))
                                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                                        .ToList();

                                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                                          x.Self == true &&
                                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                                    if (SelfMaillist.Count() > 0)
                                    {
                                        // Fetch data from the database
                                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                                        // Filter the results in memory using LINQ to Objects
                                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                                        SendMail.Add(SelfMailId);
                                    }

                                    //Send Mail Notification
                                    SendMail = SendMail.Distinct().ToList();
                                    if (SendMail.Count() > 0)
                                    {
                                        string Body = "";
                                        var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                        Body = "<html>";
                                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received By Late Notification!!!" + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received By Late Notification" + "</b></span></p>";
                                        Body += "<br/>";
                                        if (lRMaster != null)
                                        {
                                            Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                            Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                        }

                                        Body += "<br/>";
                                        Body += htmlTableBuilder.ToString();
                                        Body += "</html>";
                                        string Subject = "POD Received By Late Notification!!!";
                                        string SendTo = string.Join(",", SendMail);
                                        SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received By Late Notification. ", "Auto Mail Notification");
                                    }
                                    #endregion
                                }
                            }
                        }
                    }

                    #endregion Forward Days Notification

                    #region NO-Delivery

                    if (pODMaster.Task == "Direct" && NoDelivery == true)
                    {
                        Notificationlist = tfatAlt.
                            Where(x => x.SubType == "NO-Delivery" &&
                            ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                            .ToList();
                        if (Notificationlist.Count() > 0)
                        {
                            #region Notification Send

                            //Bind Entity Using Users Columns
                            var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                                   SelectMany(x => x.User.Split(',').
                                                   Select(user => new tfatNotification
                                                   {
                                                       Srl = "",
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.Priority,
                                                       DocType = "POD00",
                                                       DocNo = pODMaster.PODNo.ToString(),
                                                       Parentkey = pODMaster.ParentKey.ToString(),
                                                       Tablekey = pODMaster.TableKey.ToString(),
                                                       Describe = "POD Received Without Delivery Notification!!!",
                                                       Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails : "<span>POD Received Without Delivery...!</span>" + PODDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = user,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   })).ToList();

                            //Bind Entity For Self
                            var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                                   x.Self == true &&
                                                   !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                   {
                                                       Srl = x.RECORDKEY.ToString(),
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.Priority,
                                                       DocType = "POD00",
                                                       DocNo = pODMaster.PODNo.ToString(),
                                                       Parentkey = pODMaster.ParentKey.ToString(),
                                                       Tablekey = pODMaster.TableKey.ToString(),
                                                       Describe = "POD Received Without Delivery Notification!!!",
                                                       Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Received Without Delivery...!</span>" + PODDetails : "<span>POD Received Without Delivery...!</span>" + PODDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = muserid,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   }).ToList();

                            SendNotification.AddRange(NotificatnToSelf);
                            SendNotification = SendNotification.Distinct().ToList();
                            var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                            foreach (var item in SendNotification)
                            {
                                item.Srl = (NotificationCode++).ToString("D6");
                            }
                            ctxTFAT.tfatNotification.AddRange(SendNotification);
                            ctxTFAT.SaveChanges();

                            #endregion

                            #region Send Mail

                            //Bind Entity Using Users Columns
                            string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                            Regex regex = new Regex(emailPattern);

                            var SendMail = Notificationlist
                                .Where(x => x.Email == true)
                                .SelectMany(x => x.User.Split(',')
                                    .Select(user => ctxTFAT.TfatPass
                                        .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                        .Select(tfat => tfat.Email)
                                        .FirstOrDefault()))
                                .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                                .ToList();

                            var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                                  x.Self == true &&
                                                  !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                            if (SelfMaillist.Count() > 0)
                            {
                                // Fetch data from the database
                                var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                                // Filter the results in memory using LINQ to Objects
                                var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                                SendMail.Add(SelfMailId);
                            }

                            //Send Mail Notification
                            SendMail = SendMail.Distinct().ToList();
                            if (SendMail.Count() > 0)
                            {
                                string Body = "";
                                var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                Body = "<html>";
                                Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Received Without Delivery Notification!!!" + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Received Without Delivery Notification" + "</b></span></p>";
                                Body += "<br/>";
                                if (lRMaster != null)
                                {
                                    Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                }

                                Body += "<br/>";
                                Body += PODDetails.ToString();
                                Body += "</html>";
                                string Subject = "POD Received Without Delivery Notification!!!";
                                string SendTo = string.Join(",", SendMail);
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Received Without Delivery Notification. ", "Auto Mail Notification");
                            }
                            #endregion
                        }
                    }

                    #endregion NO-Delivery
                }
                else if (pODMaster.SendReceive == "S")
                {
                    #region POD Send Notification

                    var GetLastPodReceive = ctxTFAT.PODRel.Where(x => x.LRRefTablekey == pODRel.LRRefTablekey && x.SendReceive == "R").OrderByDescending(x => x.RECORDKEY).FirstOrDefault();
                    if (GetLastPodReceive != null)
                    {
                        var PodMaster = ctxTFAT.PODMaster.Where(x => x.TableKey == GetLastPodReceive.ParentKey).FirstOrDefault();
                        if (PodMaster != null)
                        {
                            var CurrentDate = ConvertDDMMYYTOYYMMDD(PodMaster.PODDate.ToShortDateString());

                            var Notificationlist = tfatAlt.
                            Where(x => x.SubType == "Send Days" &&
                            pODMaster.PODDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                            ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                            .ToList();

                            if (Notificationlist.Count() > 0)
                            {
                                string PODDetails = GetPODDetails(pODMaster, pODRel);
                                var htmlTableBuilder = GetPODHtmlDetails(pODMaster, pODRel);

                                #region Notification Send

                                //Bind Entity Using Users Columns
                                var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                                   SelectMany(x => x.User.Split(',').
                                                   Select(user => new tfatNotification
                                                   {
                                                       Srl = "",
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.Priority,
                                                       DocType = "POD00",
                                                       DocNo = pODMaster.PODNo.ToString(),
                                                       Parentkey = pODMaster.ParentKey.ToString(),
                                                       Tablekey = pODMaster.TableKey.ToString(),
                                                       Describe = "POD Send By Late Notification!!!",
                                                       Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails : "<span>POD Send By Late...!</span>" + PODDetails,
                                                       HtmlString = htmlTableBuilder.ToString(),
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = user,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   })).ToList();

                                //Bind Entity For Self
                                var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                                       x.Self == true &&
                                                       !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                       {
                                                           Srl = x.RECORDKEY.ToString(),
                                                           CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                           Clear = false,
                                                           Priority = x.Priority,
                                                           DocType = "POD00",
                                                           DocNo = pODMaster.PODNo.ToString(),
                                                           Parentkey = pODMaster.ParentKey.ToString(),
                                                           Tablekey = pODMaster.TableKey.ToString(),
                                                           Describe = "POD Send By Late Notification!!!",
                                                           Msg = x.Priority == true ? "<span style=\"color: red!important;\">POD Send By Late...!</span>" + PODDetails : "<span>POD Send By Late...!</span>" + PODDetails,
                                                           HtmlString = htmlTableBuilder.ToString(),
                                                           prefix = mperiod,
                                                           Branch = mbranchcode,
                                                           ToUser = muserid,
                                                           AUTHIDS = muserid,
                                                           AUTHORISE = "A00",
                                                           ENTEREDBY = muserid,
                                                           LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                       }).ToList();

                                SendNotification.AddRange(NotificatnToSelf);
                                SendNotification = SendNotification.Distinct().ToList();
                                var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                                foreach (var item in SendNotification)
                                {
                                    item.Srl = (NotificationCode++).ToString("D6");
                                }
                                ctxTFAT.tfatNotification.AddRange(SendNotification);
                                ctxTFAT.SaveChanges();

                                #endregion

                                #region Send Mail

                                //Bind Entity Using Users Columns
                                string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                                Regex regex = new Regex(emailPattern);

                                var SendMail = Notificationlist
                                    .Where(x => x.Email == true)
                                    .SelectMany(x => x.User.Split(',')
                                        .Select(user => ctxTFAT.TfatPass
                                            .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                            .Select(tfat => tfat.Email)
                                            .FirstOrDefault()))
                                    .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                                    .ToList();

                                var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                                      x.Self == true &&
                                                      !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                                if (SelfMaillist.Count() > 0)
                                {
                                    // Fetch data from the database
                                    var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                                    // Filter the results in memory using LINQ to Objects
                                    var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                                    SendMail.Add(SelfMailId);
                                }

                                //Send Mail Notification
                                SendMail = SendMail.Distinct().ToList();
                                if (SendMail.Count() > 0)
                                {
                                    string Body = "";
                                    var lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == pODRel.LRRefTablekey).FirstOrDefault();
                                    Body = "<html>";
                                    Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "POD Send By Late Notification!!!" + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                                    Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                                    Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "POD Send By Late Notification" + "</b></span></p>";
                                    Body += "<br/>";
                                    if (lRMaster != null)
                                    {
                                        Body += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                                        Body += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                                    }

                                    Body += "<br/>";
                                    Body += htmlTableBuilder.ToString();
                                    Body += "</html>";
                                    string Subject = "POD Send By Late Notification!!!";
                                    string SendTo = string.Join(",", SendMail);
                                    SendNotificationMail(SendTo, Subject, Body, "Auto Email POD Send By Late Notification. ", "Auto Mail Notification");
                                }
                                #endregion
                            }

                        }
                    }

                    #endregion POD Send Notification
                }
            }
        }

        #endregion

        #region Bill Submission

        public string GetBillSubmissionDetails(BillSubmission mobj, BillSubRef billSubRef)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            htmlTableBuilder.Append("<br>Below Are " + mobj.DocType + " Submission Details.");
            htmlTableBuilder.Append("<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>No : " + mobj.DocNo);
            htmlTableBuilder.Append(".<br>DocDate : " + mobj.DocDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>SubDate : " + mobj.SubDt.ToShortDateString());
            htmlTableBuilder.Append(".<br>Remark : " + mobj.Remark);
            htmlTableBuilder.Append(".<br>***Invoice Details*** ");
            htmlTableBuilder.Append("<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Serial : " + billSubRef.BillNo);
            htmlTableBuilder.Append(".<br>Date : " + billSubRef.BillDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>Amount : " + billSubRef.Amount);
            htmlTableBuilder.Append(".<br>Customer : " + ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Master : " + ctxTFAT.Master.Where(x => x.Code == billSubRef.PartyGroup).Select(x => x.Name).FirstOrDefault());

            return htmlTableBuilder.ToString();
        }

        public void OLD_BillSubmissionNotification(BillSubmission mobj, BillSubRef billSubRef)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string BillSubDetails = GetBillSubmissionDetails(mobj, billSubRef);

                //Back Days
                if (tfatAlt.BSBDN == true || tfatAlt.BSBDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays((tfatAlt.BSBDDays) * (-1));
                    if (mobj.SubDt < CurrentDate)
                    {
                        if (tfatAlt.BSBDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.BSBDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.FMBDSelf)
                                {
                                    var Userlist = tfatAlt.BSBDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.BSBDU))
                                {
                                    foreach (var item in tfatAlt.BSBDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSBDP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.BSBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.BSBDP;
                                    tfatNotification.DocType = "BLSMT";
                                    tfatNotification.DocNo = mobj.DocNo.ToString();
                                    tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                    tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                    tfatNotification.Describe = "Back Date Notification!";
                                    if (tfatAlt.BSBDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.BSBDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.BSBDSelf)
                                    {
                                        var Userlist = tfatAlt.BSBDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.BSBDU))
                                    {
                                        foreach (var item in tfatAlt.BSBDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.BSBDP;
                                            tfatNotification.DocType = "BLSMT";
                                            tfatNotification.DocNo = mobj.DocNo.ToString();
                                            tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                            tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                            tfatNotification.Describe = "Back Date Notification!";
                                            if (tfatAlt.BSBDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSBDP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Back Date Notification!";
                                        if (tfatAlt.BSBDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.BSBDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Bill Submission Back Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Bill Submission Back Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(mobj.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                            Body += "</html>";
                            string Subject = "Bill Submission Back Date Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.BSBDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.BSBDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.BSBDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Bill Submission For Back Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Forward Days
                if (tfatAlt.BSFDN == true || tfatAlt.BSFDE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays(tfatAlt.BSFDDays);
                    if (mobj.SubDt > CurrentDate)
                    {
                        if (tfatAlt.BSFDN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.BSFDBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.BSFDSelf)
                                {
                                    var Userlist = tfatAlt.BSFDU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.BSFDU))
                                {
                                    foreach (var item in tfatAlt.BSFDU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSFDP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.BSFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.BSFDP;
                                    tfatNotification.DocType = "BLSMT";
                                    tfatNotification.DocNo = mobj.DocNo.ToString();
                                    tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                    tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                    tfatNotification.Describe = "Forward Date Notification!";
                                    if (tfatAlt.BSFDP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.BSFDBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.BSFDSelf)
                                    {
                                        var Userlist = tfatAlt.BSFDU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.BSFDU))
                                    {
                                        foreach (var item in tfatAlt.BSFDU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.BSFDP;
                                            tfatNotification.DocType = "BLSMT";
                                            tfatNotification.DocNo = mobj.DocNo.ToString();
                                            tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                            tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                            tfatNotification.Describe = "Forward Date Notification!";
                                            if (tfatAlt.BSFDP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSFDP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Forward Date Notification!";
                                        if (tfatAlt.BSFDP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.BSFDE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Bill Submission Forward Date Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Bill Submission Forward Date Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(mobj.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                            Body += "</html>";
                            string Subject = "Bill Submission Forward Date Notification!!!";
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.BSFDU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.BSFDU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.BSFDSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Bill Submission For Forward Date Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }

                //Late Submission
                if (tfatAlt.BSLSN == true || tfatAlt.BSLSE == true)
                {
                    var InvDate = ConvertDDMMYYTOYYMMDD(billSubRef.BillDate.ToShortDateString());
                    InvDate = InvDate.AddDays(tfatAlt.BSLSDays);
                    if (mobj.SubDt > InvDate)
                    {
                        if (tfatAlt.BSLSN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.BSLSBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.BSLSSelf)
                                {
                                    var Userlist = tfatAlt.BSLSU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.BSLSU))
                                {
                                    foreach (var item in tfatAlt.BSLSU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSLSP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Late Bill Submission Notification!";
                                        if (tfatAlt.BSLSP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Late Bill Submission...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.BSLSP;
                                    tfatNotification.DocType = "BLSMT";
                                    tfatNotification.DocNo = mobj.DocNo.ToString();
                                    tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                    tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                    tfatNotification.Describe = "Late Bill Submission Notification!";
                                    if (tfatAlt.BSLSP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Late Bill Submission...!</span>" + BillSubDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.BSLSBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.BSLSSelf)
                                    {
                                        var Userlist = tfatAlt.BSLSU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.BSLSU))
                                    {
                                        foreach (var item in tfatAlt.BSLSU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.BSLSP;
                                            tfatNotification.DocType = "BLSMT";
                                            tfatNotification.DocNo = mobj.DocNo.ToString();
                                            tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                            tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                            tfatNotification.Describe = "Late Bill Submission Notification!";
                                            if (tfatAlt.BSLSP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Late Bill Submission...!</span>" + BillSubDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.BSLSP;
                                        tfatNotification.DocType = "BLSMT";
                                        tfatNotification.DocNo = mobj.DocNo.ToString();
                                        tfatNotification.Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo;
                                        tfatNotification.Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo;
                                        tfatNotification.Describe = "Late Bill Submission Notification!";
                                        if (tfatAlt.BSLSP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Late Bill Submission...!</span>" + BillSubDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.BSLSE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Late Bill Submission Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Late Bill Submission Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            if (!String.IsNullOrEmpty(mobj.Remark))
                            {
                                Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                            }
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                            Body += "</html>";
                            string Subject = "Late Bill Submission Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.BSLSU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.BSLSU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.BSLSSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Late Bill Submission Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }
            }
        }

        public void BillSubmissionNotification(BillSubmission mobj, BillSubRef billSubRef)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "BILL SUBMISSION").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string BillSubDetails = GetBillSubmissionDetails(mobj, billSubRef);

                #region Back Days Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Back Days" &&
                    mobj.SubDt < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails : "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = "Back Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails : "<span>Bill Submission Date Using Back Date Selected...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Bill Submission Back Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Bill Submission Back Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(mobj.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                        Body += "</html>";
                        string Subject = "Bill Submission Back Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Bill Submission For Back Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Back Days Notification

                #region Forward Days Notification

                Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Forward Days" &&
                    mobj.SubDt > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails : "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = "Forward Date Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails : "<span>Bill Submission Date Using Forward Date Selected...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Bill Submission Forward Date Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Bill Submission Forward Date Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(mobj.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                        Body += "</html>";
                        string Subject = "Bill Submission Forward Date Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Bill Submission For Forward Date Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Forward Days Notification

                #region Late Submission Notification

                CurrentDate = ConvertDDMMYYTOYYMMDD(billSubRef.BillDate.ToShortDateString());

                Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Late Submission" &&
                    mobj.SubDt > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    TimeSpan difference = CurrentDate - mobj.SubDt;
                    int daysDifference = difference.Days;

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = daysDifference +" Days Late Bill Submission Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails : "<span>Late Bill Submission...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "BLSMT",
                                               DocNo = mobj.DocNo.ToString(),
                                               Parentkey = "BLSMT" + mperiod.Substring(0, 2) + mobj.DocNo,
                                               Tablekey = "BLSMT" + mperiod.Substring(0, 2) + "001" + mobj.DocNo,
                                               Describe = daysDifference+" Days Late Bill Submission Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Bill Submission...!</span>" + BillSubDetails : "<span>Late Bill Submission...!</span>" + BillSubDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Late Bill Submission Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Late Bill Submission Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\"><b> " + mobj.DocType + " Bill Submission Details</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission No: <b>" + mobj.DocNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Date: <b>" + mobj.SubDt.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == mobj.Party).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        if (!String.IsNullOrEmpty(mobj.Remark))
                        {
                            Body += "<p><span style=\"font-family:Tahoma\">Bill Submission Remark: <b>" + mobj.Remark + "</b></span></p>";
                        }
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == billSubRef.BillBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Branch No: <b>" + billSubRef.BillNo + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Date: <b>" + billSubRef.BillDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Invoice Amount: <b>" + billSubRef.Amount.ToString("F2") + "</b></span></p>";

                        Body += "</html>";
                        string Subject = "Late Bill Submission Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Late Bill Submission Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Late Submission Notification
            }
        }

        #endregion

        #region Authorisation

        public string GetDocAuthorisationDetails(Authorisation mobj)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            htmlTableBuilder.Append("<br>Below Are Document Authorisation Details");
            htmlTableBuilder.Append(".<br>Authorised Date : " + DateTime.Now.ToShortDateString());
            htmlTableBuilder.Append(".<br>Authorised By : " + ctxTFAT.TfatPass.Where(x => x.Code == mobj.AuthBy).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Authorised In Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>***Document Details*** ");
            htmlTableBuilder.Append(".<br>Type : " + mobj.Type);
            htmlTableBuilder.Append(".<br>Serial No : " + mobj.Srl);
            htmlTableBuilder.Append(".<br>DocDate : " + mobj.DocDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Amount : " + mobj.Amount);
            htmlTableBuilder.Append(".<br>Account : " + ctxTFAT.Master.Where(x => x.Code == mobj.Code).Select(x => x.Name).FirstOrDefault());

            return htmlTableBuilder.ToString();
        }

        public void OLD_DocAuthorisationNotification(Authorisation mobj)
        {
            tfatAltNotification tfatAlt = ctxTFAT.tfatAltNotification.FirstOrDefault();
            if (tfatAlt != null)
            {
                string DocAuthorisationDetails = GetDocAuthorisationDetails(mobj);

                //Late Authorisation
                if (tfatAlt.DAAUTHN == true || tfatAlt.DAAUTHE == true)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    CurrentDate = CurrentDate.AddDays(tfatAlt.DAAUTHDays);
                    if (ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()) > CurrentDate)
                    {
                        if (tfatAlt.DAAUTHN)
                        {
                            //if branch is null means send notification to all branch
                            if (string.IsNullOrEmpty(tfatAlt.DAAUTHBranch))
                            {
                                bool SendToSelfNoti = false;
                                if (tfatAlt.DAAUTHSelf)
                                {
                                    var Userlist = tfatAlt.DAAUTHU.Split(',').ToList();
                                    var UserIndex = Userlist.FindIndex(a => a == muserid);
                                    if (UserIndex < 0)
                                    {
                                        SendToSelfNoti = true;
                                    }
                                }
                                if (!string.IsNullOrEmpty(tfatAlt.DAAUTHU))
                                {
                                    foreach (var item in tfatAlt.DAAUTHU.Split(',').ToList())
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.DAAUTHP;
                                        tfatNotification.DocType = "DOCAZ";
                                        tfatNotification.DocNo = mobj.Srl.ToString();
                                        tfatNotification.Parentkey = mobj.ParentKey;
                                        tfatNotification.Tablekey = mobj.TableKey;
                                        tfatNotification.Describe = "Late Authorisation Notification!";
                                        if (tfatAlt.DAAUTHP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Late Authorisation...!</span>" + DocAuthorisationDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = item;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }

                                if (SendToSelfNoti)
                                {
                                    tfatNotification tfatNotification = new tfatNotification();
                                    tfatNotification.Srl = GenerateNotificationCode();
                                    tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                    tfatNotification.Clear = false;
                                    tfatNotification.Priority = tfatAlt.DAAUTHP;
                                    tfatNotification.DocType = "DOCAZ";
                                    tfatNotification.DocNo = mobj.Srl.ToString();
                                    tfatNotification.Parentkey = mobj.ParentKey;
                                    tfatNotification.Tablekey = mobj.TableKey;
                                    tfatNotification.Describe = "Late Authorisation Notification!";
                                    if (tfatAlt.DAAUTHP)
                                    {
                                        tfatNotification.Msg = "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails;
                                    }
                                    else
                                    {
                                        tfatNotification.Msg = "<span>Late Authorisation...!</span>" + DocAuthorisationDetails;
                                    }
                                    tfatNotification.HtmlString = null;
                                    tfatNotification.prefix = mperiod;
                                    tfatNotification.Branch = mbranchcode;
                                    tfatNotification.ToUser = muserid;
                                    tfatNotification.AUTHIDS = muserid;
                                    tfatNotification.AUTHORISE = "A00";
                                    tfatNotification.ENTEREDBY = muserid;
                                    tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                    ctxTFAT.tfatNotification.Add(tfatNotification);
                                    ctxTFAT.SaveChanges();
                                }
                            }
                            else
                            //Send Notification to particular branch only
                            {
                                var BranchNotiReq = 0;
                                var Branchlist = tfatAlt.DAAUTHBranch.Split(',').ToList();
                                BranchNotiReq = Branchlist.FindIndex(a => a == mbranchcode);
                                if (BranchNotiReq >= 0)
                                {
                                    bool SendToSelfNoti = false;
                                    if (tfatAlt.DAAUTHSelf)
                                    {
                                        var Userlist = tfatAlt.DAAUTHU.Split(',').ToList();
                                        var UserIndex = Userlist.FindIndex(a => a == muserid);
                                        if (UserIndex < 0)
                                        {
                                            SendToSelfNoti = true;
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(tfatAlt.DAAUTHU))
                                    {
                                        foreach (var item in tfatAlt.DAAUTHU.Split(',').ToList())
                                        {
                                            tfatNotification tfatNotification = new tfatNotification();
                                            tfatNotification.Srl = GenerateNotificationCode();
                                            tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                            tfatNotification.Clear = false;
                                            tfatNotification.Priority = tfatAlt.DAAUTHP;
                                            tfatNotification.DocType = "DOCAZ";
                                            tfatNotification.DocNo = mobj.Srl.ToString();
                                            tfatNotification.Parentkey = mobj.ParentKey;
                                            tfatNotification.Tablekey = mobj.TableKey;
                                            tfatNotification.Describe = "Late Authorisation Notification!";
                                            if (tfatAlt.DAAUTHP)
                                            {
                                                tfatNotification.Msg = "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails;
                                            }
                                            else
                                            {
                                                tfatNotification.Msg = "<span>Late Authorisation...!</span>" + DocAuthorisationDetails;
                                            }
                                            tfatNotification.HtmlString = null;
                                            tfatNotification.prefix = mperiod;
                                            tfatNotification.Branch = mbranchcode;
                                            tfatNotification.ToUser = item;
                                            tfatNotification.AUTHIDS = muserid;
                                            tfatNotification.AUTHORISE = "A00";
                                            tfatNotification.ENTEREDBY = muserid;
                                            tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                            ctxTFAT.tfatNotification.Add(tfatNotification);
                                            ctxTFAT.SaveChanges();
                                        }
                                    }

                                    if (SendToSelfNoti)
                                    {
                                        tfatNotification tfatNotification = new tfatNotification();
                                        tfatNotification.Srl = GenerateNotificationCode();
                                        tfatNotification.CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                                        tfatNotification.Clear = false;
                                        tfatNotification.Priority = tfatAlt.DAAUTHP;
                                        tfatNotification.DocType = "DOCAZ";
                                        tfatNotification.DocNo = mobj.Srl.ToString();
                                        tfatNotification.Parentkey = mobj.ParentKey;
                                        tfatNotification.Tablekey = mobj.TableKey;
                                        tfatNotification.Describe = "Late Authorisation Notification!";
                                        if (tfatAlt.DAAUTHP)
                                        {
                                            tfatNotification.Msg = "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails;
                                        }
                                        else
                                        {
                                            tfatNotification.Msg = "<span>Late Authorisation...!</span>" + DocAuthorisationDetails;
                                        }
                                        tfatNotification.HtmlString = null;
                                        tfatNotification.prefix = mperiod;
                                        tfatNotification.Branch = mbranchcode;
                                        tfatNotification.ToUser = muserid;
                                        tfatNotification.AUTHIDS = muserid;
                                        tfatNotification.AUTHORISE = "A00";
                                        tfatNotification.ENTEREDBY = muserid;
                                        tfatNotification.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                                        ctxTFAT.tfatNotification.Add(tfatNotification);
                                        ctxTFAT.SaveChanges();
                                    }
                                }
                            }
                        }
                        if (tfatAlt.DAAUTHE)
                        {
                            string Body = "";
                            Body = "<html>";
                            Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Late Authorisation Notification!!!" + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Late Authorisation Notification" + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\"><b>***Authorisation Details***</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Authorised Date: <b>" + DateTime.Now.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Authorised By: <b>" + ctxTFAT.TfatPass.Where(x => x.Code == mobj.AuthBy).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Authorised Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<br/>";
                            Body += "<p><span style=\"font-family:Tahoma\"><b>***Document Details***</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Type: <b>" + mobj.Type + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Serial No: <b>" + mobj.Srl + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">DocDate: <b>" + mobj.DocDate.ToShortDateString() + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Amount: <b>" + mobj.Amount + "</b></span></p>";
                            Body += "<p><span style=\"font-family:Tahoma\">Account: <b>" + (ctxTFAT.Master.Where(x => x.Code == mobj.Code).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            Body += "</html>";
                            string Subject = "Late Authorisation Notification!!!";
                            //string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "charindex (Code,'" + tfatAlt.FMBDU + "')<>0 and Email like '%@%'");
                            string SendTo = Fieldoftable("TfatPass", "STRING_AGG(email, ',')", "',' + '" + tfatAlt.DAAUTHU + "' + ',' LIKE '%,' + Code + ',%' and Email like '%@%'");
                            var Userlist = tfatAlt.DAAUTHU.Split(',').ToList();
                            var UserIndex = Userlist.FindIndex(a => a == muserid);
                            if (UserIndex < 0 && tfatAlt.DAAUTHSelf)
                            {
                                var UserMailId = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.Email).FirstOrDefault();
                                if (!string.IsNullOrEmpty(UserMailId))
                                {
                                    if (UserMailId.Contains("@"))
                                    {
                                        SendTo += "," + UserMailId;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(SendTo))
                            {
                                SendNotificationMail(SendTo, Subject, Body, "Auto Email Late Authorisation Notification. ", "Auto Mail Notification");
                            }
                        }
                    }
                }
            }
        }

        public void DocAuthorisationNotification(Authorisation mobj)
        {
            var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "DOC AUTHENTICATION").ToList();
            if (tfatAlt != null && tfatAlt.Count() > 0)
            {
                var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                string DocAuthorisationDetails = GetDocAuthorisationDetails(mobj);

                #region Late Authorisation Notification

                var Notificationlist = tfatAlt.
                    Where(x => x.SubType == "Late Submission" &&
                    ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()) > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                    ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                    .ToList();

                if (Notificationlist.Count() > 0)
                {
                    #region Notification Send

                    //Bind Entity Using Users Columns
                    var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                           SelectMany(x => x.User.Split(',').
                                           Select(user => new tfatNotification
                                           {
                                               Srl = "",
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "DOCAZ",
                                               DocNo = mobj.Srl.ToString(),
                                               Parentkey = mobj.ParentKey,
                                               Tablekey = mobj.TableKey,
                                               Describe = "Late Authorisation Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails : "<span>Late Authorisation...!</span>" + DocAuthorisationDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = user,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           })).ToList();

                    //Bind Entity For Self
                    var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                           x.Self == true &&
                                           !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                           {
                                               Srl = x.RECORDKEY.ToString(),
                                               CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                               Clear = false,
                                               Priority = x.Priority,
                                               DocType = "DOCAZ",
                                               DocNo = mobj.Srl.ToString(),
                                               Parentkey = mobj.ParentKey,
                                               Tablekey = mobj.TableKey,
                                               Describe = "Late Authorisation Notification!!!",
                                               Msg = x.Priority == true ? "<span style=\"color: red!important;\">Late Authorisation...!</span>" + DocAuthorisationDetails : "<span>Late Authorisation...!</span>" + DocAuthorisationDetails,
                                               HtmlString = null,
                                               prefix = mperiod,
                                               Branch = mbranchcode,
                                               ToUser = muserid,
                                               AUTHIDS = muserid,
                                               AUTHORISE = "A00",
                                               ENTEREDBY = muserid,
                                               LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                           }).ToList();

                    SendNotification.AddRange(NotificatnToSelf);
                    SendNotification = SendNotification.Distinct().ToList();
                    var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                    foreach (var item in SendNotification)
                    {
                        item.Srl = (NotificationCode++).ToString("D6");
                    }
                    ctxTFAT.tfatNotification.AddRange(SendNotification);
                    ctxTFAT.SaveChanges();

                    #endregion

                    #region Send Mail

                    //Bind Entity Using Users Columns
                    string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                    Regex regex = new Regex(emailPattern);

                    var SendMail = Notificationlist
                        .Where(x => x.Email == true)
                        .SelectMany(x => x.User.Split(',')
                            .Select(user => ctxTFAT.TfatPass
                                .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                .Select(tfat => tfat.Email)
                                .FirstOrDefault()))
                        .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                        .ToList();

                    var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                          x.Self == true &&
                                          !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                    if (SelfMaillist.Count() > 0)
                    {
                        // Fetch data from the database
                        var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                        // Filter the results in memory using LINQ to Objects
                        var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                        SendMail.Add(SelfMailId);
                    }

                    //Send Mail Notification
                    SendMail = SendMail.Distinct().ToList();
                    if (SendMail.Count() > 0)
                    {
                        string Body = "";
                        Body = "<html>";
                        Body += "<p><span style=\"color:#ff00bc;font-family:Tahoma;font-size:14pt;\"><b>" + "Late Authorisation Notification!!!" + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        Body += "<p><span style=\"color:#1b00ffe3;font-family:Tahoma;font-size:12pt;\"><b>" + "Late Authorisation Notification" + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\"><b>***Authorisation Details***</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Authorised Date: <b>" + DateTime.Now.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Authorised By: <b>" + ctxTFAT.TfatPass.Where(x => x.Code == mobj.AuthBy).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Authorised Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<br/>";
                        Body += "<p><span style=\"font-family:Tahoma\"><b>***Document Details***</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Type: <b>" + mobj.Type + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Serial No: <b>" + mobj.Srl + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">DocDate: <b>" + mobj.DocDate.ToShortDateString() + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Branch: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Amount: <b>" + mobj.Amount + "</b></span></p>";
                        Body += "<p><span style=\"font-family:Tahoma\">Account: <b>" + (ctxTFAT.Master.Where(x => x.Code == mobj.Code).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        Body += "</html>";
                        string Subject = "Late Authorisation Notification!!!";
                        string SendTo = string.Join(",", SendMail);
                        SendNotificationMail(SendTo, Subject, Body, "Auto Email Late Authorisation Notification. ", "Auto Mail Notification");
                    }
                    #endregion
                }

                #endregion Late Authorisation Notification
            }
        }

        #endregion

        #region Advance Balance Payment

        public string GetAdvanceBalancePaymentDetails(VoucherMaster mobj)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            htmlTableBuilder.Append("<br>Below Are Advance Balance Payment Details");
            htmlTableBuilder.Append(".<br>Serial No : " + mobj.VouNo);
            htmlTableBuilder.Append(".<br>DocDate : " + mobj.VouDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Amount : " + mobj.Amount);
            htmlTableBuilder.Append(".<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == mobj.Account).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Bank A/C : " + ctxTFAT.Master.Where(x => x.Code == mobj.Bank).Select(x => x.Name).FirstOrDefault() + ".");
            if (!String.IsNullOrEmpty(mobj.Remark))
            {
                htmlTableBuilder.Append("<br>Remark : " + mobj.Remark + ".");
            }
            return htmlTableBuilder.ToString();
        }
        public string GetAdvanceBalancePaymentFreightMemoDetails(VoucherMaster mobj, VoucherDetail detail)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            htmlTableBuilder.Append("<br>Below Are Advance Balance Payment Details");
            htmlTableBuilder.Append(".<br>Serial No : " + mobj.VouNo);
            htmlTableBuilder.Append(".<br>DocDate : " + mobj.VouDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Amount : " + mobj.Amount);
            htmlTableBuilder.Append(".<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == mobj.Account).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Bank A/C : " + ctxTFAT.Master.Where(x => x.Code == mobj.Bank).Select(x => x.Name).FirstOrDefault() + ".");
            if (!String.IsNullOrEmpty(mobj.Remark))
            {
                htmlTableBuilder.Append("<br>Remark : " + mobj.Remark + ".");
            }
            htmlTableBuilder.Append(".<br>***Freight Memo Details*** ");
            htmlTableBuilder.Append(".<br>FM No : " + detail.FMNo);
            htmlTableBuilder.Append(".<br>FM Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == detail.FmBran).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>FM Pay Mode : " + detail.InsClr == "B" ? "Balance" : "Advance");
            htmlTableBuilder.Append(".<br>Amount : " + detail.Amount);
            htmlTableBuilder.Append(".<br>Total Amount : " + detail.NetAmt);

            return htmlTableBuilder.ToString();
        }
        public string GetAdvanceBalancePaymentConsignmentDetails(VoucherMaster mobj, VoucherDetail detail)
        {
            StringBuilder htmlTableBuilder = new StringBuilder();
            htmlTableBuilder.Append("<br>Below Are Advance Balance Payment Details");
            htmlTableBuilder.Append(".<br>Serial No : " + mobj.VouNo);
            htmlTableBuilder.Append(".<br>DocDate : " + mobj.VouDate.ToShortDateString());
            htmlTableBuilder.Append(".<br>Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == mobj.Branch).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Amount : " + mobj.Amount);
            htmlTableBuilder.Append(".<br>Broker : " + ctxTFAT.Master.Where(x => x.Code == mobj.Account).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>Bank A/C : " + ctxTFAT.Master.Where(x => x.Code == mobj.Bank).Select(x => x.Name).FirstOrDefault() + ".");
            if (!String.IsNullOrEmpty(mobj.Remark))
            {
                htmlTableBuilder.Append("<br>Remark : " + mobj.Remark + ".");
            }
            htmlTableBuilder.Append(".<br>***Consignment Details*** ");
            htmlTableBuilder.Append(".<br>LR No : " + detail.FMNo);
            htmlTableBuilder.Append(".<br>FM Branch : " + ctxTFAT.TfatBranch.Where(x => x.Code == detail.FmBran).Select(x => x.Name).FirstOrDefault());
            htmlTableBuilder.Append(".<br>FM Pay Mode : " + detail.InsClr == "B" ? "Balance" : "Advance");
            htmlTableBuilder.Append(".<br>Amount : " + detail.Amount);
            htmlTableBuilder.Append(".<br>Total Amount : " + detail.NetAmt);

            return htmlTableBuilder.ToString();
        }
        public void AdvanceBalancePaymentNotification(VoucherMaster mobj)
        {
            try
            {
                var tfatAlt = ctxTFAT.tfatNotificationSetup.Where(x => x.Type == "ADVANCE BALANCE PAYMENT").ToList();
                if (tfatAlt != null && tfatAlt.Count() > 0)
                {
                    var CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                    string VoucherDetails = GetAdvanceBalancePaymentDetails(mobj);

                    #region Back Days Notification

                    var Notificationlist = tfatAlt.
                        Where(x => x.SubType == "Back Days" &&
                        mobj.VouDate < CurrentDate.AddDays((Convert.ToInt32(x.Param1)) * (-1)) &&
                        ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                        .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = "Back Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Voucher Date Using Back Date Selected...!</span>" + VoucherDetails : "<span>Voucher Date Using Back Date Selected...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = "Back Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Voucher Date Using Back Date Selected...!</span>" + VoucherDetails : "<span>Voucher Date Using Back Date Selected...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";

                            string Subject = "Freight Memo Back Date Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Back Date Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Back Days Notification

                    #region Forward Days Notification

                    CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    Notificationlist = tfatAlt.
                         Where(x => x.SubType == "Forward Days" &&
                         mobj.VouDate > CurrentDate.AddDays(Convert.ToInt32(x.Param1)) &&
                         ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                         .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        #region Notification Send

                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());

                        //Bind Entity Using Users Columns
                        var SendNotification = Notificationlist.Where(x => x.Notification == true).
                                               SelectMany(x => x.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = "Forward Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Voucher Date Using Forward Date Selected...!</span>" + VoucherDetails : "<span>Voucher Date Using Forward Date Selected...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = Notificationlist.Where(x => x.Notification == true &&
                                               x.Self == true &&
                                               !x.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = "Forward Date Notification!!!",
                                                   Msg = x.Priority == true ? "<span style=\"color: red!important;\">Voucher Date Using Forward Date Selected...!</span>" + VoucherDetails : "<span>Voucher Date Using Forward Date Selected...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();

                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion

                        #region Send Mail

                        //Bind Entity Using Users Columns
                        string emailPattern = @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}";
                        Regex regex = new Regex(emailPattern);

                        var SendMail = Notificationlist
                            .Where(x => x.Email == true)
                            .SelectMany(x => x.User.Split(',')
                                .Select(user => ctxTFAT.TfatPass
                                    .Where(tfat => tfat.Code == user && !string.IsNullOrEmpty(tfat.Email))
                                    .Select(tfat => tfat.Email)
                                    .FirstOrDefault()))
                            .Where(email => !string.IsNullOrEmpty(email) && regex.IsMatch(email))
                            .ToList();

                        var SelfMaillist = Notificationlist.Where(x => x.Email == true &&
                                              x.Self == true &&
                                              !x.User.Split(',').Any(code => code.Trim() == muserid)).ToList();
                        if (SelfMaillist.Count() > 0)
                        {
                            // Fetch data from the database
                            var tfatPassList = ctxTFAT.TfatPass.Where(tfat => tfat.Code == muserid && !string.IsNullOrEmpty(tfat.Email)).ToList();

                            // Filter the results in memory using LINQ to Objects
                            var SelfMailId = tfatPassList.FirstOrDefault(tfat => regex.IsMatch(tfat.Email))?.Email;
                            SendMail.Add(SelfMailId);
                        }

                        //Send Mail Notification
                        SendMail = SendMail.Distinct().ToList();
                        if (SendMail.Count() > 0)
                        {
                            string Body = "";

                            string Subject = "Freight Memo Forward Date Notification!!!";
                            string SendTo = string.Join(",", SendMail);
                            SendNotificationMail(SendTo, Subject, Body, "Auto Email Booking Time For Forward Date Notification. ", "Auto Mail Notification");
                        }
                        #endregion
                    }

                    #endregion Forward Days Notification

                    #region Particular Charges

                    var ledger = ctxTFAT.Ledger.Where(x => x.ParentKey == mobj.TableKey && x.Debit != 0).Select(x => new { x.Code, x.Debit }).ToList();

                    var NNotificationlist = tfatAlt
                    .Where(x => x.SubType == "Particular Charges" &&
                                x.Param1 != null &&
                                (x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode) || x.Branch == null))
                    .SelectMany(x => ledger.Where(y => x.Param1.Split(',').Contains(y.Code) && y.Debit >= x.Param2)
                                           .Select(y => new { ALT = x, Code = y.Code, Charge = y.Debit }))
                    .ToList();

                    if (NNotificationlist.Count() > 0)
                    {
                        #region Notification Send

                        //Bind Entity Using Users Columns
                        var SendNotification = NNotificationlist.Where(x => x.ALT.Notification == true).
                                               SelectMany(x => x.ALT.User.Split(',').
                                               Select(user => new tfatNotification
                                               {
                                                   Srl = "",
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.ALT.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + "  Notification!!!",
                                                   Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">" + (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + " Paid More Than " + x.ALT.Param2.ToString("F2") + "...!</span>" + VoucherDetails : "<span>" + (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + " Paid More Than " + x.ALT.Param2.ToString("F2") + "...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = user,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               })).ToList();

                        //Bind Entity For Self
                        var NotificatnToSelf = NNotificationlist.Where(x => x.ALT.Notification == true &&
                                               x.ALT.Self == true &&
                                               !x.ALT.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                               {
                                                   Srl = x.ALT.RECORDKEY.ToString(),
                                                   CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                   Clear = false,
                                                   Priority = x.ALT.Priority,
                                                   DocType = "FMP00",
                                                   DocNo = mobj.VouNo.ToString(),
                                                   Parentkey = mobj.PayParentKey.ToString(),
                                                   Tablekey = mobj.TableKey.ToString(),
                                                   Describe = (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + "  Notification!!!",
                                                   Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">" + (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + " Paid More Than " + x.Charge.Value.ToString("F2") + "...!</span>" + VoucherDetails : "<span>" + (ctxTFAT.Master.Where(m => m.Code == x.Code).Select(m => m.Name).FirstOrDefault()) + " Paid More Than " + x.Charge.Value.ToString("F2") + "...!</span>" + VoucherDetails,
                                                   HtmlString = null,
                                                   prefix = mperiod,
                                                   Branch = mbranchcode,
                                                   ToUser = muserid,
                                                   AUTHIDS = muserid,
                                                   AUTHORISE = "A00",
                                                   ENTEREDBY = muserid,
                                                   LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                               }).ToList();
                        SendNotification.AddRange(NotificatnToSelf);
                        SendNotification = SendNotification.Distinct().ToList();
                        var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                        foreach (var item in SendNotification)
                        {
                            item.Srl = (NotificationCode++).ToString("D6");
                        }
                        ctxTFAT.tfatNotification.AddRange(SendNotification);
                        ctxTFAT.SaveChanges();

                        #endregion
                    }

                    #endregion

                    #region Double Expenses Notification

                    CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    Notificationlist = tfatAlt.
                         Where(x => x.SubType == "Double Exp" &&
                         ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                         .ToList();

                    if (Notificationlist.Count() > 0)
                    {

                        var VoucherConsignment = ctxTFAT.RelLr.Where(x => x.ParentKey == mobj.TableKey).Select(x => x.LRRefTablekey).ToList();

                        var consignmentlist = ctxTFAT.RelLr
                        .Where(x => VoucherConsignment.Any(key => key == x.LRRefTablekey))
                        .GroupBy(x => x.LRRefTablekey).Where(x => x.Count() > 1)
                        .Select(x => new { LRRefTablekey = x.Key, TotalAmount = x.Sum(y => y.LrAmt) })
                        .ToList();

                        var SendNotificationlist = Notificationlist
                            .Where(x => consignmentlist.Any(y => y.TotalAmount > x.Param2))
                            .SelectMany(x => consignmentlist.Where(y => y.TotalAmount > x.Param2)
                                           .Select(y => new { ALT = x, key = y.LRRefTablekey, Charge = y.TotalAmount }))
                                           .ToList();

                        if (SendNotificationlist.Count() > 0)
                        {
                            #region Notification Send

                            //Bind Entity Using Users Columns
                            var SendNotification = SendNotificationlist.Where(x => x.ALT.Notification == true).
                                                   SelectMany(x => x.ALT.User.Split(',').
                                                   Select(user => new tfatNotification
                                                   {
                                                       Srl = "",
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.ALT.Priority,
                                                       DocType = "FMP00",
                                                       DocNo = mobj.VouNo.ToString(),
                                                       Parentkey = mobj.PayParentKey.ToString(),
                                                       Tablekey = mobj.TableKey.ToString(),
                                                       Describe = "Double Expenses Notification!!!",
                                                       Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">Double Expenses on " + (ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault()) + " In Advance Balance Payment...!</span>" + VoucherDetails : "<span>Double Expenses on " + (ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault()) + " In Advance Balance Payment...!</span>" + VoucherDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = user,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   })).ToList();

                            //Bind Entity For Self
                            var NotificatnToSelf = SendNotificationlist.Where(x => x.ALT.Notification == true &&
                                                   x.ALT.Self == true &&
                                                   !x.ALT.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                   {
                                                       Srl = x.ALT.RECORDKEY.ToString(),
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.ALT.Priority,
                                                       DocType = "FMP00",
                                                       DocNo = mobj.VouNo.ToString(),
                                                       Parentkey = mobj.PayParentKey.ToString(),
                                                       Tablekey = mobj.TableKey.ToString(),
                                                       Describe = "Double Expenses Notification!!!",
                                                       Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">Double Expenses on " + (ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault()) + " In Advance Balance Payment...!</span>" + VoucherDetails : "<span>Double Expenses on " + (ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault()) + " In Advance Balance Payment...!</span>" + VoucherDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = muserid,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   }).ToList();
                            SendNotification.AddRange(NotificatnToSelf);
                            SendNotification = SendNotification.Distinct().ToList();
                            var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                            foreach (var item in SendNotification)
                            {
                                item.Srl = (NotificationCode++).ToString("D6");
                            }
                            ctxTFAT.tfatNotification.AddRange(SendNotification);
                            ctxTFAT.SaveChanges();

                            #endregion
                        }

                    }

                    #endregion Double Expenses Notification

                    #region Double Expenses On Particular Exp. Notification

                    CurrentDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());

                    Notificationlist = tfatAlt.
                         Where(x => x.SubType == "On Particular Expense" &&
                         ((x.Branch != null && x.Branch.Split(',').Any(code => code == mbranchcode)) || x.Branch == null))
                         .ToList();

                    if (Notificationlist.Count() > 0)
                    {
                        //Charges List
                        var charges = Notificationlist.SelectMany(x => x.Param1.Split(',')).ToList();

                        //Limited Consignment Serach Only
                        var Consignmentlist = ctxTFAT.RelLr.Where(x => x.ParentKey == mobj.TableKey).Select(x => x.LRRefTablekey).Distinct().ToList();

                        var Chargelist = string.Join(",", charges);
                        var ConsignmentKeylist = string.Join(",", Consignmentlist);


                        var Query = "SELECT a.*,r.Code AS Account,r.LRRefTablekey AS [key],r.Expenses AS Charge "
                                  + " FROM( "
                                  + "     SELECT * "
                                  + "     FROM tfatNotificationSetup "
                                  + "     WHERE SubType = 'On Particular Expense' "
                                  + "     AND(Branch IS NULL OR Branch in (select value from string_split('" + mbranchcode + "', ',')) ) "
                                  + " ) AS a "
                                  + " JOIN( "
                                  + "     SELECT rd.Code, lr.LRRefTablekey, SUM(lr.LrAmt) AS Expenses "
                                  + "     FROM RelateData rd "
                                  + "     JOIN RelLr lr ON rd.TableKey = lr.TableKey "
                                  + "     WHERE rd.AmtType = 1 "
                                  + "     AND  rd.Code in (select value from string_split('" + Chargelist + "', ',')) "
                                  + "     AND lr.LRRefTablekey in (select value from string_split('" + ConsignmentKeylist + "', ','))"
                                  + "      GROUP BY rd.Code, lr.LRRefTablekey "
                                  + "     HAVING COUNT(*) > 1 "
                                  + " ) AS r ON 1 = 1 "
                                  + " WHERE r.Expenses > a.Param2; ";
                        DataTable SendNotificationlist = GetDataTable(Query);
                        if (SendNotificationlist.Rows.Count > 0)
                        {
                            var dataList = SendNotificationlist.AsEnumerable()
                                                .Select(row => new
                                                {
                                                    ALT = new tfatNotificationSetup
                                                    {
                                                        RECORDKEY = row.Field<long>("RECORDKEY"),
                                                        Type = row.Field<string>("Type"),
                                                        SubType = row.Field<string>("SubType"),
                                                        Notification = row.Field<bool>("Notification"),
                                                        Email = row.Field<bool>("Email"),
                                                        Priority = row.Field<bool>("Priority"),
                                                        Self = row.Field<bool>("Self"),
                                                        Paramlistreq = row.Field<bool>("Paramlistreq"),
                                                        Param1 = row.Field<string>("Param1"),
                                                        Param2 = row.Field<decimal>("Param2"),
                                                        User = row.Field<string>("User"),
                                                        Branch = row.Field<string>("Branch"),
                                                    },
                                                    Account = row.Field<string>("Account"),
                                                    key = row.Field<string>("key"),
                                                    Charge = row.Field<decimal>("Charge"),
                                                })
                                                .ToList();

                            #region Notification Send

                            //Bind Entity Using Users Columns
                            var SendNotification = dataList.Where(x => x.ALT.Notification == true).
                                                   SelectMany(x => x.ALT.User.Split(',').
                                                   Select(user => new tfatNotification
                                                   {
                                                       Srl = "",
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.ALT.Priority,
                                                       DocType = "FMP00",
                                                       DocNo = mobj.VouNo.ToString(),
                                                       Parentkey = mobj.PayParentKey.ToString(),
                                                       Tablekey = mobj.TableKey.ToString(),
                                                       Describe = "Double Expenses On Particular Charges Notification!!!",
                                                       Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">Double Expenses More Than" + (x.ALT.Param2 > 0 ? x.ALT.Param2.ToString("F2") + " Rs. " : "") + " Of " + ctxTFAT.Master.Where(m => m.Code == x.Account).Select(m => m.Name).FirstOrDefault() + " on " + ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault() + "[Consignment] In Advance Balance Payment...!</span>" + VoucherDetails : "<span>Double Expenses More Than " + (x.ALT.Param2 > 0 ? x.ALT.Param2.ToString("F2") + " Rs. " : "") + " Of " + ctxTFAT.Master.Where(m => m.Code == x.Account).Select(m => m.Name).FirstOrDefault() + " on " + ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault() + "[Consignment] In Advance Balance Payment...!</span>" + VoucherDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = user,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   })).ToList();

                            //Bind Entity For Self
                            var NotificatnToSelf = dataList.Where(x => x.ALT.Notification == true &&
                                                   x.ALT.Self == true &&
                                                   !x.ALT.User.Split(',').Any(code => code.Trim() == muserid)).Select(x => new tfatNotification
                                                   {
                                                       Srl = x.ALT.RECORDKEY.ToString(),
                                                       CreateOn = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString()),
                                                       Clear = false,
                                                       Priority = x.ALT.Priority,
                                                       DocType = "FMP00",
                                                       DocNo = mobj.VouNo.ToString(),
                                                       Parentkey = mobj.PayParentKey.ToString(),
                                                       Tablekey = mobj.TableKey.ToString(),
                                                       Describe = "Double Expenses On Particular Charges Notification!!!",
                                                       Msg = x.ALT.Priority == true ? "<span style=\"color: red!important;\">Double Expenses Of " + ctxTFAT.Master.Where(m => m.Code == x.Account).Select(m => m.Name).FirstOrDefault() + " on " + ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault() + " In Advance Balance Payment...!</span>" + VoucherDetails : "<span>Double Expenses Of " + ctxTFAT.Master.Where(m => m.Code == x.Account).Select(m => m.Name).FirstOrDefault() + " on " + ctxTFAT.LRMaster.Where(l => l.TableKey == x.key).Select(l => l.LrNo).FirstOrDefault() + " In Advance Balance Payment...!</span>" + VoucherDetails,
                                                       HtmlString = null,
                                                       prefix = mperiod,
                                                       Branch = mbranchcode,
                                                       ToUser = muserid,
                                                       AUTHIDS = muserid,
                                                       AUTHORISE = "A00",
                                                       ENTEREDBY = muserid,
                                                       LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString()),
                                                   }).ToList();


                            SendNotification.AddRange(NotificatnToSelf);
                            SendNotification = SendNotification.Distinct().ToList();
                            var NotificationCode = Convert.ToInt32(GenerateNotificationCode());
                            foreach (var item in SendNotification)
                            {
                                item.Srl = (NotificationCode++).ToString("D6");
                            }
                            ctxTFAT.tfatNotification.AddRange(SendNotification);
                            ctxTFAT.SaveChanges();

                            #endregion
                        }

                    }

                    #endregion Double Expenses Notification
                }
            }
            catch (Exception ex)
            {

            }
        }



        #endregion

        #endregion

        #region  DB Backup

        public ActionResult DatabaseBackup()
        {
            DatabaseBackup mcls = new DatabaseBackup();
            string Message = mcls.DBBackup();
            mcls.Dispose();
            return Json(new { Message }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult DownloadBackup()
        {
            string path = @"C:\Backup"; //AppDomain.CurrentDomain.BaseDirectory + "Backup";
            string mdb = System.Web.HttpContext.Current.Session["CurrentDatabase"].ToString();
            string mfile = mdb + ".zip";
            path = path + @"\" + mfile;
            // return File(path, "application/zip", mfile);
            byte[] fileBytes = System.IO.File.ReadAllBytes(path);
            MemoryStream output = new MemoryStream(fileBytes);
            //return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, mfile);
            return File(output.ToArray(), "application/zip", mfile);
        }
       
        #endregion

        public void SetAttach_SessionNull()
        {
            Session["TempAttach"] = null;
        }


        [HttpPost]
        public ActionResult GetSubCodeof(string Format)
        {
            string mmformat = Fieldoftable("ReportHeader", "SubCodeOf", "Code='" + Format + "'");
            return Json(GetDataTableList("Select Code,Name=Code from ReportHeader Where SubCodeOf='" + mmformat + "' Order by Code"), JsonRequestBehavior.AllowGet);
        }
        public List<SelectListItem> GetSubCodeoflist(string Format)
        {
            string mmformat = Fieldoftable("ReportHeader", "SubCodeOf", "Code='" + Format + "'");
            List<SelectListItem> items = new List<SelectListItem>();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                string query = "Select Code, Name = Code from ReportHeader Where SubCodeOf = '" + mmformat + "' Order by Code";
                using (SqlCommand cmd = new SqlCommand(query))
                {
                    cmd.Connection = con;
                    con.Open();
                    using (SqlDataReader sdr = cmd.ExecuteReader())
                    {
                        while (sdr.Read())
                        {
                            items.Add(new SelectListItem
                            {
                                Text = sdr["Name"].ToString(),
                                Value = sdr["Code"].ToString()
                            });
                        }
                    }
                    con.Close();
                }
            }
            return items;
        }

        [HttpPost]
        public ActionResult CheckExist(string TableName, string Colfield, string Value, string SkipColumnName, string PKValue, string ExtraColumn, string ExtraValue, string ExtraColumn2, string ExtraValue2)
        {
            int count = 0;
            string message = "";
            DataTable dt = new DataTable();
            SqlDataAdapter sda = new SqlDataAdapter();
            string connstring = GetConnectionString();
            SqlConnection con = new SqlConnection(connstring);
            if (ExtraColumn == null && ExtraValue == null && ExtraColumn2 == null && ExtraValue2 == null)
            {
                SqlCommand cmd = new SqlCommand("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
                sda = new SqlDataAdapter("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
            }
            else if (ExtraColumn2 != null && ExtraValue2 != null)
            {
                SqlCommand cmd = new SqlCommand("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + ExtraColumn + "='" + ExtraValue + "'  and " + ExtraColumn2 + "='" + ExtraValue2 + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
                sda = new SqlDataAdapter("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + ExtraColumn + "='" + ExtraValue + "' and " + ExtraColumn2 + "='" + ExtraValue2 + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
            }
            else
            {
                SqlCommand cmd = new SqlCommand("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + ExtraColumn + "='" + ExtraValue + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
                sda = new SqlDataAdapter("Select * from " + TableName + " where " + Colfield + " = '" + Value + "' and " + ExtraColumn + "='" + ExtraValue + "' and " + SkipColumnName + "!='" + PKValue + "'", con);
            }
            sda.Fill(dt);
            con.Close();
            count = dt.Rows.Count;
            if (count == 0)
            {
                message = "T";
            }
            else
            {
                message = "F";
            }
            return Json(new { Message = message, JsonRequestBehavior.AllowGet });
        }

        List<TfatBranch> GetArea = new List<TfatBranch>();
        [HttpPost]
        public List<TfatBranch> GetBranch(string BRanchCode)
        {
            var mTreeList = ctxTFAT.TfatBranch.Select(x => new { x.Name, x.Grp, x.Code }).ToList();
            List<NFlatObject> flatObjects2 = new List<NFlatObject>();
            GetArea = new List<TfatBranch>();
            for (int n = 0; n < mTreeList.Count; n++)
            {
                NFlatObject abc = new NFlatObject();
                abc.data = mTreeList[n].Name;
                abc.Id = mTreeList[n].Code;
                if (mTreeList[n].Code == mTreeList[n].Grp)
                {
                    abc.ParentId = "0";
                }
                else
                {
                    abc.ParentId = mTreeList[n].Grp;
                }
                flatObjects2.Add(abc);
            }
            var recursiveObjects = FillRecursive2(flatObjects2, BRanchCode);

            var Currentbranch = ctxTFAT.TfatBranch.Where(x => x.Code == BRanchCode).FirstOrDefault();
            if (GetArea.Where(x => x.Code == BRanchCode).FirstOrDefault() == null)
            {
                GetArea.Add(Currentbranch);
            }

            foreach (var item in recursiveObjects)
            {
                var branch = ctxTFAT.TfatBranch.Where(x => x.Code == item.id).FirstOrDefault();
                if (GetArea.Where(x => x.Code == item.id).FirstOrDefault() == null)
                {
                    GetArea.Add(branch);
                }
                if (item.children.Count > 0)
                {
                    SaveChild(item);
                }
            }
            return GetArea;
        }

        public string SaveChild(NRecursiveObject item)
        {
            foreach (var item1 in item.children)
            {
                var branch1 = ctxTFAT.TfatBranch.Where(x => x.Code == item1.id).FirstOrDefault();
                if (GetArea.Where(x => x.Code == item1.id).FirstOrDefault() == null)
                {
                    GetArea.Add(branch1);
                }
                if (item1.children.Count > 0)
                {
                    SaveChild(item1);
                }
            }
            return "";
        }

        public static List<NRecursiveObject> FillRecursive2(List<NFlatObject> flatObjects, string parentId)
        {
            bool mSelected = false;
            List<NRecursiveObject> recursiveObjects = new List<NRecursiveObject>();
            foreach (var item in flatObjects.Where(x => x.ParentId.Equals(parentId)))
            {
                mSelected = item.isSelected;
                recursiveObjects.Add(new NRecursiveObject
                {
                    data = item.data,
                    id = item.Id,
                    attr = new NFlatTreeAttribute { id = item.Id.ToString(), selected = item.isSelected },
                    children = FillRecursive2(flatObjects, item.Id)
                });
            }
            return recursiveObjects;
        }

        public static List<RecursiveObject> FillRecursive(List<FlatObject> flatObjects, int parentId)
        {
            bool mSelected = false;
            List<RecursiveObject> recursiveObjects = new List<RecursiveObject>();
            foreach (var item in flatObjects.Where(x => x.ParentId.Equals(parentId)))
            {
                mSelected = item.isSelected;
                recursiveObjects.Add(new RecursiveObject
                {
                    data = item.data,
                    id = item.Id,
                    attr = new FlatTreeAttribute { id = item.Id.ToString(), selected = item.isSelected },
                    children = FillRecursive(flatObjects, item.Id)
                });
            }
            return recursiveObjects;
        }

        public string ConvertToLocaleDate(string mDate)
        {
            string pcdateformat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
            if (pcdateformat.StartsWith("d") || pcdateformat.StartsWith("D"))
            {
                if (pcdateformat.StartsWith("dd") || pcdateformat.StartsWith("DD"))
                {
                    mDate = (DateTime.ParseExact(mDate, "dd/mm/yyyy", null)).ToString("dd/mm/yyyy");
                }
                else
                {
                    mDate = (DateTime.ParseExact(mDate, "dd/m/yyyy", null)).ToString("dd/mm/yyyy");
                }
            }
            else if (pcdateformat.StartsWith("M") || pcdateformat.StartsWith("m"))
            {
                mDate = (DateTime.ParseExact(mDate, "m/d/yyyy", null)).ToString("dd/mm/yyyy");
            }
            else
            {
                mDate = (DateTime.ParseExact(mDate, "m/d/yyyy", null)).ToString("dd/mm/yyyy");
            }
            return mDate.ToString();
        }

        public ActionResult GetAllMenu(string ModuleName)//, bool QuickMenuOnly = false)
        {
            Session["ErrorMessage"] = "";
            ppara01 = "";
            ppara02 = "";
            ppara03 = "";
            ppara04 = "";
            ppara05 = "";
            ppara06 = "";
            ppara07 = "";
            ppara08 = "";
            ppara09 = "";
            ppara10 = "";
            ppara11 = "";
            ppara12 = "";
            ppara13 = "";
            ppara14 = "";
            ppara15 = "";
            ppara16 = "";
            ppara17 = "";
            ppara18 = "";
            ppara19 = "";
            ppara20 = "";
            ppara21 = "";
            ppara22 = "";
            ppara23 = "";
            ppara24 = "";
            mpara = "";

            bool merp = Convert.ToBoolean(Session["IsERP"]);
            int mversion = Convert.ToInt32(Session["Version"]);
            string mLang = Session["Language"].ToString(); //ENG^BOS^VIT^ARA^BUR^FRA
            List<TFATMenuVM> list = new List<TFATMenuVM>();
            string mquery = "";
            if (muserid.ToUpper() == "SUPER")
            {
                mquery = "Select ZoomURL=isnull(ZoomURL,null),AllowClick=isnull(AllowClick,0),Menu = isnull(" + (mLang == "fr-FR" ? "MenuFrench" : (mLang == "bs-Cyrl-BA" ? "MenuBosnia" : (mLang == "my-MM" ? "MenuBurmese" : (mLang == "ar-SA" ? "MenuArabic" : (mLang == "vi-VN" ? "MenuVietnamese" : "Menu"))))) + ",'')," +
                        "ParentMenu=isnull(ParentMenu,''),ID=isnull(ID,''),SubType=isnull(SubType,''),MainType=isnull(MainType,''),DisplayOrder=isnull(DisplayOrder,1),FormatCode=isnull(FormatCode,''),Level=isnull(Level,1),TableName=isnull(TableName,'')," +
                        "Hide=isnull(Hide,0),ModuleName=isnull(ModuleName,''),OptionType=isnull(OptionType,''),OptionCode=isnull(OptionCode,''),Controller=isnull(Controller,''),QuickMenu=isnull(QuickMenu,0),QuickMaster=isnull(QuickMaster,0),Version=isnull(Version,0) " +
                        "from TfatMenu Where ModuleName='" + ModuleName + "' Order by DisplayOrder";
            }
            else
            {
                mquery = "Select ZoomURL=isnull(m.ZoomURL,null),AllowClick=isnull(m.AllowClick,0),Menu = isnull(m." + (mLang == "fr-FR" ? "MenuFrench" : (mLang == "bs-Cyrl-BA" ? "MenuBosnia" : (mLang == "my-MM" ? "MenuBurmese" : (mLang == "ar-SA" ? "MenuArabic" : (mLang == "vi-VN" ? "MenuVietnamese" : "Menu"))))) + ",'')," +
                        "ParentMenu=isnull(m.ParentMenu,''),ID=isnull(m.ID,''),SubType=isnull(m.SubType,''),MainType=isnull(m.MainType,''),DisplayOrder=isnull(m.DisplayOrder,1),FormatCode=isnull(m.FormatCode,''),Level=isnull(m.Level,1),TableName=isnull(m.TableName,'')," +
                        "Hide=isnull(m.Hide,0),ModuleName=isnull(m.ModuleName,''),OptionType=isnull(m.OptionType,''),OptionCode=isnull(m.OptionCode,''),Controller=isnull(m.Controller,''),QuickMenu=isnull(m.QuickMenu,0),QuickMaster=isnull(m.QuickMaster,0),Version=isnull(m.Version,0) " +
                        "from TfatMenu m,UserRights u where  m.ID=u.MenuID and u.Code='" + muserid + "' and u.xCess<>0 and m.ModuleName='" + ModuleName + "'  Order by m.DisplayOrder";
            }
            DataTable mlistx = GetDataTable(mquery);
            foreach (DataRow item in mlistx.Rows)
            {
                if (merp == false && Convert.ToInt32(item["Version"]) == 9)
                {
                    goto mnext;
                }
                if (Convert.ToInt32(item["Version"]) > mversion)
                {
                    goto mnext;
                }

                list.Add(new TFATMenuVM()
                {
                    AllowClick = Convert.ToBoolean(item["AllowClick"]),
                    Menu = item["Menu"].ToString() ?? "",
                    ParentMenu = item["ParentMenu"].ToString() ?? "",
                    DisplayOrder = (int)item["DisplayOrder"],
                    FormatCode = item["FormatCode"].ToString() ?? "",
                    SubType = item["SubType"].ToString() ?? "",
                    MainType = item["MainType"].ToString() ?? "",
                    Level = (byte)(item["Level"]),
                    Controller = (item["OptionType"].ToString() == "R" || item["OptionType"].ToString() == "X" || item["OptionType"].ToString() == "") ? item["Controller"].ToString() : GetControllerName(item["OptionType"].ToString()),
                    TableName = item["TableName"].ToString() ?? "",
                    Hide = Convert.ToBoolean(item["Hide"]),
                    ModuleName = item["ModuleName"].ToString() ?? "",
                    OptionType = item["OptionType"].ToString() ?? "",
                    OptionCode = item["OptionCode"].ToString() ?? "",
                    Controller2 = item["Controller"].ToString() ?? "",
                    QuickMenu = Convert.ToBoolean(item["QuickMenu"]),
                    QuickMaster = Convert.ToBoolean(item["QuickMaster"]),
                    ZoomURL = item["ZoomURL"].ToString() ?? "",
                    IID = Convert.ToInt32(item["ID"])
                });
            mnext:;
            }

            ViewBag.Logistics = list.Where(x => x.ParentMenu == "Logistics").OrderBy(x => x.DisplayOrder);
            ViewBag.Accounts = list.Where(x => x.ParentMenu == "Accounts").OrderBy(x => x.DisplayOrder);
            ViewBag.Vehicles = list.Where(x => x.ParentMenu == "Vehicles").OrderBy(x => x.DisplayOrder);
            Session["MenuList"] = list;

            List<TFATMenuVM> Favlist = new List<TFATMenuVM>();
            string Favmquery = "";
            if (muserid.ToUpper() == "SUPER")
            {
                Favmquery = "Select AllowClick=isnull(AllowClick,0),Menu = isnull(" + (mLang == "fr-FR" ? "MenuFrench" : (mLang == "bs-Cyrl-BA" ? "MenuBosnia" : (mLang == "my-MM" ? "MenuBurmese" : (mLang == "ar-SA" ? "MenuArabic" : (mLang == "vi-VN" ? "MenuVietnamese" : "Menu"))))) + ",'')," +
                        "ParentMenu=isnull(ParentMenu,''),ID=isnull(ID,''),SubType=isnull(SubType,''),MainType=isnull(MainType,''),DisplayOrder=isnull(DisplayOrder,1),FormatCode=isnull(FormatCode,''),Level=isnull(Level,1),TableName=isnull(TableName,'')," +
                        "Hide=isnull(Hide,0),ModuleName=isnull(ModuleName,''),OptionType=isnull(OptionType,''),OptionCode=isnull(OptionCode,''),Controller=isnull(Controller,''),QuickMenu=isnull(QuickMenu,0),QuickMaster=isnull(QuickMaster,0),Version=isnull(Version,0) " +
                        "from TfatMenu Order by DisplayOrder";
            }
            else
            {
                Favmquery = "Select AllowClick=isnull(m.AllowClick,0),Menu = isnull(m." + (mLang == "fr-FR" ? "MenuFrench" : (mLang == "bs-Cyrl-BA" ? "MenuBosnia" : (mLang == "my-MM" ? "MenuBurmese" : (mLang == "ar-SA" ? "MenuArabic" : (mLang == "vi-VN" ? "MenuVietnamese" : "Menu"))))) + ",'')," +
                        "ParentMenu=isnull(m.ParentMenu,''),ID=isnull(m.ID,''),SubType=isnull(m.SubType,''),MainType=isnull(m.MainType,''),DisplayOrder=isnull(m.DisplayOrder,1),FormatCode=isnull(m.FormatCode,''),Level=isnull(m.Level,1),TableName=isnull(m.TableName,'')," +
                        "Hide=isnull(m.Hide,0),ModuleName=isnull(m.ModuleName,''),OptionType=isnull(m.OptionType,''),OptionCode=isnull(m.OptionCode,''),Controller=isnull(m.Controller,''),QuickMenu=isnull(m.QuickMenu,0),QuickMaster=isnull(m.QuickMaster,0),Version=isnull(m.Version,0) " +
                        "from TfatMenu m,UserRights u where m.ID=u.MenuID and u.Code='" + muserid + "' and u.xCess<>0 Order by m.DisplayOrder";
            }
            DataTable Favmlistx = GetDataTable(Favmquery);
            foreach (DataRow item in Favmlistx.Rows)
            {
                if (merp == false && Convert.ToInt32(item["Version"]) == 9)
                {
                    goto mnext;
                }
                if (Convert.ToInt32(item["Version"]) > mversion)
                {
                    goto mnext;
                }

                Favlist.Add(new TFATMenuVM()
                {
                    AllowClick = Convert.ToBoolean(item["AllowClick"]),
                    Menu = item["Menu"].ToString() ?? "",
                    ParentMenu = item["ParentMenu"].ToString() ?? "",
                    DisplayOrder = (int)item["DisplayOrder"],
                    FormatCode = item["FormatCode"].ToString() ?? "",
                    SubType = item["SubType"].ToString() ?? "",
                    MainType = item["MainType"].ToString() ?? "",
                    Level = (byte)(item["Level"]),
                    Controller = (item["OptionType"].ToString() == "R" || item["OptionType"].ToString() == "X" || item["OptionType"].ToString() == "") ? item["Controller"].ToString() : GetControllerName(item["OptionType"].ToString()),
                    TableName = item["TableName"].ToString() ?? "",
                    Hide = Convert.ToBoolean(item["Hide"]),
                    ModuleName = item["ModuleName"].ToString() ?? "",
                    OptionType = item["OptionType"].ToString() ?? "",
                    OptionCode = item["OptionCode"].ToString() ?? "",
                    Controller2 = item["Controller"].ToString() ?? "",
                    QuickMenu = Convert.ToBoolean(item["QuickMenu"]),
                    QuickMaster = Convert.ToBoolean(item["QuickMaster"]),
                    IID = Convert.ToInt32(item["ID"])
                });
            mnext:;
            }
            var UserIDlist = ctxTFAT.tfatUserFavourite.Where(x => x.UserCode == muserid).Select(x => x.ID).ToList();
            ViewBag.favlist = Favlist.Where(x => UserIDlist.Contains(x.IID)).ToList().OrderBy(x => x.DisplayOrder);

            Session["FavList"] = ViewBag.favlist;



            List<TFATMenuVM> lmod = new List<TFATMenuVM>();
            if (Session["Modules"].ToString().Substring(0, 1) == "S")
                lmod.Add(new TFATMenuVM() { Menu = "SetUP", Controller = "SetUP" });
            if (Session["Modules"].ToString().Substring(1, 1) == "M")
                lmod.Add(new TFATMenuVM() { Menu = "Masters", Controller = "MasterDashBoard" });
            if (Session["Modules"].ToString().Substring(2, 1) == "T")
                lmod.Add(new TFATMenuVM() { Menu = "Transactions", Controller = "TransactionsDashBoard" });
            if (Session["Modules"].ToString().Substring(3, 1) == "R")
                lmod.Add(new TFATMenuVM() { Menu = "Reports", Controller = "ReportsDashBoard" });
            if (Session["Modules"].ToString().Substring(4, 1) == "C")
                lmod.Add(new TFATMenuVM() { Menu = "ControlPanel", Controller = "ControlPanel" });
            ViewBag.Modules = lmod;
            Session["ModulesList"] = ViewBag.Modules;

            //var msglist = ctxTFAT.MessageLog.Where(z => z.Code == muserid && z.MessageRead == false && z.MessageDelete == false).Select(x => x).Take(100).ToList();
            DataTable msglist = GetDataTable("Select top 100 Recordkey,Message,mDate,FromIDs from MessageLog Where Code='" + muserid + "' and MessageRead=0 and MessageDelete=0");
            List<TFATMenuVM> mlist = new List<TFATMenuVM>();
            foreach (DataRow item in msglist.Rows)
            {
                mlist.Add(new TFATMenuVM()
                {
                    AllowClick = true,
                    Menu = "",
                    ParentMenu = "",
                    DisplayOrder = 0,
                    FormatCode = "",
                    SubType = "",
                    MainType = "",
                    Level = 0,
                    Controller = "",
                    TableName = "",
                    Hide = false,
                    ModuleName = "",
                    OptionType = "",
                    OptionCode = "",
                    Controller2 = "",
                    QuickMenu = false,
                    QuickMaster = false,
                    RECORDKEY = (int)item["RecordKey"],
                    Message = item["Message"].ToString(),
                    mDate = Convert.ToDateTime(item["mDate"] == null ? DateTime.Now.ToString() : item["mDate"].ToString()),
                    FromIDs = item["FromIDs"].ToString() ?? ""
                }); ;
            }

            var Authoeise = ctxTFAT.Authorisation.Where(x => x.AUTHORISE.Substring(0, 1) == "N").ToList();
            int PendingAuthorise = 0;
            foreach (var item in Authoeise)
            {
                if (String.IsNullOrEmpty(item.AUTHIDS))
                {
                    ++PendingAuthorise;
                }
                else
                {
                    var AUTHIDSlist = item.AUTHIDS.Split('^').ToList();
                    if (AUTHIDSlist.Contains(muserid))
                    {
                        ++PendingAuthorise;
                    }
                }
            }

            var UserTask = ctxTFAT.Task.Where(x => x.Status != "Complete" && x.Status != "Cancelled" && (x.AssignedTo.Contains(muserid) || x.AssignedBy.Contains(muserid))).ToList().Count();
            var UnreadTask = ctxTFAT.Task.Where(x => x.Read == false && (x.AssignedTo.Contains(muserid) || x.AssignedBy.Contains(muserid))).ToList().Count();

            DataTable notificationlist = GetDataTable("Select RECORDKEY,CreateOn,Msg,Srl,ENTEREDBY from tfatNotification Where ToUser='" + muserid + "' and Clear='false' ");
            List<TFATMenuVM> mnotificationlist = new List<TFATMenuVM>();
            // Order by a column in descending order and select the top 100 rows
            var orderedRows = notificationlist.AsEnumerable()
                .OrderByDescending(row => row.Field<int>("RECORDKEY"))
                .Take(100);
            foreach (DataRow item in orderedRows)
            {
                mnotificationlist.Add(new TFATMenuVM()
                {
                    AllowClick = true,
                    Menu = "",
                    ParentMenu = "",
                    DisplayOrder = 0,
                    FormatCode = "",
                    SubType = "",
                    MainType = "",
                    Level = 0,
                    Controller = "",
                    TableName = "",
                    Hide = false,
                    ModuleName = "",
                    OptionType = "",
                    OptionCode = "",
                    Controller2 = "",
                    QuickMenu = false,
                    QuickMaster = false,
                    RECORDKEY = (int)item["RECORDKEY"],
                    Message = item["Msg"].ToString(),
                    mDate = Convert.ToDateTime(item["CreateOn"] == null ? DateTime.Now.ToShortDateString() : item["CreateOn"].ToString()),
                    FromIDs = item["ENTEREDBY"].ToString() ?? ""
                });
            }


            ViewBag.Messages = mlist;
            ViewBag.Notification = mnotificationlist;
            ViewBag.PendingAuthoriseCount = PendingAuthorise;
            ViewBag.MessageCount = msglist.Rows.Count;
            ViewBag.NotificationCount = notificationlist.Rows.Count;
            mlastmodule = ModuleName;
            ViewBag.UserTask = UserTask;
            ViewBag.UnreadTask = UnreadTask;

            bool MessageLog = false, NotificationLog = false, Task = false, Authorisation = false, UserProfile = false;

            if (muserid.ToUpper() == "SUPER")
            {
                MessageLog = true; Task = true; Authorisation = true; UserProfile = true; NotificationLog = true;
            }
            else
            {
                var MsgLogR = ctxTFAT.UserRights.Where(x => x.MenuID == 2148 && x.Code.Trim().ToLower() == muserid.Trim().ToLower()).FirstOrDefault();
                if (MsgLogR != null)
                {
                    MessageLog = true;
                }
                var TaskR = ctxTFAT.UserRights.Where(x => x.MenuID == 2155 && x.Code.Trim().ToLower() == muserid.Trim().ToLower()).FirstOrDefault();
                if (TaskR != null)
                {
                    Task = true;
                }
                var AuthorisationR = ctxTFAT.UserRights.Where(x => x.MenuID == 2164 && x.Code.Trim().ToLower() == muserid.Trim().ToLower()).FirstOrDefault();
                if (AuthorisationR != null)
                {
                    Authorisation = true;
                }
                var UserProfileR = ctxTFAT.UserRights.Where(x => x.MenuID == 1980 && x.Code.Trim().ToLower() == muserid.Trim().ToLower()).FirstOrDefault();
                if (UserProfileR != null)
                {
                    UserProfile = true;
                }
                var NotificationR = ctxTFAT.UserRights.Where(x => x.MenuID == 2478 && x.Code.Trim().ToLower() == muserid.Trim().ToLower()).FirstOrDefault();
                if (NotificationR != null)
                {
                    NotificationLog = true;
                }
            }

            ViewBag.NotificationLogR = NotificationLog;
            ViewBag.MessageLogR = MessageLog;
            ViewBag.TaskR = Task;
            ViewBag.AuthorisationR = Authorisation;
            ViewBag.UserProfileR = UserProfile;
            return null;
        }

        public ActionResult SetColour(int mtheme)
        {
            switch (mtheme)
            {
                case 1: // blue
                    System.Web.HttpContext.Current.Session["topcolor1"] = "#043E54";
                    System.Web.HttpContext.Current.Session["topcolor2"] = "#01A0C3";
                    System.Web.HttpContext.Current.Session["headerdivcolor"] = "#3ccbff";
                    System.Web.HttpContext.Current.Session["headercaptioncolor"] = "#035D88";
                    System.Web.HttpContext.Current.Session["bottomcolor"] = "#065d7d";
                    break;
                case 2: // orange
                    System.Web.HttpContext.Current.Session["topcolor1"] = "#FF7F00";
                    System.Web.HttpContext.Current.Session["topcolor2"] = "#FDA02D";
                    System.Web.HttpContext.Current.Session["headerdivcolor"] = "#F5E3BA";
                    System.Web.HttpContext.Current.Session["headercaptioncolor"] = "#AF8F1C";
                    System.Web.HttpContext.Current.Session["bottomcolor"] = "#D86400";
                    break;
                case 3: // green
                    System.Web.HttpContext.Current.Session["topcolor1"] = "#56AD2A";
                    System.Web.HttpContext.Current.Session["topcolor2"] = "#5DC30F";
                    System.Web.HttpContext.Current.Session["headerdivcolor"] = "#D5FFC4";
                    System.Web.HttpContext.Current.Session["headercaptioncolor"] = "#1A8001";
                    System.Web.HttpContext.Current.Session["bottomcolor"] = "#3D9E00";
                    break;
                case 4: // light blue
                    System.Web.HttpContext.Current.Session["topcolor1"] = "#08697E";
                    System.Web.HttpContext.Current.Session["topcolor2"] = "#01A0C3";
                    System.Web.HttpContext.Current.Session["headerdivcolor"] = "#D1F9FD";
                    System.Web.HttpContext.Current.Session["headercaptioncolor"] = "#035D88";
                    System.Web.HttpContext.Current.Session["bottomcolor"] = "#00639C";
                    break;
                default: // 0 gray
                    System.Web.HttpContext.Current.Session["topcolor1"] = "#4B4A4A";
                    System.Web.HttpContext.Current.Session["topcolor2"] = "#696969";
                    System.Web.HttpContext.Current.Session["headerdivcolor"] = "#D3D3D3";
                    System.Web.HttpContext.Current.Session["headercaptioncolor"] = "#767676";
                    System.Web.HttpContext.Current.Session["bottomcolor"] = "#4B4A4A";
                    break;
            }
            return null;
        }

        public string GetControllerName(string optiontype, string mcontroller = "")
        {
            string abc;
            if (optiontype == "M")
            {
                abc = "MasterGrid";
            }
            else if (optiontype == "T")
            {
                abc = "TransactionMaintenanceGrid";
            }
            else if (optiontype == "L")
            {
                abc = "MasterGridd";
            }
            else
            {
                abc = mcontroller;
            }
            return abc;
        }

        public string GetConnectionString()
        {
            string mStr = ConfigurationManager.ConnectionStrings["ALT_ERP21Entities"].ConnectionString;
            mStr = string.IsNullOrEmpty(mStr) == true ? "" : mStr;
            int n = mStr.IndexOf("data source");
            int x = mStr.IndexOf("Multiple", n);
            mStr = mStr.Substring(n, x - n) + "MultipleActiveResultSets=True;Application Name=EntityFramework";
            return mStr;
            //if (Session["CurrentDatabase"])
            //{
            //    string mStr = ConfigurationManager.ConnectionStrings["ALT_ERP21Entities"].ConnectionString;
            //    mStr = string.IsNullOrEmpty(mStr) == true ? "" : mStr;
            //    int n = mStr.IndexOf("data source");
            //    int x = mStr.IndexOf("Multiple", n);
            //    Session["CurrentDatabase"] = mStr.Substring(n, x - n) + "MultipleActiveResultSets=True;Application Name=EntityFramework";
            //}
            //return Session["CurrentDatabase"].ToString();
        }

        public DateTime ConvertDDMMYYTOYYMMDD(string da)
        {
            string abc = da.Substring(6, 4) + "/" + da.Substring(3, 2) + "/" + da.Substring(0, 2);
            return Convert.ToDateTime(abc);
        }

        public DateTime ConvertDDMMYYDate(DateTime? da)//not needed darshan
        {

            string abc = Convert.ToString(da);// Convert.ToString(da);
            abc = abc.Substring(6, 4) + "/" + abc.Substring(3, 2) + "/" + abc.Substring(0, 2);
            return Convert.ToDateTime(abc);
        }

        public string ConvertDDMMYYTOYYMMDDinstr(string da)
        {
            string abc = Convert.ToString(da);
            abc = abc.Substring(6, 4) + "/" + abc.Substring(3, 2) + "/" + abc.Substring(0, 2);
            return abc;
        }

        public ActionResult AddNote()
        {
            ViewBag.ControllerName = ControllerContext.RouteData.Values["controller"].ToString();
            return Json(new { Status = "Success", Controller = ViewBag.ControllerName }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult AddOnGrid()
        {
            ViewBag.ControllerName = ControllerContext.RouteData.Values["controller"].ToString();
            return Json(new { Status = "Success", Controller = ViewBag.ControllerName }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult EditAddOnGrid(string DocCode)
        {
            var Doc = DocCode;
            var SubType = Doc.Substring(2, 2);
            ViewBag.ControllerName = ControllerContext.RouteData.Values["controller"].ToString();
            return Json(new { Status = "Success", Controller = ViewBag.ControllerName, DocCode, SubType }, JsonRequestBehavior.AllowGet);
        }

        public string GetAddonValue(string fld, string MainType, string ParentKey)
        {
            string connstring = GetConnectionString();
            string bca = "";
            var loginQuery3 = @"Select " + fld + " from AddonDOC" + MainType + " where tablekey=" + "'" + ParentKey + "'" + "";
            DataTable mDt2 = GetDataTable(loginQuery3, connstring);
            if (mDt2.Rows.Count > 0)
            {
                bca = (mDt2.Rows[0][0].ToString() == "" || mDt2.Rows[0][0].ToString() == null) ? "" : mDt2.Rows[0][0].ToString();
            }
            mDt2.Dispose();
            return bca;
        }

        public ActionResult GetFactorList()
        {
            var listItems = new SelectListItem[] {
                            new SelectListItem(){Text="+",Value="+"},
                            new SelectListItem(){Text="-",Value="-"}};

            var result = listItems.Select(m => new
            {
                m.Text,
                m.Value
            }).Take(10).ToList();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public decimal FieldoftableNumber(string mTable, string mreturn, string mwhere)
        {
            decimal mvalue = 0;
            string mstr = "Select " + mreturn + (mTable == "" ? "" : " from " + mTable) + (mwhere != "" ? " Where " + mwhere : "");
            DataTable mDt = GetDataTable(mstr);
            if (mDt.Rows.Count > 0)
            {
                try
                {
                    mvalue = mDt.Rows[0][0] != null ? Math.Round(Convert.ToDecimal(mDt.Rows[0][0]), 4) : 0;
                }
                catch { mvalue = 0; }
            }
            mDt.Dispose();
            return Convert.ToDecimal(mvalue);
        }

        public bool FieldoftableBool(string mTable, string mreturn, string mwhere)
        {
            bool mresult = false;
            string mstr = @"Select " + mreturn + (mTable == "" ? "" : " from " + mTable) + (mwhere != "" ? " Where " + mwhere : "");
            SqlConnection mConn = new SqlConnection(GetConnectionString());
            mConn.Open();
            SqlCommand mcmd = new SqlCommand(mstr, mConn);
            mcmd.CommandTimeout = 0;
            try
            {
                SqlDataReader mdr = mcmd.ExecuteReader();
                if (mdr.HasRows == true)
                {
                    if (mdr.Read() == true)
                        mresult = (bool)mdr[0];
                }
                mdr.Close();
            }
            catch (DbException e)
            {
            }
            finally
            {
                mcmd.Dispose();
                mConn.Close();
                mConn.Dispose();
            }
            return mresult;
        }

        public string Fieldoftable(string mTable, string mreturn, string mwhere, string mtype = "T")
        {
            string mresult = "";
            if (mtype == "N")
            {
                mresult = "0";
            }
            else if (mtype == "L")
            {
                mresult = "false";
            }

            string mstr = @"Select " + mreturn + " from " + mTable + (mwhere != "" ? " Where " + mwhere : "");
            SqlConnection mConn = new SqlConnection(GetConnectionString());
            mConn.Open();
            SqlCommand mcmd = new SqlCommand(mstr, mConn);
            mcmd.CommandTimeout = 0;
            try
            {
                SqlDataReader mdr = mcmd.ExecuteReader();
                if (mdr.HasRows == true)
                {
                    if (mdr.Read() == true)
                        mresult = (mdr[0].ToString() == "" || mdr[0].ToString() == null) ? "" : mdr[0].ToString();
                }
            }
            catch (DbException e)
            {
            }
            finally
            {
                mcmd.Dispose();
                mConn.Close();
                mConn.Dispose();
            }
            return mresult;
        }

        public string[] FieldArray(string mTable, string[] mreturn, string[] mfieldtype, string mwhere)
        {
            int mcnt = mreturn.Length;
            string[] mresult = new string[mcnt];
            int x;
            // initialise the returned result array
            for (x = 0; x < mcnt; ++x)
            {
                if (mfieldtype[x] == "N")
                {
                    mresult[x] = "0";
                }
                else if (mfieldtype[x] == "L")
                {
                    mresult[x] = "false";
                }
                else
                {
                    mresult[x] = "";
                }
            }

            string mstr = @"Select " + string.Join(",", mreturn) + " from " + mTable + (mwhere != "" ? " Where " + mwhere : "");
            SqlConnection mConn = new SqlConnection(GetConnectionString());
            mConn.Open();
            SqlCommand mcmd = new SqlCommand(mstr, mConn);
            mcmd.CommandTimeout = 0;
            try
            {
                SqlDataReader mdr = mcmd.ExecuteReader();
                if (mdr.HasRows == true)
                {
                    if (mdr.Read() == true)
                    {
                        for (x = 0; x < mdr.FieldCount; ++x)
                        {
                            mresult[x] = (mdr[x].ToString() == "" || mdr[x].ToString() == null) ? "" : mdr[x].ToString();
                        }
                    }
                }
            }
            catch (DbException e)
            {
            }
            finally
            {
                mcmd.Dispose();
                mConn.Close();
                mConn.Dispose();
            }
            return mresult;
        }

        public string GetGrpName(string Code)
        {
            return ctxTFAT.MasterGroups.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetBrokerName(int? Code)
        {
            return ctxTFAT.Broker.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetSalesManName(int? Code)
        {
            return ctxTFAT.SalesMan.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetItemName(string mCode)
        {
            return ctxTFAT.ItemMaster.Where(x => x.Code == mCode).Select(x => x.Name).FirstOrDefault() ?? ""; ;
        }

        public string GetItemGrpName(string mCode)
        {
            return ctxTFAT.ItemGroups.Where(x => x.Code == mCode).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetStoreName(int mStore)
        {
            return Fieldoftable("Stores", "Name", "Code=" + mStore);
            //return ctxTFAT.Stores.Where(x => x.Code == mStore).Select(x => x.Name.Trim()).FirstOrDefault() ?? "";
        }

        public string GetAreaName(int? Code)
        {
            return ctxTFAT.AreaMaster.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetHSNName(string Code)
        {
            return ctxTFAT.HSNMaster.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }
        public string GetGSTName(string Code)
        {
            return ctxTFAT.TaxMaster.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public List<SelectListItem> GetDataTableList(string mQuery)
        {
            List<SelectListItem> mlist = new List<SelectListItem>();
            DataTable mdt = GetDataTable(mQuery);
            foreach (DataRow mrow in mdt.Rows)
            {
                mlist.Add(new SelectListItem { Text = mrow[1].ToString(), Value = mrow[0].ToString() });
            }
            return mlist;
        }

        public string NameofAccount(int? mcode, string mtable = "A")
        {
            if (mtable == "C")
            {
                return Fieldoftable("CurrencyMaster", "Name", "Code=" + mcode);
            }
            else if (mtable == "CC")
            {
                return Fieldoftable("CostCentre", "Name", "Code=" + mcode);
            }
            else if (mtable == "R")
            {
                return Fieldoftable("AreaMaster", "Name", "Code=" + mcode);
            }
            else if (mtable == "T")
            {
                return Fieldoftable("Stores", "Name", "Code=" + mcode);
            }
            else if (mtable == "S")
            {
                return Fieldoftable("Salesman", "Name", "Code=" + mcode);
            }
            else if (mtable == "B")
            {
                return Fieldoftable("Broker", "Name", "Code=" + mcode);
            }
            else if (mtable != "")
            {
                return Fieldoftable(mtable, "Name", "Code=" + mcode);
            }
            return "";
        }

        public string NameofAccount(string mcode, string mtable = "A")
        {
            if (mtable == "" || mtable == "A")
            {
                return Fieldoftable("Master", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "G")
            {
                return Fieldoftable("MasterGroups", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "H")
            {
                return Fieldoftable("HSNMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "D")
            {
                return Fieldoftable("DocTypes", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "I")
            {
                return Fieldoftable("ItemMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "IG")
            {
                return Fieldoftable("ItemGroups", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "U")
            {
                return Fieldoftable("TfatPass", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "B")
            {
                return Fieldoftable("TfatBranch", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "C")
            {
                return Fieldoftable("TfatComp", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "D")
            {
                return Fieldoftable("DocTypes", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "E")
            {
                return Fieldoftable("Employee", "Name", "EmpID='" + mcode + "'");
            }
            else if (mtable == "CA")
            {
                return Fieldoftable("CustomerMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "VM")
            {
                return Fieldoftable("VehicleMaster", "TruckNo", "Code='" + mcode + "'");
            }
            else if (mtable == "HVM")
            {
                return Fieldoftable("HireVehicleMaster", "TruckNo", "Code='" + mcode + "'");
            }
            else if (mtable == "DM")
            {
                return Fieldoftable("DriverMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "VCA")
            {
                return Fieldoftable("VehicleCategory", "VehicleCategory", "Code='" + mcode + "'");
            }
            else if (mtable == "VGM")
            {
                return Fieldoftable("VehicleGrpStatusMas", "VehicleGroupStatus", "Code='" + mcode + "'");
            }
            else if (mtable == "SPM")
            {
                return Fieldoftable("SparePartsMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "FMRT")
            {
                return Fieldoftable("FMROUTETable", "FmNo", "RECORDKEY=" + mcode + "");
            }
            else if (mtable == "UNM")
            {
                return Fieldoftable("UnitMaster", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "STATE")
            {
                return Fieldoftable("TfatState", "Name", "trim(upper(Name))='" + mcode + "'");
            }
            else if (mtable == "CITY")
            {
                return Fieldoftable("TfatCity", "Name", "trim(upper(Name))='" + mcode + "'");
            }
            else if (mtable == "COUNTRY")
            {
                return Fieldoftable("TfatCountry", "Name", "trim(upper(Name))='" + mcode + "'");
            }
            else if (mtable == "SERM")
            {
                return Fieldoftable("ServiceTypeMaster", "ServiceType", "Code='" + mcode + "'");
            }
            else if (mtable == "LRTP")
            {
                return Fieldoftable("LRTypeMaster", "LRType", "Code='" + mcode + "'");
            }
            else if (mtable == "DSR")
            {
                return Fieldoftable("DescriptionMaster", "Description", "Code='" + mcode + "'");
            }
            else if (mtable == "CHRG")
            {
                return Fieldoftable("ChargeTypeMaster", "ChargeType", "Code='" + mcode + "'");
            }
            else if (mtable == "CONS")
            {
                return Fieldoftable("Consigner", "Name", "Code='" + mcode + "'");
            }
            else if (mtable == "DEPT")
            {
                return Fieldoftable("Dept", "Name", "Code=" + mcode + "");
            }
            else if (mtable == "TSK")
            {
                return Fieldoftable("TaskMaster", "Name", "Code=" + mcode + "");
            }
            else if (mtable == "CHARGE")
            {
                return Fieldoftable("Charges", "Head", "RECORDKEY=" + mcode + "");
            }

            else if (mtable == "NA")
            {
                return mcode;
            }
            else if (mtable != "")
            {
                return Fieldoftable(mtable, "Name", "Code='" + mcode + "'");
            }

            return "";
        }

        public DataRow GetDataRow(string mQry)
        {
            mQry.Replace("Select * ", "Select Top 1 * ");
            DataTable mdt = GetDataTable(mQry);
            if (mdt.Rows.Count > 0)
            {
                return mdt.Rows[0];
            }
            else
            {
                return null;
            }
        }

        public DataTable GetDataTable(string mQry, string mConnStr = "")
        {
            DataTable mdt = new DataTable();
            if (string.IsNullOrEmpty(mQry) == true)
            {
                return mdt;
            }
            if (mConnStr == "")
            {
                mConnStr = GetConnectionString();
            }
            SqlConnection mConn = new SqlConnection(mConnStr);
            SqlDataAdapter da = new SqlDataAdapter(mQry, mConn);
            try
            {
                mConn.Open();
                //da.SelectCommand.CommandType = CommandType.Text;
                //da.SelectCommand.CommandTimeout = 0;
                da.Fill(mdt);
                mConn.Close();
                return mdt;
            }
            catch (DbException e)
            {
                return mdt;
            }
            finally
            {
                da.Dispose();
                mConn.Close();
                mConn.Dispose();
            }
        }

        public JsonResult GetGridDataColumns(string id, string mFlag, string mshow, string mVar1 = "_", string mVar2 = "_", string mVar3 = "_", string mVar4 = "_", string mVar5 = "_")
        {
            var mTfatSearch = ctxTFAT.TfatSearch.Where(TS => TS.Code == id && (mshow == "S" ? (("NQR".Contains(TS.ColType.Substring(0, 1)) && TS.YesTotal == true) || TS.ColField == mVar1) : true)).Select(TS => new { msno = (mshow == "S" ? (TS.ColField == mVar1 ? -1 : TS.Sno) : TS.Sno), TS.ColHead, TS.ColWidth, TS.ColField, TS.ColType, TS.YesTotal, TS.AllowEdit, TS.Decs, TS.IsHidden, TS.FormatString, BackColor = TS.RGBColor ?? "", TS.Locked }).OrderBy(x => x.msno).ToList();
            //var mTfatSearch = (from TS in ctxTFAT.TfatSearch
            //                   where TS.Code == id && (mshow == "S" ? (("NQR".Contains(TS.ColType.Substring(0, 1)) && TS.YesTotal == true) || TS.ColField == mVar1) : true) 
            //                   orderby msno
            //                   select new { msno= mshow == "S" ? (TS.ColField == mVar1 ? -1 : TS.Sno) : TS.Sno, TS.ColHead, TS.ColWidth, TS.ColField, TS.ColType, TS.YesTotal, TS.AllowEdit, TS.Decs, TS.IsHidden, TS.FormatString, BackColor = TS.RGBColor ?? "", TS.Locked }).ToList();

            //var mTfatSearch = (from TS in ctxTFAT.TfatSearch
            //                   where TS.Code == id 
            //                   orderby TS.Sno
            //                   select new { TS.ColHead, TS.ColWidth, TS.ColField, TS.ColType, TS.YesTotal, TS.AllowEdit, TS.Decs, TS.IsHidden, TS.FormatString, BackColor = TS.RGBColor ?? "", TS.Locked }).ToList();

            List<string> colname = new List<string>();
            List<GridColumn> colModal = new List<GridColumn>();
            List<object> result = new List<object>();
            string mHead = "";
            string mbackcolor = "";
            string mcoltypes = "";
            if (mshow == "") mshow = "EDVX";
            DateTime mDate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"].ToString() ?? DateTime.Now.Date.ToString());
            if (mFlag == "L")
            {
                GridColumn gc1 = new GridColumn();
                colname.Add("");
                gc1.name = "Edit";
                gc1.index = "Edit";
                if (mshow.Substring(0, 1) == "E")
                {
                    if (id == "LoadingToDispatch")
                    {
                        gc1.width = "60px";//"16px";
                    }
                    else
                    {
                        gc1.width = "34px";//"16px";
                    }

                }
                else
                {
                    gc1.width = "0px";
                    gc1.hidden = true;
                }
                gc1.frozen = true;
                gc1.filterable = false;
                gc1.search = false;
                mbackcolor += ",";
                mcoltypes += ",";
                colModal.Add(gc1);

                colname.Add("");
                gc1 = new GridColumn();
                gc1.name = "Delete";
                gc1.index = "Delete";
                if (mshow.Substring(1, 1) == "D")
                {
                    if (id == "LoadingToDispatch")
                    {
                        gc1.width = "70px";//"16px";
                    }
                    else
                    {
                        gc1.width = "34px";//"16px";
                    }
                }
                else
                {
                    gc1.width = "0px";
                    gc1.hidden = true;
                }
                gc1.frozen = true;
                gc1.search = false;
                mbackcolor += ",";
                mcoltypes += ",";
                colModal.Add(gc1);

                colname.Add("");
                gc1 = new GridColumn();
                gc1.name = "View";
                gc1.index = "View";
                if (mshow.Substring(2, 1) == "V")
                {
                    gc1.width = "34px";
                }
                else
                {
                    gc1.width = "0px";
                    gc1.hidden = true;
                }
                gc1.frozen = true;
                gc1.search = false;
                mbackcolor += ",";
                mcoltypes += ",";
                colModal.Add(gc1);

                colname.Add("");
                gc1 = new GridColumn();
                gc1.name = "Print";
                gc1.index = "Print";
                if (mshow.Substring(3, 1) == "P")
                {
                    gc1.width = "34px";
                }
                else
                {
                    gc1.width = "0px";
                    gc1.hidden = true;
                }
                gc1.frozen = true;
                gc1.search = false;
                mbackcolor += ",";
                mcoltypes += ",";
                colModal.Add(gc1);
            }
            foreach (var Fld in mTfatSearch)
            {
                mHead = Fld.ColHead.Trim().Replace("##", "");
                if (mHead.Contains("%"))
                {
                    mHead = ProcessReportHeader(mHead, mDate);
                }

                colname.Add(mHead);
                string mfld = Fld.ColField.Trim();
                if (mshow == "S") // for summarised report
                {
                    if ("NQR".Contains(Fld.ColType.Substring(0, 1)) && !(mfld.StartsWith("SUM(") || mfld.StartsWith("AVG(") || mfld.StartsWith("COUNT(") || mfld.StartsWith("MAX(") || mfld.StartsWith("MIN(")))
                    {
                        mfld = "Sum(" + mfld + ")";
                    }
                }

                GridColumn gc = new GridColumn
                {
                    name = mHead,
                    index = mfld,
                    editable = Fld.AllowEdit
                };

                switch (Fld.FormatString)
                {
                    case "L":
                        gc.align = "left";
                        break;
                    case "R":
                        gc.align = "right";
                        break;
                    case "C":
                        gc.align = "center";
                        break;
                }
                gc.frozen = Fld.Locked;
                if (Fld.ColType == "Num" || Fld.ColType == "Qty" || Fld.ColType == "Rte")
                {
                    gc.align = "right";
                    gc.formatter = "number : { decimalSeparator: \".\", thousandsSeparator: \",\", decimalPlaces: " + Fld.Decs + ", defaultValue: '0.00',GroupTemplate='{0}', summaryRound:" + Fld.Decs + ", summaryRoundType:'round'}";
                    if (Fld.YesTotal == true)
                    {
                        gc.summaryTpl = "<b>{0}</b>";
                        gc.summaryType = "sum";
                    }
                    else
                    {
                        gc.summaryTpl = "<b>{0}</b>";
                        gc.summaryType = "count";
                    }
                }
                if (Fld.ColType == "Dte" || Fld.ColType == "Dtm")
                {
                    gc.align = "center";
                    if (gc.editable == true)
                    {
                        gc.editoptions = "dataInit:function(el){$(el).datepicker({ dateFormat: 'yy-mm-dd'});}";
                    }
                }
                if (Fld.ColType == "img")
                {
                    gc.align = "center";
                    gc.formatter = "imageFormatter";
                }
                if (Fld.ColType == "Chk")
                {

                    gc.align = "center";
                    //gc.edittype = "checkbox";  
                    //if (gc.editable == true)
                    //{
                    //    gc.editoptions = "{ value: 'True: False', defaultValue: 'False' }";
                    //}
                    //gc.formatter = "checkbox";
                    //gc.formatoptions = "{ disabled: false }";
                }
                gc.sortable = true;
                gc.search = true;
                gc.width = Fld.IsHidden == true ? "0" : (Fld.ColWidth).ToString();   // removed /15
                gc.hidden = Fld.IsHidden;
                mbackcolor = mbackcolor + Fld.BackColor + ",";
                mcoltypes = mcoltypes + Fld.ColType + ",";


                colModal.Add(gc);
            }
            result.Add(GetString(colname.ToArray()));
            result.Add(colModal);
            //result.Add(open);
            //result.Add(close);
            //result.Add(TCredit);
            //result.Add(TDebit);
            result.Add(mbackcolor);
            result.Add(mcoltypes);
            if (mVar1 != null && mVar1 != "_")
            {
                result.Add(mVar1);
            }
            if (mVar2 != null && mVar2 != "_")
            {
                result.Add(mVar2);
            }
            if (mVar3 != null && mVar3 != "_")
            {
                result.Add(mVar3);
            }
            if (mVar4 != null && mVar4 != "_")
            {
                result.Add(mVar4);
            }
            if (mVar5 != null && mVar5 != "_")
            {
                result.Add(mVar5);
            }
            JsonResult JR = new JsonResult();
            JR.Data = Newtonsoft.Json.JsonConvert.SerializeObject(result);
            return JR;
        }

        public static string GetString(string[] col)
        {
            StringBuilder sb = new StringBuilder();
            foreach (string s in col)
            {
                sb.Append(s);
                sb.Append(",");
            }
            if (sb.Length > 0)
            {
                return sb.ToString().Substring(0, sb.Length - 1);
            }
            return null;
        }

        public ActionResult GetColumnsList(string mformat)
        {
            List<SelectListItem> collist = new List<SelectListItem>();
            var result = ctxTFAT.TfatSearch.OrderBy(z => z.Sno).Where(z => z.Code == mformat && z.IsHidden == false).Select(m => new { m.ColHead, m.ColField }).ToList();
            if (result != null)
            {
                foreach (var item in result)
                {
                    collist.Add(new SelectListItem { Text = item.ColHead, Value = item.ColField });
                }
            }
            return Json(collist, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetPDF(GridOption Model, string mwhat, string mpageorient, string mpapersize, string memaildata)
        {
            Model.mWhat = mwhat;
            PreExecute(Model);
            if (Model.Date == null || Model.Date == "undefined:undefined")
            {
                Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
                Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
                Model.FromDate = (Convert.ToDateTime(Model.FromDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                Model.ToDate = (Convert.ToDateTime(Model.ToDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            }
            else
            {
                var Date = Model.Date.Split(':');
                if (Date[0] == null || Date[0] == "undefined")
                {
                    //Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
                }
                else
                {
                    Model.FromDate = Date[0];
                }
                if (Date[1] == null || Date[1] == "undefined")
                {
                    Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
                }
                else
                {
                    Model.ToDate = Date[1];
                }
                Model.FromDate = (Convert.ToDateTime(Model.FromDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                Model.ToDate = (Convert.ToDateTime(Model.ToDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);

            }
            if (Model.mParaString != null && Model.mParaString != "" && mpara == "")// mpara="" added SDS 25/07/2020 since mpara gets initialised in other tabs
            {
                mpara = Model.mParaString;
            }
            if (Model.SelectContent == null)
            {
                Model.SelectContent = Model.Code;
            }

            ppara02 = NameofAccount(Model.SelectContent);
            ppara23 = ppara02;
            //Model.Code = Model.SelectContent;
            ppara24 = Model.Opening.ToString();
            ppara22 = Model.Closing.ToString();
            string[] mArr = { ppara01, ppara02, ppara03, ppara04, ppara05, ppara06, ppara07, ppara08, ppara09, ppara10, ppara11, ppara12, ppara13, ppara14, ppara15, ppara16, ppara17, ppara18, ppara19, ppara20, ppara21, ppara22, ppara23, ppara24 };
            switch (mwhat)
            {
                case "RPDF":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Portrait", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "pdf", false, Model.SelectContent);
                case "RPDL":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "pdf", false, Model.SelectContent);
                case "RXLS":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "Excel", false, Model.SelectContent);
                case "RWRD":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "Word", false, Model.SelectContent);
                case "EPDF":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "pdf", true, Model.SelectContent, memaildata);
                case "EXLS":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "Excel", true, Model.SelectContent, memaildata);
                case "EWRD":
                    return ExportSSRSReport(CreateSSRSReport(Model, "L", mArr, "Landscape", "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), Model.Opening), Model.ViewDataId, "Word", true, Model.SelectContent, memaildata);
                case "ECRPDF":   // crystal report format
                    return PrintReportsCrystal(Model, "REP_" + Model.ViewDataId, "SPREP_" + Model.ViewDataId, "PDF", true, "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), mpageorient, mpapersize, memaildata);
                case "CRPDF":   // crystal report format
                    return PrintReportsCrystal(Model, "REP_" + Model.ViewDataId, "SPREP_" + Model.ViewDataId, "PDF", false, "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), mpageorient, mpapersize, memaildata);
                default:
                    break;
            }
            return GetGridReport(Model, "R", Model.SelectContent == null ? (mpara != "" ? "~" + mpara : "") : "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), true, Model.Opening, "", mpapersize, mArr);
        }

        public void PreExecute(GridOption Model)
        {
            if (Model.MainType != "" && Model.MainType != "" && Model.THead != null && Model.THead != "")
            {

                if (Model.THead == "monthly" || Model.THead == "monthlyplus")
                {
                    Model.ViewDataId = Model.ViewDataId + "Monthly";
                }
                else if (Model.THead == "branch" || Model.THead == "branchplus")
                {
                    Model.ViewDataId = Model.ViewDataId + "Branch";
                }
                if (Model.THead == "tee" || Model.THead == "teeplus")
                {
                    Model.ViewDataId += "T";
                }

                GenerateGrpWithBalance(Model.Date, Model.Branch, Model.MainType, Model.LocationCode, Model.THead, Model.IsHidden, Model.Closing, false);
                if (Model.THead == "tee" || Model.THead == "teeplus")
                {
                    if (Model.MainType == "PL" || Model.MainType == "PLL")
                    {
                        var date = Model.Date.Replace("-", "/").Split(':');
                        string mFromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                        string mToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                        ExecuteStoredProc("dbo.SPTFAT_GenerateTFormatPL '" + Model.Branch + "'," + Model.LocationCode + ",'" + mFromDate + "','" + mToDate + "'");
                    }
                    else if (Model.MainType == "BS" || Model.MainType == "BSL")
                    {
                        //GenerateGrpWithBalance(Model.Date, mbranchcode, Model.MainType, Model.LocationCode, Model.THead);
                        ExecuteStoredProc("dbo.SPTFAT_GenerateTFormatBS");
                    }
                }



            }
        }

        public string GetMonthString()
        {
            string mstr = "";
            DateTime mdate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"]).Date;
            for (int x = 0; x < 12; x++)
            {
                mstr += mdate.ToString("MMM") + " " + mdate.Year.ToString() + ",";
                mdate = mdate.AddMonths(1);
            }
            return CutRightString(mstr, 1, ",");
        }

        public string[] GetMonthlyBalance(string mquery = "", string mCode = "")
        {
            if (mquery == "")
            {
                mquery = "Select FORMAT(DocDate, 'MMM') + ' ' + cast(year(docdate) as varchar(4)) as MonthName, Sum(Debit-Credit) as Amt from Ledger where Code='" + mCode + "' and docdate>='%RepStartDate' and docdate<='%RepEndDate' " + (string.IsNullOrEmpty(mDocString) ? "" : " And CharIndex(Type,'" + mDocString + "')=0") + " Group by Code,FORMAT(DocDate, 'MMM') + ' ' + cast(year(docdate) as varchar(4))";
            }

            mquery = mquery.Replace("%Branch", mbranchcode);
            mquery = mquery.Replace("%StartDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"].ToString())));
            mquery = mquery.Replace("%LastDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"].ToString())));
            mquery = mquery.Replace("%RepStartDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"].ToString())));
            mquery = mquery.Replace("%RepEndDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"].ToString())));

            DataTable mdt = GetDataTable(mquery);
            DataColumn[] Key = new DataColumn[1];
            Key[0] = mdt.Columns[0];
            mdt.PrimaryKey = Key;
            string[] mArr = new string[12];
            DateTime mdate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"]).Date;
            for (int x = 0; x < 12; x++)
            {
                string mstr = mdate.ToString("MMM") + " " + mdate.Year.ToString();
                DataRow mrow = mdt.Rows.Find(mstr);
                if (mrow != null)
                {
                    mArr[x] = mrow[1].ToString();
                }
                else
                {
                    mArr[x] = "0";
                }
                mdate = mdate.AddMonths(1);
            }
            return mArr;
        }

        public string GetDocumentString()
        {
            string mstr;
            if (Convert.ToBoolean(Session["IsBlack"]) == true)
            {
                mstr = "";
                Session["DocString"] = "";
            }
            else
            {
                mstr = RecToString("Select Code from DocTypes Where AppBranch='" + mbranchcode + "' And DocBackward<>0");
                Session["DocString"] = mstr;
            }
            return mstr;
        }

        public ActionResult GetGridReport(GridOption Model, string mReportType = "R", string mParaString = "", bool mRunning = false, decimal mopening = 0, string mFilter = "", string mpapersize = "A4", string[] mparameters = null)
        {


            string connstring = GetConnectionString();
            string mFixedPara = "";
            if (Model.Para != null)
            {
                mFixedPara = Model.Para.ToString();
            }
            if (mFixedPara != "")
            {
                mFixedPara += "~";
            }
            mParaString = mFixedPara + mParaString;
            Model.searchField = Model.searchField == null || Model.searchField == "null" ? "" : Model.searchField;
            Model.searchString = Model.searchString ?? "";
            string mWhat = Model.mWhat ?? "";
            int startIndex = mWhat == "" ? (Model.page - 1) * Model.rows + 1 : -1;
            int endIndex = mWhat == "" ? (Model.page * Model.rows) : -1;

            SqlDataAdapter da = new SqlDataAdapter();
            using (DataTable dt = new DataTable())
            {
                SqlCommand cmd = new SqlCommand();

                if (Model.searchField != "" && Model.searchString != "" && mFilter == "")
                {
                    switch (Model.searchOper)
                    {
                        case "eq":
                            mFilter = Model.searchField + " = '" + Model.searchString + "'";
                            break;
                        case "ne":
                            mFilter = Model.searchField + " <> " + Model.searchString;
                            break;
                        case "bw":
                            mFilter = Model.searchField + " like '" + Model.searchString + "%'";
                            break;
                        case "bn":
                            mFilter = Model.searchField + " Not like '" + Model.searchString + "%'";
                            break;
                        case "ew":
                            mFilter = Model.searchField + " like '%" + Model.searchString + "'";
                            break;
                        case "en":
                            mFilter = Model.searchField + " Not like '%" + Model.searchString + "'";
                            break;
                        case "cn":
                            mFilter = Model.searchField + " like '%" + Model.searchString + "%'";
                            break;
                        case "in":
                            mFilter = Model.searchField + " in ( " + Model.searchString + ")";
                            break;
                        case "nc":
                            mFilter = Model.searchField + " Not like '%" + Model.searchString + "%'";
                            break;
                        case "ni":
                            mFilter = Model.searchField + " Not like '%" + Model.searchString + "%'";
                            break;
                        case "Active":
                            mFilter = Model.searchField + Model.searchString;
                            break;
                        case "Running":
                            mFilter = Model.searchField + Model.searchString;
                            break;
                    }
                }


                try
                {
                    SqlConnection con = new SqlConnection(connstring);
                    cmd = new SqlCommand("dbo.ExecuteReport", con)
                    {
                        CommandType = CommandType.StoredProcedure
                    };
                    cmd.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = Model.ViewDataId;
                    cmd.Parameters.Add("@mAlias", SqlDbType.VarChar).Value = (Model.searchtype ?? "").StartsWith("^S") ? "^" + Model.searchField : ""; // since currently not used, we use it for summarised report flag
                    cmd.Parameters.Add("@mCurrDec", SqlDbType.TinyInt).Value = 2;
                    cmd.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
                    cmd.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
                    //if (mReportType == "M")
                    //{
                    //    Model.FromDate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"]).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                    //    Model.ToDate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"]).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                    //}
                    //else
                    {
                        if (Model.Date != null && Model.Date != "undefined:undefined")
                        {
                            var date = Model.Date.Replace("-", "/").Split(':');
                            if (date[0] != "undefined")
                            {
                                Model.FromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
                                Model.FromDate = (Convert.ToDateTime(Model.FromDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                            }
                            if (date[1] != "undefined")
                            {
                                Model.ToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
                                Model.ToDate = (Convert.ToDateTime(Model.ToDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                            }
                        }
                        else
                        {
                            Model.FromDate = System.Web.HttpContext.Current.Session["StartDate"].ToString();
                            Model.ToDate = System.Web.HttpContext.Current.Session["LastDate"].ToString();
                            Model.FromDate = (Convert.ToDateTime(Model.FromDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                            Model.ToDate = (Convert.ToDateTime(Model.ToDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                        }
                    }
                    cmd.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = Model.FromDate;
                    cmd.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = Model.ToDate;
                    cmd.Parameters.Add("@mIsRunBalance", SqlDbType.Bit).Value = false;// mRunning;
                    //cmd.Parameters.Add("@mOrderBy", SqlDbType.VarChar).Value = Model.sidx != null ? (Model.sidx.Replace(",", "") + ' ' + (Model.sidx.Contains("asc") || Model.sidx.Contains("desc") ? "" : Model.sord)) : "";
                    string mstrx = (Model.searchtype ?? "").StartsWith("^S") ? Model.searchField : (Model.sidx != null ? (Model.sidx + ' ' + (Model.sidx.Contains("asc") || Model.sidx.Contains("desc") ? "" : Model.sord)) : "");
                    mstrx = CutRightString(mstrx.Trim(), 1, ",");
                    cmd.Parameters.Add("@mOrderBy", SqlDbType.VarChar).Value = mstrx;// Model.sidx != null ? (Model.sidx + ' ' + (Model.sidx.Contains("asc") || Model.sidx.Contains("desc") ? "" : Model.sord)) : "";
                    cmd.Parameters.Add("@mStartIndex", SqlDbType.Int).Value = startIndex;
                    cmd.Parameters.Add("@mEndIndex", SqlDbType.Int).Value = endIndex;
                    cmd.Parameters.Add("@mRunBalance", SqlDbType.Decimal).Value = mRunning == true ? Model.Opening : 0;
                    cmd.Parameters.Add("@mInsertIntoTable", SqlDbType.VarChar).Value = "";// mRunning == true ? Model.ViewDataId : "";
                    cmd.Parameters.Add("@mPara", SqlDbType.VarChar).Value = mParaString;
                    cmd.Parameters.Add("@mFilter", SqlDbType.VarChar).Value = mFilter;
                    cmd.Parameters.Add("@mDocString", SqlDbType.VarChar).Value = mDocString;
                    // for output
                    cmd.Parameters.Add("@mSumString", SqlDbType.VarChar, 500000).Value = "";
                    cmd.Parameters.Add("@mReturnQuery", SqlDbType.VarChar, 500000).Value = "";
                    cmd.Parameters["@mSumString"].Direction = ParameterDirection.Output;
                    cmd.Parameters["@mReturnQuery"].Direction = ParameterDirection.Output;
                    con.Open();
                    da.SelectCommand = cmd;
                    da.Fill(dt);
                    string mSumString = (string)(cmd.Parameters["@mSumString"].Value ?? "");
                    string mReturnString = (string)(cmd.Parameters["@mReturnQuery"].Value ?? "");
                    con.Close();
                    con.Dispose();
                    // physical merge rows
                    var mvar = ctxTFAT.ReportHeader.Where(z => z.Code == Model.ViewDataId).Select(x => new { x.pMerge, x.pToMerge, x.pBlank }).FirstOrDefault();
                    string mpmerge = "";
                    string mptomerge = "";


                    if (mvar != null)
                    {


                        mpmerge = (mvar.pMerge ?? "").Trim();
                        mptomerge = (mvar.pToMerge ?? "").Trim();
                    }
                    if (mpmerge != "")
                    {

                        var MergingSingleColumn = mvar.pMerge.Split('^');
                        var MergingMultiplColumnList = mvar.pToMerge.Split('^');
                        for (int i = 0; i < MergingSingleColumn.Length; i++)
                        {
                            mpmerge = MergingSingleColumn[i];
                            mptomerge = MergingMultiplColumnList[i];

                            if (mpmerge.Contains("+"))
                            {
                                var marr = mpmerge.Replace("+", "");
                                var marr1 = mptomerge.Split('-');
                                decimal NetProfit = 0;

                                for (int l = 0; l < dt.Rows.Count - 1; l++)
                                {
                                    NetProfit = 0;
                                    foreach (var item in marr1[0].Split(','))
                                    {
                                        int Col = Convert.ToInt32(item) - 1;
                                        NetProfit += Convert.ToDecimal(dt.Rows[l][Col]);
                                    }
                                    foreach (var item in marr1[1].Split(','))
                                    {
                                        int Col = Convert.ToInt32(item) - 1;
                                        NetProfit -= Convert.ToDecimal(dt.Rows[l][Col]);
                                    }
                                    int Col1 = Convert.ToInt32(marr) - 1;
                                    dt.Rows[l][Col1] = NetProfit;
                                }

                            }
                            else
                            {
                                var marr = mpmerge.Split(',');
                                if (mptomerge.EndsWith(",") == false)
                                {
                                    mptomerge += ",";
                                }

                                if (mptomerge.StartsWith(",") == false)
                                {
                                    mptomerge = "," + mptomerge;
                                }
                                string mstr = "";
                                for (int n = 0; n <= dt.Rows.Count - 1; n++)
                                {
                                    string mstr2 = "";
                                    for (int m = 0; m <= marr.Count() - 1; m++)
                                    {
                                        if (marr[m] != "")
                                        {
                                            mstr2 += dt.Rows[n][Convert.ToInt32(marr[m]) - 1];
                                        }
                                    }

                                    if (mstr == mstr2)
                                    {
                                        for (int z = 0; z <= dt.Columns.Count - 1; z++)
                                        {
                                            if (mptomerge.Contains("," + (z + 1).ToString() + ","))
                                            {
                                                if (dt.Columns[z].DataType == System.Type.GetType("System.Byte") || dt.Columns[z].DataType == System.Type.GetType("System.Decimal") || dt.Columns[z].DataType == System.Type.GetType("System.Double") || dt.Columns[z].DataType == System.Type.GetType("System.Int16") || dt.Columns[z].DataType == System.Type.GetType("System.Int32") || dt.Columns[z].DataType == System.Type.GetType("System.Int64") || dt.Columns[z].DataType == System.Type.GetType("System.Single"))
                                                {
                                                    dt.Rows[n][z] = 0;
                                                }
                                                else
                                                {
                                                    dt.Rows[n][z] = "";
                                                }
                                            }
                                        }
                                    }
                                    mstr = mstr2;
                                }
                            }

                        }



                    }
                    // merge routine over

                    if (mRunning == true && Model.ViewDataId != "TripsheetReport" && Model.ViewDataId != "TripDriverSummary")
                    {
                        int mbalcol = -1;
                        int mruncol = -1;
                        int mCodecol = -1;
                        int i;
                        string Code = "NA", PrevCode = "NA";
                        for (i = 0; i < dt.Columns.Count; i++)
                        {
                            string mcolname = dt.Columns[i].ColumnName.Trim().ToLower();
                            if (mcolname == "balancefield")
                            {
                                mbalcol = i;
                            }
                            if (mcolname == "runningbalance" || mcolname == "balance")
                            {
                                mruncol = i;
                            }
                            if (mcolname == "Code")
                            {
                                mCodecol = i;
                            }
                        }
                        if (mbalcol != -1 && mruncol != -1)
                        {
                            decimal mbal = mopening;
                            foreach (DataRow dr in dt.Rows)
                            {
                                if (mCodecol != -1)
                                {
                                    if (Code == "NA" && PrevCode == "NA")
                                    {
                                        Code = (string)dr[mCodecol];
                                        PrevCode = (string)dr[mCodecol];
                                    }
                                    else
                                    {
                                        PrevCode = (string)dr[mCodecol];
                                    }

                                    if (Code != PrevCode)
                                    {
                                        mbal = 0;
                                    }
                                }
                                mbal += (decimal)dr[mbalcol];
                                dr[mruncol] = mbal;
                            }
                        }
                    }
                    else if (Model.ViewDataId == "TripsheetReport" || Model.ViewDataId == "TripDriverSummary")
                    {
                        int mbalcol = -1;
                        int mruncol = -1;
                        //int mCodecol = -1;
                        int mCodeLedOpn = -1;
                        //int uptotripbal = -1;
                        int i;
                        string Code = "NA", PrevCode = "NA";
                        for (i = 0; i < dt.Columns.Count; i++)
                        {
                            string mcolname = dt.Columns[i].ColumnName.Trim().ToLower();
                            if (mcolname == "balancefield")
                            {
                                mbalcol = i;
                            }
                            if (mcolname == "runningbalance" || mcolname == "balance")
                            {
                                mruncol = i;
                            }
                            if (mcolname == "opening")
                            {
                                mCodeLedOpn = i;
                            }
                        }
                        if (mbalcol != -1 && mruncol != -1)
                        {
                            var demo = dt.AsEnumerable().GroupBy(row => row.Field<string>("Driver")).Select(group => group.Key).ToList();
                            for (int j = 0; j < demo.Count(); j++)
                            {
                                var VehicleCodet = demo[j].ToString();
                                decimal mbal = 0;

                                //var CoptBal = mbal;
                                var DatarowList = dt.Select("Driver = '" + VehicleCodet + "'");
                                int Xcnt = 0;
                                foreach (DataRow dr in DatarowList)
                                {
                                    if (Xcnt == 0)
                                    {
                                        mbal = (decimal)dr[mCodeLedOpn];
                                    }
                                    ++Xcnt;

                                    mbal += (decimal)dr[mbalcol];
                                    dr[mruncol] = mbal;

                                }
                            }

                        }
                    }
                    //string mSumJson = "";
                    StringBuilder jsonBuilder = new StringBuilder();
                    if ((mReportType == "R" || mReportType == "T") && dt.Rows.Count > 0)
                    {
                        try
                        {
                            DataTable msumdt = GetDataTable(@mSumString.Replace("[[", "[").Replace("]]", "]"), connstring);
                            //float[] marr = new float[dt.Columns.Count];
                            dt.Rows.Add();
                            if (msumdt.Rows.Count > 0)
                            {
                                int x = dt.Rows.Count;
                                for (int m = 0; m <= msumdt.Columns.Count - 1; m++)
                                {
                                    if (msumdt.Rows[0][m].ToString() == "")
                                    {
                                        dt.Rows[x - 1][m] = "";
                                    }
                                    else
                                    {
                                        try { dt.Rows[x - 1][m] = Convert.ToDecimal(msumdt.Rows[0][m]); }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                }
                            }
                            msumdt.Dispose();
                        }
                        catch (Exception exx)
                        {
                        }
                    }
                    else
                    {
                        //jsonBuilder.Append("");
                    }

                    if (mReportType != "R" && mReportType != "X" && mWhat != "PDF" && mWhat != "PDL" && mWhat != "XLS")
                    {
                        dt.Columns.Add("XYZ", typeof(string)).SetOrdinal(0);
                        dt.Columns.Add("ABC", typeof(string)).SetOrdinal(1);
                        dt.Columns.Add("FGH", typeof(string)).SetOrdinal(2);
                        dt.Columns.Add("PTG", typeof(string)).SetOrdinal(3);
                    }

                    if (mWhat == "")
                    {
                        // for count
                        SqlDataAdapter da2 = new SqlDataAdapter();
                        DataTable dt2 = new DataTable();
                        SqlCommand cmd2 = new SqlCommand();
                        SqlConnection con2 = new SqlConnection(connstring);
                        cmd2 = new SqlCommand("dbo.GetRowCount", con2)
                        {
                            CommandType = CommandType.StoredProcedure
                        };
                        cmd2.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = Model.ViewDataId;
                        cmd2.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
                        cmd2.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
                        //if (mReportType == "M")
                        //{
                        //    cmd2.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = "2018-01-01";
                        //    cmd2.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = "2019-01-01";
                        //}
                        //else
                        //{
                        cmd2.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = Model.FromDate;
                        cmd2.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = Model.ToDate;
                        //}
                        cmd2.Parameters.Add("@mPara", SqlDbType.VarChar).Value = mParaString;
                        cmd2.Parameters.Add("@mFilter", SqlDbType.VarChar).Value = mFilter;
                        cmd2.Parameters.Add("@mDocString", SqlDbType.VarChar).Value = mDocString;
                        // for output
                        cmd2.Parameters.Add("@mRowCount", SqlDbType.Int).Value = 0;
                        cmd2.Parameters["@mRowCount"].Direction = ParameterDirection.Output;
                        con2.Open();
                        da2.SelectCommand = cmd2;
                        int mxRowCount = 0;
                        try { da2.Fill(dt2); mxRowCount = (int)cmd2.Parameters["@mRowCount"].Value; } catch (Exception e) { mxRowCount = Model.rows; }
                        cmd2.Dispose();
                        dt2.Dispose();
                        da2.Dispose();
                        con2.Close();
                        con2.Dispose();
                        return Content(JQGridHelper.JsonForJqgrid(dt, Model.rows, mxRowCount, Model.page, jsonBuilder.ToString()), "application/json");
                    }
                    else     // XLS or PDF
                    {
                        if (Model.mWhat == "XLS")
                        {
                            string attachment = "attachment; filename=" + Model.ViewDataId + @".xls";
                            Response.ClearContent();
                            Response.AddHeader("content-disposition", attachment);
                            Response.ContentType = "application/vnd.ms-excel";
                            var mWidths = (from xx in ctxTFAT.TfatSearch
                                           where xx.Code == Model.ViewDataId && xx.CalculatedCol != true
                                           orderby xx.Sno
                                           select new { xx.ColHead, ColWidth = (float)(xx.IsHidden == true ? 0 : xx.ColWidth) }).ToList();
                            float[] headerx = mWidths.Select(z => z.ColWidth).ToArray();
                            string tab = "";
                            string mHead = "";
                            DateTime mDate = Convert.ToDateTime(Model.ToDate);
                            int x = 0;
                            foreach (DataColumn dc in dt.Columns)
                            {
                                if (dc.ColumnName != "_Style" && headerx[x] > 5)
                                {
                                    mHead = mWidths[x].ColHead.Trim().Replace("##", "");
                                    if (mHead == "") mHead = dc.ColumnName;
                                    if (mHead.Contains("%"))
                                    {
                                        mHead = ProcessReportHeader(mHead, mDate);
                                    }
                                    Response.Write(tab + mHead);//dc.ColumnName
                                    tab = "\t";
                                }
                                ++x;
                            }
                            Response.Write("\n");
                            x = 0;
                            foreach (DataRow dr in dt.Rows)
                            {
                                tab = "";
                                x = 0;
                                for (int i = 0; i < dt.Columns.Count; i++)
                                {
                                    if (dt.Columns[i].ColumnName != "_Style" && headerx[x] > 5)
                                    {
                                        Response.Write(tab + dr[i].ToString().Replace("\"", "").Replace(@"\", "").Replace("\n", "").Replace("\r", "").Replace("\t", "").Replace("\b", ""));
                                        tab = "\t";
                                    }
                                    ++x;
                                }
                                Response.Write("\n");
                            }
                            Response.End();
                        }
                        else if (Model.mWhat == "PDF" || Model.mWhat == "PDL")
                        {
                            Model.AccountDescription = ctxTFAT.ReportHeader.Where(z => z.Code == Model.ViewDataId).Select(x => x.FormatHead).FirstOrDefault() ?? "";
                            if (Model.AccountDescription != "")
                            {
                                Model.AccountDescription = Model.AccountDescription.Replace("%RepStartDate", Model.FromDate);
                                Model.AccountDescription = Model.AccountDescription.Replace("%RepEndDate", Model.ToDate);
                            }



                            if (mparameters != null)
                            {
                                for (int xx = 0; xx <= 23; xx++)
                                {
                                    string mfld = "%para" + (xx + 1).ToString().PadLeft(2, '0');
                                    if (Model.AccountDescription.Contains(mfld))
                                    {
                                        Model.AccountDescription = Model.AccountDescription.Replace(mfld, mparameters[xx]);
                                    }
                                }
                            }
                            CreatePDF(Model, dt, Model.AccountDescription, Model.mWhat == "PDL" ? "Landscape" : "Portrait", mpapersize);
                        }
                        else if (Model.mWhat == "SRS")
                        {
                            //DS_xReport ds = new DS_xReport();
                            //ReportViewer reportViewer = new Microsoft.Reporting.WebForms.ReportViewer();
                            //reportViewer.ProcessingMode = ProcessingMode.Local;
                            //reportViewer.SizeToReportContent = true;
                            //reportViewer.ZoomMode = ZoomMode.PageWidth;
                            //reportViewer.ShowToolBar = true;
                            //reportViewer.AsyncRendering = true;
                            //reportViewer.Reset();
                            //var mConn = GetConnectionString();
                            //SqlConnection conx = new SqlConnection(mConn);
                            //SqlDataAdapter adp = new SqlDataAdapter("Select Master.*,TfatBranch.* from Master,TfatBranch Where TfatBranch.Code='" + mbranchcode + "';", conx);
                            ////SqlConnection conx1 = new SqlConnection(mConn); SqlDataAdapter adp1 = new SqlDataAdapter("SELECT RECORDKEY, ComplaintId, PendingReasonId, Prefix,(select name from repair where code = RepairStatus)as RepairName,RepairStatus, SrNo, VisitComment, VisitDate, VisitEnggId, VisitInTime, VisitOutTime, TOUCHVALUE, ENTEREDBY, LASTUPDATEDATE, ServiceCenterId,(select name from scuserinfo where code = VisitEnggId) as Technician from complaintvisitdetails WHERE ComplaintId IS NOT NULL  and ComplaintId = " + "'" + Model.Srl + "'" + ";", conx1);
                            ////SqlConnection conx2 = new SqlConnection(mConn); SqlDataAdapter adp2 = new SqlDataAdapter("SELECT  RecordKey, Code, FirstName, LastName, Adrl1, Adrl2, Adrl3, Pin, StateId, CityId, MobileNo, Tel1, Email, LandMark, Locality, DocDate  from sccustomermaster where sccustomermaster.Code = " + "'" + Model.CustomerId + "'" + ";", conx2);
                            ////SqlConnection conx3 = new SqlConnection(mConn); SqlDataAdapter adp3 = new SqlDataAdapter("SELECT  RECORDKEY, CustomerId, PartCode, Prefix, ProductId, Qty, Rate, SerialNo, ServiceCenterId, TOUCHVALUE, ENTEREDBY, LASTUPDATEDATE, ComplaintId, VisitId, SrNo, (select name from itemdetail where code = PartCode and grp = '000009' and branch = 'HO0000') as PartName,Qty* Rate as Amount from ComplaintPart  where ComplaintPart.ComplaintId = " + "'" + Model.Srl + "'" + ";", conx3);

                            //adp.Fill(ds, ds.DataTable1.TableName);
                            ////adp1.Fill(ds, ds.ComplaintVisitDetails.TableName);
                            ////adp2.Fill(ds, ds.SCCustomerMaster.TableName);
                            ////adp3.Fill(ds, ds.ComplaintPart.TableName);
                            //reportViewer.LocalReport.ReportPath = Server.MapPath("/Reports/xReport.rdlc");
                            //ReportDataSource rds = new ReportDataSource("DS_xReport", ds.Tables[0]);
                            ////ReportDataSource rds1 = new ReportDataSource("ComplDataSet", ds.Tables[3]);
                            ////ReportDataSource rds2 = new ReportDataSource("CVisitDataSet", ds.Tables[1]);
                            ////ReportDataSource rds3 = new ReportDataSource("CustDataSet", ds.Tables[2]);
                            //reportViewer.LocalReport.DataSources.Clear();
                            //reportViewer.LocalReport.DataSources.Add(rds);
                            ////reportViewer.LocalReport.DataSources.Add(rds1);
                            ////reportViewer.LocalReport.DataSources.Add(rds2);
                            ////reportViewer.LocalReport.DataSources.Add(rds3);
                            //reportViewer.LocalReport.Refresh();
                            //ViewBag.ReportViewer = reportViewer;
                            //return View();
                        }
                        return null;
                    }
                }
                catch (Exception e)
                {
                    Session["ErrorMessage"] = e.Message;
                    Response.StatusCode = (int)HttpStatusCode.BadRequest;
                    return Json(new { Message = e.Message.Replace("'", "") });
                    //return Json(new { Message = e.Message, Status = "Error" }, JsonRequestBehavior.AllowGet);
                }
                finally
                {
                    cmd.Dispose();
                    da.Dispose();
                }
            }
        }

        public string ProcessReportHeader(string mHead, DateTime mDate)
        {
            if (mHead.Contains("%MonthYear"))
            {
                mHead = mHead.Replace("%MonthYear1", mDate.ToString("MMM") + "-" + mDate.Year);
                mHead = mHead.Replace("%MonthYear2", mDate.AddMonths(1).ToString("MMM") + "-" + mDate.AddMonths(1).Year);
                mHead = mHead.Replace("%MonthYear3", mDate.AddMonths(2).ToString("MMM") + "-" + mDate.AddMonths(2).Year);
                mHead = mHead.Replace("%MonthYear4", mDate.AddMonths(3).ToString("MMM") + "-" + mDate.AddMonths(3).Year);
                mHead = mHead.Replace("%MonthYear5", mDate.AddMonths(4).ToString("MMM") + "-" + mDate.AddMonths(4).Year);
                mHead = mHead.Replace("%MonthYear6", mDate.AddMonths(5).ToString("MMM") + "-" + mDate.AddMonths(5).Year);
                mHead = mHead.Replace("%MonthYear7", mDate.AddMonths(6).ToString("MMM") + "-" + mDate.AddMonths(6).Year);
                mHead = mHead.Replace("%MonthYear8", mDate.AddMonths(7).ToString("MMM") + "-" + mDate.AddMonths(7).Year);
                mHead = mHead.Replace("%MonthYear9", mDate.AddMonths(8).ToString("MMM") + "-" + mDate.AddMonths(8).Year);
                mHead = mHead.Replace("%MonthYearA", mDate.AddMonths(9).ToString("MMM") + "-" + mDate.AddMonths(9).Year);
                mHead = mHead.Replace("%MonthYearB", mDate.AddMonths(10).ToString("MMM") + "-" + mDate.AddMonths(10).Year);
                mHead = mHead.Replace("%MonthYearC", mDate.AddMonths(11).ToString("MMM") + "-" + mDate.AddMonths(11).Year);
            }
            if (mHead.ToLower().Contains("%para"))
            {
                // para10/20 processed first as para1 will spoil para10
                mHead = mHead.Replace("%para24", ppara24);
                mHead = mHead.Replace("%para23", ppara23);
                mHead = mHead.Replace("%para22", ppara22);
                mHead = mHead.Replace("%para21", ppara21);
                mHead = mHead.Replace("%para20", ppara20);
                mHead = mHead.Replace("%para19", ppara19);
                mHead = mHead.Replace("%para18", ppara18);
                mHead = mHead.Replace("%para17", ppara17);
                mHead = mHead.Replace("%para16", ppara16);
                mHead = mHead.Replace("%para15", ppara15);
                mHead = mHead.Replace("%para14", ppara14);
                mHead = mHead.Replace("%para13", ppara13);
                mHead = mHead.Replace("%para12", ppara12);
                mHead = mHead.Replace("%para11", ppara11);
                mHead = mHead.Replace("%para10", ppara10);
                mHead = mHead.Replace("%para09", ppara09);
                mHead = mHead.Replace("%para08", ppara08);
                mHead = mHead.Replace("%para07", ppara07);
                mHead = mHead.Replace("%para06", ppara06);
                mHead = mHead.Replace("%para05", ppara05);
                mHead = mHead.Replace("%para04", ppara04);
                mHead = mHead.Replace("%para03", ppara03);
                mHead = mHead.Replace("%para02", ppara02);
                mHead = mHead.Replace("%para01", ppara01);
                mHead = mHead.Replace("%para9", ppara09);
                mHead = mHead.Replace("%para8", ppara08);
                mHead = mHead.Replace("%para7", ppara07);
                mHead = mHead.Replace("%para6", ppara06);
                mHead = mHead.Replace("%para5", ppara05);
                mHead = mHead.Replace("%para4", ppara04);
                mHead = mHead.Replace("%para3", ppara03);
                mHead = mHead.Replace("%para2", ppara02);
                mHead = mHead.Replace("%para1", ppara01);
            }
            return mHead;
        }

        public DataTable InsertTotalRow(DataTable dt, string mcolumns)
        {
            float[] marr = new float[dt.Columns.Count];
            marr[0] = 0;
            var marr2 = mcolumns.Split(',');
            int m;
            int x;
            for (int n = 0; n <= dt.Rows.Count - 1; n++)
            {
                for (m = 0; m <= marr2.Count() - 1; m++)
                {
                    if (marr2[m] != "")
                    {
                        x = Convert.ToInt32(marr2[m]) - 1;
                        marr[x] += Convert.ToSingle(String.IsNullOrEmpty(dt.Rows[n][x].ToString()) == true ? 0 : dt.Rows[n][x]);
                    }
                }
            }
            dt.Rows.Add(marr);
            x = dt.Rows.Count;
            for (m = 0; m <= marr.Count() - 1; m++)
            {
                dt.Rows[x - 1][m] = Math.Round(marr[m], 2);
            }
            return dt;
        }

        // used to remove (make them black) duplicate data from the datatable
        public DataTable MergeRowData(DataTable dt, string mpmerge, string mptomerge)
        {
            // e.g.MergeRowData(mdt, "4", "9,10"); 
            // 4 is the column to check as key
            // 9,10 are the columns whose data to be removed if duplicate
            // bool mpblank = true; // mvar.pBlank; its forcibly set to true since false raises some error
            var marr = mpmerge.Split(',');
            if (mptomerge.EndsWith(",") == false)
            {
                mptomerge += ",";
            }

            if (mptomerge.StartsWith(",") == false)
            {
                mptomerge = "," + mptomerge;
            }
            string mstr = "";
            for (int n = 0; n <= dt.Rows.Count - 1; n++)
            {
                string mstr2 = "";
                for (int m = 0; m <= marr.Count() - 1; m++)
                {
                    if (marr[m] != "")
                    {
                        mstr2 += dt.Rows[n][Convert.ToInt32(marr[m]) - 1];
                    }
                }

                if (mstr == mstr2)
                {
                    for (int z = 0; z <= dt.Columns.Count - 1; z++)
                    {
                        if (mptomerge.Contains("," + (z + 1).ToString() + ","))
                        {
                            if (dt.Columns[z].DataType == System.Type.GetType("System.Byte") || dt.Columns[z].DataType == System.Type.GetType("System.Decimal") || dt.Columns[z].DataType == System.Type.GetType("System.Double") || dt.Columns[z].DataType == System.Type.GetType("System.Int16") || dt.Columns[z].DataType == System.Type.GetType("System.Int32") || dt.Columns[z].DataType == System.Type.GetType("System.Int64") || dt.Columns[z].DataType == System.Type.GetType("System.Single"))
                            {
                                dt.Rows[n][z] = 0;
                            }
                            else
                            {
                                dt.Rows[n][z] = "";
                            }
                        }
                    }
                }
                mstr = mstr2;
            }
            return dt;
        }

        public void CreatePDF(GridOption Model, DataTable dt, string mReportHeading, string mpageorient, string mpapersize)
        {
            // declaration
            Font font8 = FontFactory.GetFont("Tahoma", 8);
            Font font8bold = FontFactory.GetFont("Tahoma", 8, Font.BOLD);
            // 1 inch = 72pt : all sizes in iTextSharp are defined in Points
            // A4 paper size: 8.27 × 11.69 inches = 595.44 x 841.68 points
            // co-ordinate system in itextsharp is inversed i.e. 1,1 is the bottom left corner
            Document pdfDoc = new Document(PageSize.A4, 36, 18, 18, 18);  // left,right,top,bottom
            switch (mpapersize)
            {
                case "Letter":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.LETTER.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.LETTER); }
                    break;
                case "A1":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.A1.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.A1); }
                    break;
                case "A2":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.A2.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.A2); }
                    break;
                case "A3":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.A3.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.A3); }
                    break;
                case "A4":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.A4.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.A4); }
                    break;
                case "A5":
                    if (mpageorient == "Landscape")
                    { pdfDoc.SetPageSize(PageSize.A5.Rotate()); }
                    else { pdfDoc.SetPageSize(PageSize.A5); }
                    break;
            }
            //var logo = iTextSharp.text.Image.GetInstance(Server.MapPath("~/Content/images/LogoSuchan.jpg"));

            var logo = iTextSharp.text.Image.GetInstance(Server.MapPath("~/Content/images/LogoIco.jpg"));
            logo.SetAbsolutePosition(0, 0);
            logo.ScaleAbsoluteHeight(30);
            logo.ScaleAbsoluteWidth(30);
            string mbranchname = System.Web.HttpContext.Current.Session["CompName"].ToString() + "  " + System.Web.HttpContext.Current.Session["BranchName"].ToString();

            //if (Model.mWhat == "PDL")
            //    pdfDoc.SetPageSize(iTextSharp.text.PageSize.A4.Rotate());

            MemoryStream pdfStream = new MemoryStream();
            PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

            if (Model.ViewDataId == "TruckExpensesDueReports ")
            {
                mReportHeading += "    As On :" + Model.ToDate;
            }

            pdfDoc.AddAuthor("Shruham Software , T.LAT ERPiX3");
            pdfDoc.AddTitle(mbranchname + " : " + Model.ViewDataId);
            pdfDoc.AddCreationDate();
            pdfDoc.AddCreator(mbranchname + " : " + muserid);
            pdfDoc.AddKeywords("T.FAT, Suchan, ERP");
            pdfDoc.AddSubject(mReportHeading);

            //pdfWriter.PageEvent = new Common.ITextEvents();
            pdfDoc.Open();//Open Document to write

            pdfDoc.NewPage();
            //logo.ScaleAbsoluteWidth();
            //pdfDoc.Add(logo);
            // company name and address and logo
            float[] headerH = { 5, 95 };
            PdfPTable PdfTableH = new PdfPTable(headerH)
            {
                WidthPercentage = 100,
                HeaderRows = 0
            };
            PdfTableH.AddCell(new PdfPCell(logo, false) { Rowspan = 3, Border = 0, PaddingTop = 0, PaddingBottom = 0, HorizontalAlignment = Element.ALIGN_CENTER });
            string mstr = "";
            mstr = mbranchname;// ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "";
            PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD)))) { Colspan = 1, Border = 0, PaddingTop = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });
            mstr = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Addrl1 + ", " + x.Addrl2 + ", " + x.Addrl3 + ", " + x.City + "-" + x.aPin + ", " + x.State).FirstOrDefault() ?? "";
            PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });

            if (mReportHeading != "")
            {
                PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mReportHeading, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });
            }

            //PdfTableH.SpacingBefore = 5f; // Give some space after the text or it may overlap the table
            pdfDoc.Add(PdfTableH); // add pdf table to the document
                                   // actual data grid
            PdfPTable PdfTable = new PdfPTable(dt.Columns.Count);
            var mWidths = (from xx in ctxTFAT.TfatSearch
                           where xx.Code == Model.ViewDataId && xx.CalculatedCol != true
                           orderby xx.Sno
                           select new { xx.ColHead, ColWidth = (float)(xx.IsHidden == true ? 0 : xx.ColWidth) }).ToList();

            float[] headerx = mWidths.Select(x => x.ColWidth).ToArray();
            PdfTable.SetWidths(headerx); //Set the pdf headers  
            PdfTable.WidthPercentage = 100;
            PdfTable.HeaderRows = 1;
            int mstylecol = -1;
            string mHead;
            DateTime mDate = Convert.ToDateTime(Model.ToDate);
            PdfPCell PdfPCellx = null;
            for (int column = 0; column < dt.Columns.Count; column++)
            {
                if (dt.Columns[column].Caption.ToLower() == "_style")
                {
                    mstylecol = column;
                }

                mHead = mWidths[column].ColHead.Trim().Replace("##", "");
                if (mHead == "") mHead = dt.Columns[column].Caption;
                if (mHead.Contains("%"))
                {
                    mHead = ProcessReportHeader(mHead, mDate);
                }

                PdfPCellx = new PdfPCell(new Phrase(new Chunk(mHead, font8bold)))
                {
                    BackgroundColor = BaseColor.LIGHT_GRAY,
                    VerticalAlignment = Element.ALIGN_MIDDLE,
                    HorizontalAlignment = Element.ALIGN_CENTER,
                    PaddingBottom = 5
                };
                PdfTable.AddCell(PdfPCellx);
            }

            string mtype = "";
            string mstylevalue = "";
            //add the data from datatable to pdf table
            for (int rows = 0; rows < dt.Rows.Count; rows++)
            {
                if (mstylecol != -1)
                {
                    mstylevalue = dt.Rows[rows][mstylecol].ToString();
                }

                for (int column = 0; column < dt.Columns.Count; column++)
                {
                    PdfPCellx = new PdfPCell(new Phrase(new Chunk(dt.Rows[rows][column].ToString(), mstylevalue == "" ? font8 : font8bold)));
                    mtype = dt.Columns[column].DataType.ToString();
                    if (mtype == "System.Decimal" || mtype == "System.Double" || mtype == "System.Int64" || mtype == "System.Int32" || mtype == "System.Byte")
                    {
                        PdfPCellx.HorizontalAlignment = Element.ALIGN_RIGHT;
                    }
                    else if (mtype == " DateTime")
                    {
                        PdfPCellx.HorizontalAlignment = Element.ALIGN_CENTER;
                    }
                    PdfPCellx.VerticalAlignment = Element.ALIGN_MIDDLE;
                    PdfPCellx.PaddingBottom = 5;
                    PdfTable.AddCell(PdfPCellx);
                }
            }

            PdfTable.SpacingBefore = 15f; // Give some space after the text or it may overlap the table            
            pdfDoc.Add(PdfTable); // add pdf table to the document
            pdfDoc.Close();
            pdfWriter.Close();

            Response.ClearContent();
            Response.ClearHeaders();

            Response.ContentType = "application/pdf";
            string mfilename = Model.ViewDataId + ".pdf";
            //Response.AppendHeader("Content-Disposition", "attachment; filename=" + mfilename);
            Response.AppendHeader("Content-Disposition", "inline; filename=" + mfilename);
            Response.BinaryWrite(pdfStream.ToArray());
            Response.End();
        }

        public ReportViewer CreateSSRSReport(GridOption Model, string mReportType, string[] mparameters, string mpageorient = "Landscape", string mParaString = "", decimal mopening = -1)
        {
            string mPrintFormat = (ctxTFAT.ReportHeader.Where(z => z.Code == Model.ViewDataId).Select(x => x.PrintFormat).FirstOrDefault() ?? "").Trim();
            if (mPrintFormat == "")
            {
                mPrintFormat = Model.ViewDataId.Replace("/", "").Replace("\\", "").Replace(" ", "");
            }
            else
            {
                Model.ViewDataId = mPrintFormat;
            }
            //mPrintFormat= mPrintFormat.Replace("/","").Replace("\\","").Replace(" ","");
            if (FileExists("/Reports/REP_" + mPrintFormat + "_" + (mpageorient == "Landscape" ? "L" : "P") + ".rdlc") == false)
            {
                mPrintFormat = "NoReportDefined";
                Model.ViewDataId = "NoReportDefined";
                mpageorient = "Landscape";
            }

            ReportViewer rv = new Microsoft.Reporting.WebForms.ReportViewer
            {
                ProcessingMode = ProcessingMode.Local,
                SizeToReportContent = true,
                ZoomMode = ZoomMode.PageWidth,
                ShowToolBar = true,
                AsyncRendering = true,
                BorderStyle = System.Web.UI.WebControls.BorderStyle.Solid,
                ShowFindControls = true,
                ShowZoomControl = true,
                ShowPrintButton = true
            };
            rv.Reset();

            // get query from reportheader/tfatsearch
            string connstring = GetConnectionString();
            string mFixedPara = "";
            if (Model.Para != null)
            {
                mFixedPara = Model.Para.ToString();
            }
            if (mFixedPara != "")
            {
                mFixedPara += "~";
            }
            mParaString = mFixedPara + mParaString;

            string mWhat = Model.mWhat ?? "";
            int startIndex = mWhat == "" ? (Model.page - 1) * Model.rows + 1 : -1;
            int endIndex = mWhat == "" ? (Model.page * Model.rows) : -1;

            string mFilter = "";
            if (Model.searchField != "" && Model.searchField != null && Model.searchField != "null" && Model.searchString != null && Model.searchString != "")
            {
                switch (Model.searchOper)
                {
                    case "eq":
                        mFilter = Model.searchField + " = '" + Model.searchString + "'";
                        break;
                    case "ne":
                        mFilter = Model.searchField + " <> " + Model.searchString;
                        break;
                    case "bw":
                        mFilter = Model.searchField + " like '" + Model.searchString + "%'";
                        break;
                    case "bn":
                        mFilter = Model.searchField + " Not like '" + Model.searchString + "%'";
                        break;
                    case "ew":
                        mFilter = Model.searchField + " like '%" + Model.searchString + "'";
                        break;
                    case "en":
                        mFilter = Model.searchField + " Not like '%" + Model.searchString + "'";
                        break;
                    case "cn":
                        mFilter = Model.searchField + " like '%" + Model.searchString + "%'";
                        break;
                    case "in":
                        mFilter = Model.searchField + " like '%" + Model.searchString + "%'";
                        break;
                    case "nc":
                        mFilter = Model.searchField + " Not like '%" + Model.searchString + "%'";
                        break;
                    case "ni":
                        mFilter = Model.searchField + " Not like '%" + Model.searchString + "%'";
                        break;
                }
            }

            SqlConnection con = new SqlConnection(connstring);
            SqlCommand cmd = new SqlCommand();
            cmd = new SqlCommand("dbo.SPTFAT_ExecuteSSRSReport", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 120;
            cmd.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = Model.ViewDataId;
            cmd.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
            cmd.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
            cmd.Parameters.Add("@mAlias", SqlDbType.VarChar).Value = (Model.searchtype ?? "").StartsWith("^S") ? "^" + Model.searchField : ""; // since currently not used, we use it for summarised report flag
            string mstrx = (Model.searchtype ?? "").StartsWith("^S") ? Model.searchField : (Model.sidx != null ? (Model.sidx + ' ' + (Model.sidx.Contains("asc") || Model.sidx.Contains("desc") ? "" : Model.sord)) : "");
            mstrx = CutRightString(mstrx.Trim(), 1, ",");
            cmd.Parameters.Add("@mOrderBy", SqlDbType.VarChar).Value = mstrx;// Model.sidx != null ? (Model.sidx + ' ' + (Model.sidx.Contains("asc") || Model.sidx.Contains("desc") ? "" : Model.sord)) : "";
            if (mReportType == "M")
            {
                cmd.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = "2018-01-01";
                cmd.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = "2019-01-01";
            }
            else
            {
                if (Model.Date != null)
                {
                    Model.Date = Model.Date.Replace("undefined", "01-01-2000");
                    var date = Model.Date.Replace("-", "/").Split(':');
                    Model.FromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                    Model.ToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                }
                else
                {
                    Model.FromDate = (Convert.ToDateTime(Model.FromDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                    Model.ToDate = (Convert.ToDateTime(Model.ToDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                }
                cmd.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = Model.FromDate;
                cmd.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = Model.ToDate;
            }
            cmd.Parameters.Add("@mPara", SqlDbType.VarChar).Value = mParaString;
            cmd.Parameters.Add("@mFilter", SqlDbType.VarChar).Value = mFilter;
            cmd.Parameters.Add("@mDocString", SqlDbType.VarChar).Value = mDocString;
            cmd.CommandTimeout = 0;
            con.Open();
            SqlDataAdapter da = new SqlDataAdapter();
            da.SelectCommand = cmd;
            //
            string mreportheading = "";
            Model.AccountDescription = ctxTFAT.ReportHeader.Where(z => z.Code == Model.ViewDataId).Select(x => x.FormatHead).FirstOrDefault() ?? "";
            if (Model.AccountDescription != "")
            {
                Model.AccountDescription = Model.AccountDescription.Replace("%RepStartDate", Model.FromDate);
                Model.AccountDescription = Model.AccountDescription.Replace("%RepEndDate", Model.ToDate);
                for (int xx = 0; xx <= 23; xx++)
                {
                    string mfld = "%para" + (xx + 1).ToString().PadLeft(2, '0');
                    if (Model.AccountDescription.Contains(mfld))
                    {
                        Model.AccountDescription = Model.AccountDescription.Replace(mfld, mparameters[xx]);
                    }
                }
                mreportheading = Model.AccountDescription.Trim();
            }
            DataTable dt = new DataTable();
            da.Fill(dt);
            cmd.Dispose();
            da.Dispose();
            con.Close();
            con.Dispose();

            if (mopening != -1)
            {
                int mbalcol = -1;
                int mruncol = -1;
                int i;
                for (i = 0; i < dt.Columns.Count; i++)
                {
                    string mcolname = dt.Columns[i].ColumnName.Trim().ToLower();
                    if (mcolname == "balancefield")
                    {
                        mbalcol = i;
                    }
                    if (mcolname == "runningbalance" || mcolname == "balance")
                    {
                        mruncol = i;
                    }
                }
                if (mbalcol != -1 && mruncol != -1)
                {
                    decimal mbal = mopening;
                    foreach (DataRow dr in dt.Rows)
                    {
                        mbal = mbal + (decimal)dr[mbalcol];
                        dr[mruncol] = mbal;
                    }
                }
            }

            rv.LocalReport.ReportPath = Server.MapPath("/Reports/REP_" + mPrintFormat + "_" + (mpageorient == "Landscape" ? "L" : "P") + ".rdlc");
            ReportDataSource rds = new ReportDataSource("DataSet1", dt); // DataSet1 is defined in .rdlc, 

            DataTable dt2 = GetDataTable(@"Select Code,Name,Addrl1,Addrl2,Addrl3,Addrl4,City,Tel1,Tel2,Tel3,Tel4,TINNumber,VATReg,www,State,aPin,Email,CINNo,GSTNo,PanNo,Country from TfatBranch Where Code='" + mbranchcode + "'");
            ReportDataSource rds2 = new ReportDataSource("DataSet2", dt2); // DataSet2 is defined in .rdlc, 
            List<ReportParameter> reportParams = new List<ReportParameter>
            {
                new ReportParameter("muserid", muserid),
                new ReportParameter("mreportheading", mreportheading)
            };
            rv.LocalReport.SetParameters(reportParams);
            rv.LocalReport.DataSources.Clear();
            rv.LocalReport.DataSources.Add(rds);
            rv.LocalReport.DataSources.Add(rds2);
            rv.LocalReport.Refresh();
            rv.ShowZoomControl = true;
            rv.ShowPrintButton = true;
            return rv;
        }

        [HttpPost]
        public ActionResult GetSubGridStructure(GridOption Model)
        {
            string msubgrid = "";
            msubgrid = ctxTFAT.ReportHeader.Where(x => x.Code == Model.ViewDataId).Select(z => z.DrillQuery.Trim()).FirstOrDefault() ?? "";
            if (msubgrid == "")
            {
                return Json(new { Status = "Error", Message = "Sub-Grid format not found.." }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                if (msubgrid.Contains("~")) // name of the column to take else Document column e.g.SubGrid-OrdersExecuted~TableKey
                {
                    msubgrid = msubgrid.Substring(0, msubgrid.LastIndexOf("~"));
                }
                //////ITransactionGridOperation mIlst = new TransactionGridOperation();
                return GetGridDataColumns(msubgrid, "X", "", Model.mVar1, Model.mVar2, Model.mVar3, Model.mVar4, Model.mVar5);
            }
        }

        [HttpPost]
        public ActionResult GetGridStructureSummary(GridOption Model)
        {
            return GetGridDataColumns(Model.ViewDataId, "X", "S", Model.mVar1, Model.mVar2, Model.mVar3, Model.mVar4, Model.mVar5);
        }

        [HttpPost]
        public ActionResult GetGridDataSummary(GridOption Model)
        {
            if (Model.searchField == "") return null;
            if (Model.Date != null)
            {
                var date = Model.Date.Replace("-", "/").Split(':');
                Model.FromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                Model.ToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            }
            return GetGridReport(Model, "R", "", false, 0);
        }

        [HttpPost]
        public ActionResult GetSubGridData(GridOption Model)
        {
            try
            {
                if (Model.Document == null) return null;
                if (Model.Document == "false") return null;
                string msubgrid = "";
                msubgrid = ctxTFAT.ReportHeader.Where(x => x.Code == Model.ViewDataId).Select(z => z.DrillQuery.Trim()).FirstOrDefault() ?? "";
                if (msubgrid.Trim() == "")
                {
                    return Json(new { Status = "Error", Message = "Sub-Grid format not found.." }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    if (msubgrid.Contains("~")) // name of the column to take else Document column e.g.SubGrid-OrdersExecuted~TableKey
                    {
                        msubgrid = msubgrid.Substring(0, msubgrid.LastIndexOf("~"));
                    }
                    if (Model.Date != null)
                    {
                        var date = Model.Date.Replace("-", "/").Split(':');
                        Model.FromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                        Model.ToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
                    }
                    Model.ViewDataId = msubgrid.Trim();
                    //Model.Document = Model.Document.Substring(6);
                    return GetGridReport(Model, "R", "Document^" + Model.Document + "~Code^" + Model.Document, false, 0);
                }
            }
            catch
            {
                return null;
            }
        }

        public bool FileExists(string mfile)
        {
            //"~/Reports/" + Model.Format + ".rpt"
            var absolutePath = HttpContext.Server.MapPath(mfile);
            return System.IO.File.Exists(absolutePath);
        }

        public ActionResult ExportSSRSReport(ReportViewer rv, string mfilename, string mfiletype, bool mSendEmail, string mCode, string memaildata = "")
        {
            if (rv == null)
            {
                return null;
            }

            //mfiletype= "PDF" , "Excel", "Word"
            if (mfiletype == "")
            {
                mfiletype = "Pdf";
            }

            byte[] bytes = rv.LocalReport.Render((mfiletype == "Excel" ? "Excel" : mfiletype == "Word" ? "Word" : "Pdf"), null);//, out string mimeType, out string encoding, out string filenameExtension, out string[] streamids, out Warning[] warnings
            //string mpath = AppDomain.CurrentDomain.BaseDirectory + "Downloads/";
            //mfilename = mpath + mfilename;
            //using (var fs = new System.IO.FileStream(mfilename, System.IO.FileMode.Create))
            //{
            //    fs.Write(bytes, 0, bytes.Length);
            //    fs.Close();
            //}
            if (mSendEmail == true)
            {
                using (MemoryStream mstream = new MemoryStream(bytes))
                {
                    SendReportEMail(mstream, "", "", mCode, mfilename, mfiletype, memaildata);
                }
            }
            else
            {
                Response.ClearContent();
                Response.ClearHeaders();
                //vnd.ms-excel,ms-word
                Response.ContentType = "application/" + (mfiletype == "Excel" ? "vnd.ms-excel" : mfiletype == "Word" ? "ms-word" : "Pdf").ToLower();
                mfilename = mfilename + "." + (mfiletype == "Excel" ? "xls" : mfiletype == "Word" ? "doc" : "Pdf").ToLower();
                Response.AppendHeader("Content-Disposition", "inline; filename=" + mfilename);
                Response.BinaryWrite(bytes);
                Response.End();
            }
            return null;
            //return mfilename;
        }

        //public void CreatePDFNew(GridOption Model, DataTable dt, string mReportHeading)
        //{
        //    // declaration
        //    Font font8 = FontFactory.GetFont("Tahoma", 8);
        //    Font font8bold = FontFactory.GetFont("Tahoma", 8, Font.BOLD);
        //    // 1 inch = 72pt : all sizes in iTextSharp are defined in Points
        //    // A4 paper size: 8.27 × 11.69 inches = 595.44 x 841.68 points
        //    // co-ordinate system in itextsharp is inversed i.e. 1,1 is the bottom left corner
        //    Document pdfDoc = new Document(PageSize.A4, 36, 18, 18, 18);  // left,right,top,bottom

        //    var logo = iTextSharp.text.Image.GetInstance(Server.MapPath("~/Content/images/LogoSuchan.jpg"));
        //    logo.SetAbsolutePosition(0, 0);
        //    logo.ScaleAbsoluteHeight(30);
        //    logo.ScaleAbsoluteWidth(30);
        //    string mbranchname = System.Web.HttpContext.Current.Session["BranchName"].ToString();

        //    if (Model.mWhat == "PDL")
        //        pdfDoc.SetPageSize(iTextSharp.text.PageSize.A4.Rotate());

        //    MemoryStream pdfStream = new MemoryStream();
        //    PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

        //    pdfDoc.AddAuthor("Suchan Software Pvt. Ltd., T.FAT ERPiX9");
        //    pdfDoc.AddTitle(mbranchname + " : " + Model.ViewDataId);
        //    pdfDoc.AddCreationDate();
        //    pdfDoc.AddCreator(mbranchname + " : " + muserid);
        //    pdfDoc.AddKeywords("T.FAT, Suchan, ERP");
        //    pdfDoc.AddSubject(mReportHeading);
        //    pdfDoc.Open();//Open Document to write

        //    pdfDoc.NewPage();

        //    PdfContentByte cb = pdfWriter.DirectContent;
        //    // Add a Header template to the document
        //    cb.AddTemplate(PDFHeader(cb), 30, 1);
        //    // Add a footer template to the document
        //    cb.AddTemplate(PDFFooter(cb), 30, 1);
        //    //logo.ScaleAbsoluteWidth();
        //    //pdfDoc.Add(logo);

        //    // company name and address and logo
        //    float[] headerH = { 5, 95 };
        //    PdfPTable PdfTableH = new PdfPTable(headerH);
        //    PdfTableH.WidthPercentage = 100;
        //    PdfTableH.HeaderRows = 0;
        //    PdfTableH.AddCell(new PdfPCell(logo, false) { Rowspan = 3, Border = 0, PaddingTop = 0, PaddingBottom = 0, HorizontalAlignment = Element.ALIGN_CENTER });
        //    string mstr = "";
        //    mstr = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "";
        //    PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD)))) { Colspan = 1, Border = 0, PaddingTop = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });
        //    mstr = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Addrl1 + ", " + x.Addrl2 + ", " + x.Addrl3 + ", " + x.City + "-" + x.aPin + ", " + x.State).FirstOrDefault() ?? "";
        //    PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });

        //    if (mReportHeading != "")
        //        PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mReportHeading, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });

        //    //PdfTableH.SpacingBefore = 5f; // Give some space after the text or it may overlap the table
        //    pdfDoc.Add(PdfTableH); // add pdf table to the document
        //    // actual data grid
        //    PdfPTable PdfTable = new PdfPTable(dt.Columns.Count);
        //    var mWidths = (from xx in ctxTFAT.TfatSearch
        //                   where xx.Code == Model.ViewDataId && xx.CalculatedCol != true
        //                   orderby xx.Sno
        //                   select new { ColWidth = (float)(xx.IsHidden == true ? 0 : xx.ColWidth) }).ToList();

        //    float[] headerx = mWidths.Select(x => x.ColWidth).ToArray();
        //    PdfTable.SetWidths(headerx); //Set the pdf headers  
        //    PdfTable.WidthPercentage = 100;
        //    PdfTable.HeaderRows = 1;
        //    int mstylecol = -1;
        //    PdfPCell PdfPCellx = null;
        //    for (int column = 0; column < dt.Columns.Count; column++)
        //    {
        //        if (dt.Columns[column].Caption.ToLower() == "_style") mstylecol = column;
        //        PdfPCellx = new PdfPCell(new Phrase(new Chunk(dt.Columns[column].Caption, font8bold)));
        //        PdfPCellx.BackgroundColor = BaseColor.LIGHT_GRAY;
        //        PdfPCellx.VerticalAlignment = Element.ALIGN_MIDDLE;
        //        PdfPCellx.HorizontalAlignment = Element.ALIGN_CENTER;
        //        PdfPCellx.PaddingBottom = 5;
        //        PdfTable.AddCell(PdfPCellx);
        //    }

        //    string mtype = "";
        //    string mstylevalue = "";
        //    //add the data from datatable to pdf table
        //    for (int rows = 0; rows < dt.Rows.Count; rows++)
        //    {
        //        if (mstylecol != -1) mstylevalue = dt.Rows[rows][mstylecol].ToString();

        //        for (int column = 0; column < dt.Columns.Count; column++)
        //        {
        //            PdfPCellx = new PdfPCell(new Phrase(new Chunk(dt.Rows[rows][column].ToString(), mstylevalue == "" ? font8 : font8bold)));
        //            mtype = dt.Columns[column].DataType.ToString();
        //            if (mtype == "System.Decimal" || mtype == "System.Double" || mtype == "System.Int64" || mtype == "System.Int32" || mtype == "System.Byte")
        //            {
        //                PdfPCellx.HorizontalAlignment = Element.ALIGN_RIGHT;
        //            }
        //            else if (mtype == " DateTime")
        //            {
        //                PdfPCellx.HorizontalAlignment = Element.ALIGN_CENTER;
        //            }
        //            PdfPCellx.VerticalAlignment = Element.ALIGN_MIDDLE;
        //            PdfPCellx.PaddingBottom = 5;
        //            PdfTable.AddCell(PdfPCellx);
        //        }
        //    }

        //    PdfTable.SpacingBefore = 15f; // Give some space after the text or it may overlap the table            
        //    pdfDoc.Add(PdfTable); // add pdf table to the document
        //    pdfDoc.Close();
        //    pdfWriter.Close();

        //    Response.ClearContent();
        //    Response.ClearHeaders();

        //    Response.ContentType = "application/pdf";
        //    string mfilename = Model.ViewDataId + ".pdf";
        //    Response.AppendHeader("Content-Disposition", "attachment; filename=" + mfilename);
        //    Response.BinaryWrite(pdfStream.ToArray());
        //    Response.End();
        //}

        //private PdfTemplate PDFHeader(PdfContentByte cb)
        //{
        //    // Create the template and assign height
        //    PdfTemplate tmpheader = cb.CreateTemplate(580, 72); // width, height in points
        //    // co-ordinate system in itextsharp is inversed i.e. 1,1 is the bottom left corner & 1,841 is the top left corner
        //    tmpheader.MoveTo(1, 841);           // Move to the top left corner of the template
        //    tmpheader.Stroke();                 // Place the header content
        //    // company name and address and logo
        //    float[] headerH = { 5, 95 };
        //    PdfPTable PdfTableH = new PdfPTable(headerH);
        //    PdfTableH.WidthPercentage = 100;
        //    PdfTableH.HeaderRows = 0;
        //    PdfTableH.AddCell(new PdfPCell(logo, false) { Rowspan = 3, Border = 0, PaddingTop = 0, PaddingBottom = 0, HorizontalAlignment = Element.ALIGN_CENTER });
        //    string mstr = "";
        //    mstr = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "";
        //    PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD)))) { Colspan = 1, Border = 0, PaddingTop = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });
        //    mstr = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Addrl1 + ", " + x.Addrl2 + ", " + x.Addrl3 + ", " + x.City + "-" + x.aPin + ", " + x.State).FirstOrDefault() ?? "";
        //    PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mstr, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });

        //    if (mReportHeading != "")
        //        PdfTableH.AddCell(new PdfPCell(new Phrase(new Chunk(mReportHeading, font8))) { Colspan = 1, Border = 0, PaddingLeft = 10, HorizontalAlignment = Element.ALIGN_LEFT });
        //    tmpheader.Add(PdfTableH);
        //    // create a line above the page footer
        //    //cb.SetLineWidth(0f);
        //    //cb.MoveTo(30, 60);
        //    //cb.LineTo(570, 60);
        //    //cb.Stroke();
        //    // Return the footer template
        //    return tmpheader;
        //}

        //private PdfTemplate PDFFooter(PdfContentByte cb)
        //{
        //    // Create the template and assign height
        //    PdfTemplate tmpfooter = cb.CreateTemplate(580, 36); // width, height in points
        //    // co-ordinate system in itextsharp is inversed i.e. 1,1 is the bottom left corner
        //    tmpfooter.MoveTo(1, 1);             // Move to the bottom left corner of the template
        //    tmpfooter.Stroke();                 // Place the footer content
        //    tmpfooter.BeginText();              // Begin writing the footer
        //    //tmpFooter.SetFontAndSize(f_cn, 8);  // Set the font and size
        //    // Write out details from the payee table
        //    tmpfooter.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "created using T.FAT ERPiX9", 1, 1, 0);
        //    tmpfooter.EndText();
        //    // create a line above the page footer
        //    //cb.SetLineWidth(0f);
        //    //cb.MoveTo(30, 60);
        //    //cb.LineTo(570, 60);

        //    //cb.Stroke();
        //    // Return the footer template
        //    return tmpfooter;
        //}

        public string CutRightString(string mStr, int n = 1, string mChar = "")
        {
            string CutRightString = mStr;
            if (mChar != "" && n == 0)
            {
                n = mChar.Length;
            }

            if (mStr.Length >= n)
            {
                if (mChar == "")
                {
                    CutRightString = mStr.Substring(0, mStr.Length - n);
                }
                else
                {
                    int mLen = mChar.Length;
                    if (mStr.EndsWith(mChar))
                    {
                        CutRightString = mStr.Substring(0, mStr.Length - mLen);
                    }
                }
            }
            else
            {
                CutRightString = "";
            }
            return CutRightString;
        }

        public string MMDDYY(DateTime mDate)
        {
            return (Convert.ToDateTime(mDate)).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
        }

        public string MMDDYYTime(DateTime mDate)
        {
            return (Convert.ToDateTime(mDate)).ToString("dd-MMM-yyyy HH:mm:ss", CultureInfo.InvariantCulture);
        }

        public bool IsValidDate(string mDate)
        {
            bool mreturn = true;
            if (mDate == null || mDate == ":")
            {
                mreturn = false;
            }
            var date = mDate.Replace("-", "/").Split(':');
            if (date[0].Trim() == "" || date[1].Trim() == "")
            {
                mreturn = false;
            }
            return mreturn;
        }

        public ActionResult PrintDocumentSSRS(string Document)
        {
            ReportViewer reportViewer = new ReportViewer
            {
                ProcessingMode = ProcessingMode.Local,
                SizeToReportContent = true,
                ZoomMode = ZoomMode.PageWidth,
                ShowToolBar = true,
                AsyncRendering = true
            };
            reportViewer.Reset();

            string mSubType = "";
            string mSPSource = "";
            string mMainType = "";
            string mFormat = "";
            string mParentKey = Document.Substring(6, Document.Length - 6);
            var mDoc = ctxTFAT.DocTypes.Where(x => x.Code == mParentKey.Substring(0, 5)).Select(x => new
            {
                x.SubType,
                x.DataSource,
                x.MainType,
                x.Formats
            }).FirstOrDefault();

            if (mDoc != null)
            {
                mSubType = mDoc.SubType;
                mSPSource = mDoc.DataSource;
                mMainType = mDoc.MainType;
                mFormat = mDoc.Formats;
            }
            if (mFormat == "")
            {
                mFormat = "NoFormatDefined";
            }

            if (FileExists("/Reports/" + mFormat + ".rdlc") == false)
            {
                mFormat = "Rep_NoReportDefined_L";
            }

            DataTable dtreport = new DataTable();
            //SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
            SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SPDoc_" + mSPSource, tfat_conx); //name of the storedprocedure
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 120;
            cmd.Parameters.AddWithValue("@mTableKey", mParentKey);
            //cmd.Parameters.AddWithValue("@mSubType", mSubType);
            SqlDataAdapter adp = new SqlDataAdapter(cmd);
            adp.Fill(dtreport);

            //string mFormat = ctxTFAT.DocTypes.Where(x => x.Code == mParentKey.Substring(0, 5)).Select(x => x.Formats).FirstOrDefault().Trim();
            //if (mFormat == "")
            //{
            //    mFormat = "NoFormatDefined";
            //}
            reportViewer.LocalReport.ReportPath = Server.MapPath("/Reports/" + mFormat + ".rdlc");
            reportViewer.LocalReport.DataSources.Clear();
            reportViewer.Visible = true;

            string mDataSource = "";
            // purchase types
            if (mSubType == "EP")
            {
                mDataSource = "DS_PurchaseEnquiry";
            }
            else if (mSubType == "QP")
            {
                mDataSource = "DS_PurchaseQuotes";
            }
            else if (mSubType == "OP")
            {
                mDataSource = "DS_PurchaseOrders";
            }
            else if (mSubType == "IP")
            {
                mDataSource = "DS_PurchaseIndents";
            }
            else if (mSubType == "CP")
            {
                mDataSource = "DS_CashPurchase";
            }
            else if (mSubType == "IC")
            {
                mDataSource = "DS_GoodsInward";
            }
            else if (mSubType == "IM")
            {
                mDataSource = "DS_ImportPurchase";
            }
            else if (mSubType == "NP")
            {
                mDataSource = "DS_PurchaseReturns";
            }
            else if (mSubType == "PX")
            {
                mDataSource = "DS_PurchaseReturnChallan";
            }
            else if (mSubType == "RP")
            {
                mDataSource = "DS_CreditPurchase";
            }
            // Sales types
            else if (mSubType == "ES")
            {
                mDataSource = "DS_SalesEnquiry";
            }
            else if (mSubType == "QS")
            {
                mDataSource = "DS_SalesQuotes";
            }
            else if (mSubType == "OS")
            {
                mDataSource = "DS_SalesOrders";
            }
            else if (mSubType == "PI")
            {
                mDataSource = "DS_ProformaInvoice";
            }
            else if (mSubType == "OC")
            {
                mDataSource = "DS_GoodsDeliveryNote";
            }
            else if (mSubType == "GO")
            {
                mDataSource = "DS_GoodsDelivery";
            }
            else if (mSubType == "RS")
            {
                mDataSource = "DS_CreditSales";
            }
            else if (mSubType == "CS")
            {
                mDataSource = "DS_CashSales";
            }
            else if (mSubType == "US")
            {
                mDataSource = "DS_CounterSales";
            }
            else if (mSubType == "XS")
            {
                mDataSource = "DS_ExportInvoice";
            }
            else if (mSubType == "NS")
            {
                mDataSource = "DS_SalesReturn";
            }
            else if (mSubType == "SX")
            {
                mDataSource = "DS_SalesReturnChallan";
            }
            // sales end here -- cash bank
            else if (mMainType == "JV")
            {
                mDataSource = "DS_CashBankJV";
            }
            else if (mMainType == "MV")
            {
                mDataSource = "DS_CashBankMV";
            }
            else if (mMainType == "PV")
            {
                mDataSource = "DS_CashBankPV";
            }
            else if (mMainType == "RC")
            {
                mDataSource = "DS_CashBankRC";
            }
            else if (mMainType == "PM")
            {
                mDataSource = "DS_CashBankPM";
            }
            // cash bank ends and inventory types
            else if (mSubType == "FS")
            {
                mDataSource = "DS_SubContReceived";
            }
            else if (mSubType == "IS")
            {
                mDataSource = "DS_SubContIssued";
            }
            else if (mSubType == "GT" || mSubType == "GI")
            {
                mDataSource = "DS_GoodsTransfer";
            }
            else if (mSubType == "IA")
            {
                mDataSource = "DS_InventoryAdj";
            }
            else if (mSubType == "MB")
            {
                mDataSource = "DS_MfgByBOM";
            }
            else if (mSubType == "MP")
            {
                mDataSource = "DS_DirectMfg";
            }
            else if (mSubType == "WO")
            {
                mDataSource = "DS_WorkOrders";
            }
            else if (mSubType == "PN")
            {
                mDataSource = "DS_PhysicalStock";
            }
            else if (mSubType == "PP")
            {
                mDataSource = "DS_ProductionPlan";
            }
            else if (mSubType == "PS")
            {
                mDataSource = "DS_PSP";
            }
            else if (mSubType == "PY")
            {
                mDataSource = "DS_MaterialPutAway";
            }
            else if (mSubType == "PL")
            {
                mDataSource = "DS_MaterialPickList";
            }
            reportViewer.LocalReport.DataSources.Add(new ReportDataSource(mDataSource, dtreport));
            reportViewer.LocalReport.Refresh();
            ViewBag.ReportViewer = reportViewer;
            reportViewer.Dispose();
            return View();
        }

        public ActionResult PrintDocumentCrystal(string Document, string mWhat, bool SendEmail)
        {
            if (mWhat == "")
            {
                mWhat = "PDF";
            }
            string mSubType = "";
            string mSPSource = "";
            string mMainType = "";
            string mFormatString = "";
            string mParentKey = Document.Substring(6, Document.Length - 6);
            var mDoc = ctxTFAT.DocTypes.Where(x => x.Code == mParentKey.Substring(0, 5)).Select(x => new
            {
                x.SubType,
                x.DataSource,
                x.MainType,
                x.Formats
            }).FirstOrDefault();

            if (mDoc != null)
            {
                mSubType = mDoc.SubType;
                mSPSource = mDoc.DataSource;
                mMainType = mDoc.MainType;
                mFormatString = mDoc.Formats.Trim();
            }
            if (mFormatString == "")
            {
                mFormatString = "NoFormatDefined";
            }

            if (FileExists("~/Reports/" + mFormatString + ".rpt") == false)
            {
                mFormatString = "Rep_NoReportDefined";
            }

            DataTable dtreport = new DataTable();
            SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SPDoc_" + mSPSource, tfat_conx); //name of the storedprocedure
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 120;
            cmd.Parameters.AddWithValue("@mTableKey", mParentKey);
            SqlDataAdapter adp = new SqlDataAdapter(cmd);
            adp.Fill(dtreport);

            //// format1,format2
            //String[] mformats = mFormatString.Split(',');
            //foreach (var mForm in mformats)
            //{
            ReportDocument rd = new ReportDocument();
            //rd.Load(Path.Combine(Server.MapPath("~/Reports"), mForm.Trim() + ".rpt"));
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), mFormatString + ".rpt"));
            rd.SetDataSource(dtreport);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                Stream mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                mstream.Seek(0, SeekOrigin.Begin);
                if (SendEmail == false)
                {
                    return File(mstream, "application/" + mWhat);
                }
                else
                {
                    return SendReportEMail(mstream, mSubType, mParentKey, "", mFormatString + ".pdf", "pdf");
                }
            }
            catch
            {
                rd.Close();
                rd.Dispose();
                throw;
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
        }

        public ActionResult PrintReportsCrystal(GridOption Model, string mFormat, string mSPSource, string mWhat, bool SendEmail, string mpara, string mpageorient, string mpapersize, string memaildata = "")
        {            //return PrintReportsCrystal(Model, "REP_" + Model.ViewDataId, "SPREP_" + Model.ViewDataId, "PDF", false, "Code^" + Model.SelectContent + (mpara != "" ? "~" + mpara : ""), mpageorient, mpapersize, memaildata);

            if (FileExists("/Reports/" + mFormat + ".rpt") == false)
            {
                mFormat = "Rep_NoReportDefined";
            }

            if (mWhat == "" || mWhat == "CRPDF")
            {
                mWhat = "PDF";
            }
            //Model.Date = Model.Date.Replace("undefined", "01-01-2000");
            //var date = Model.Date.Replace("-", "/").Split(':');
            //Model.FromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            //Model.ToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            ReportDocument rd = new ReportDocument();
            try
            {

                DataTable dtreport = new DataTable();
                SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
                SqlCommand cmd = new SqlCommand(mSPSource, tfat_conx); // name of the storedprocedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 120;
                cmd.Parameters.AddWithValue("@mDate1", Model.FromDate == null ? "" : Model.FromDate);
                cmd.Parameters.AddWithValue("@mDate2", Model.ToDate == null ? "" : Model.ToDate);
                cmd.Parameters.AddWithValue("@mCode", Model.Code ?? "");
                cmd.Parameters.AddWithValue("@mBranch", mbranchcode);
                cmd.Parameters.AddWithValue("@mLocationCode", Model.LocationCode);
                if (mSPSource == "SPREP_DynamicSummary" || mSPSource == "SPREP_Payment Reminder Letter" || mSPSource == "SPREP_Payment Reminder Letter Register" || mSPSource == "SPREP_New Outstanding Report" || mSPSource == "SPREP_UnAdjust Report")
                {
                    cmd.Parameters.AddWithValue("@mCustomer", Model.Customer);
                }

                string ppara01 = "";
                string ppara02 = "";
                string ppara03 = "";
                string ppara04 = "";
                string ppara05 = "";
                string ppara06 = "";
                string ppara07 = "";
                string ppara08 = "";
                string ppara09 = "";
                string ppara10 = "";
                string ppara11 = "";
                string ppara12 = "";
                string ppara13 = "";
                string ppara14 = "";
                string ppara15 = "";
                string ppara16 = "";
                string ppara17 = "";
                string ppara18 = "";
                string ppara19 = "";
                string ppara20 = "";
                string ppara21 = "";
                string ppara22 = "";
                string ppara23 = "";
                string ppara24 = "";

                if (mpara != "")
                {
                    var mparam = mpara.Split('~');
                    for (int x = 0; x < mparam.Count(); x++)    //mparam.Count()
                    {
                        if (mparam[x] != "")
                        {
                            var mparam2 = mparam[x].Split('^');
                            switch (mparam2[0])
                            {
                                case "para01":
                                    ppara01 = mparam2[1];
                                    break;
                                case "para02":
                                    ppara02 = mparam2[1];
                                    break;
                                case "para03":
                                    ppara03 = mparam2[1];
                                    break;
                                case "para04":
                                    ppara04 = mparam2[1];
                                    break;
                                case "para05":
                                    ppara05 = mparam2[1];
                                    break;
                                case "para06":
                                    ppara06 = mparam2[1];
                                    break;
                                case "para07":
                                    ppara07 = mparam2[1];
                                    break;
                                case "para08":
                                    ppara08 = mparam2[1];
                                    break;
                                case "para09":
                                    ppara09 = mparam2[1];
                                    break;
                                case "para10":
                                    ppara10 = mparam2[1];
                                    break;
                                case "para11":
                                    ppara11 = mparam2[1];
                                    break;
                                case "para12":
                                    ppara12 = mparam2[1];
                                    break;
                                case "para13":
                                    ppara13 = mparam2[1];
                                    break;
                                case "para14":
                                    ppara14 = mparam2[1];
                                    break;
                                case "para15":
                                    ppara15 = mparam2[1];
                                    break;
                                case "para16":
                                    ppara16 = mparam2[1];
                                    break;
                                case "para17":
                                    ppara17 = mparam2[1];
                                    break;
                                case "para18":
                                    ppara18 = mparam2[1];
                                    break;
                                case "para19":
                                    ppara19 = mparam2[1];
                                    break;
                                case "para20":
                                    ppara20 = mparam2[1];
                                    break;
                                case "para21":
                                    ppara21 = mparam2[1];
                                    break;
                                case "para22":
                                    ppara22 = mparam2[1];
                                    break;
                                case "para23":
                                    ppara13 = mparam2[1];
                                    break;
                                case "para24":
                                    ppara24 = mparam2[1];
                                    break;
                            }
                            //cmd.Parameters.AddWithValue("@mPara" + x, mparam2[1]);
                        }
                    }
                }
                if (mSPSource == "SPREP_AcLedgerScreen")
                {
                    cmd.Parameters.AddWithValue("@mBranchS", "'" + ppara05.Replace("'", "").ToString() + "'");
                }
                if (mSPSource == "SPREP_New Outstanding Report")
                {
                    cmd.Parameters.AddWithValue("@mPara1", ppara01);
                    cmd.Parameters.AddWithValue("@mPara2", ppara09);
                    cmd.Parameters.AddWithValue("@mPara3", ppara10);
                    cmd.Parameters.AddWithValue("@mPara4", ppara11);
                    cmd.Parameters.AddWithValue("@mPara5", ppara12);
                    cmd.Parameters.AddWithValue("@mPara6", ppara13);
                    cmd.Parameters.AddWithValue("@mPara7", ppara14);
                    cmd.Parameters.AddWithValue("@mPara8", ppara08);
                    cmd.Parameters.AddWithValue("@mPara9", ppara09);
                    cmd.Parameters.AddWithValue("@mPara10", ppara10);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@mPara1", ppara01);
                    cmd.Parameters.AddWithValue("@mPara2", ppara02);
                    cmd.Parameters.AddWithValue("@mPara3", ppara03);
                    cmd.Parameters.AddWithValue("@mPara4", ppara04);
                    cmd.Parameters.AddWithValue("@mPara5", ppara05);
                    cmd.Parameters.AddWithValue("@mPara6", ppara06);
                    cmd.Parameters.AddWithValue("@mPara7", ppara07);
                    cmd.Parameters.AddWithValue("@mPara8", ppara08);
                    cmd.Parameters.AddWithValue("@mPara9", ppara09);
                    cmd.Parameters.AddWithValue("@mPara10", ppara10);
                }

                //cmd.Parameters.AddWithValue("@mPara11", ppara11);
                //cmd.Parameters.AddWithValue("@mPara12", ppara12);
                //cmd.Parameters.AddWithValue("@mPara13", ppara13);
                //cmd.Parameters.AddWithValue("@mPara14", ppara14);
                //cmd.Parameters.AddWithValue("@mPara15", ppara15);
                //cmd.Parameters.AddWithValue("@mPara16", ppara16);
                //cmd.Parameters.AddWithValue("@mPara17", ppara17);
                //cmd.Parameters.AddWithValue("@mPara18", ppara18);
                //cmd.Parameters.AddWithValue("@mPara19", ppara19);
                //cmd.Parameters.AddWithValue("@mPara20", ppara20);
                //cmd.Parameters.AddWithValue("@mPara21", ppara21);
                //cmd.Parameters.AddWithValue("@mPara22", ppara22);
                //cmd.Parameters.AddWithValue("@mPara23", ppara23);
                //cmd.Parameters.AddWithValue("@mPara24", ppara24);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtreport);


                rd.Load(Path.Combine(Server.MapPath("~/Reports"), mFormat + ".rpt"));
                rd.SetDataSource(dtreport);
                switch (mpapersize)
                {
                    case "Letter":
                        rd.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperLetter;
                        break;
                    case "A3":
                        rd.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA3;
                        break;
                    case "A4":
                        rd.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;
                        break;
                    case "A5":
                        rd.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA5;
                        break;
                }
                if (mpageorient == "Landscape")
                {
                    rd.PrintOptions.PaperOrientation = CrystalDecisions.Shared.PaperOrientation.Landscape;
                }
                else
                {
                    rd.PrintOptions.PaperOrientation = CrystalDecisions.Shared.PaperOrientation.Portrait;
                }

                // pass parameters
                try
                {
                    rd.SetParameterValue("@mDate1", Model.FromDate == null ? "" : Model.FromDate);
                    rd.SetParameterValue("@mDate2", Model.ToDate == null ? "" : Model.ToDate);
                    rd.SetParameterValue("@mBranch", mbranchcode);
                    rd.SetParameterValue("@mCode", Model.Code ?? "");
                }
                catch { }
                //
                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                Stream mstream = null;
                if (mWhat == "PDF")
                {
                    mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                }
                else if (mWhat == "Word")
                {
                    mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.WordForWindows);
                }
                else if (mWhat == "XLS")
                {
                    mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.Excel);
                }
                else if (mWhat == "HTML")
                {
                    mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.HTML40);
                }

                mstream.Seek(0, SeekOrigin.Begin);
                if (SendEmail == false)
                {
                    return File(mstream, "application/" + mWhat);
                }
                else
                {
                    return SendReportEMail(mstream, "", "", "", mFormat, mWhat, memaildata);
                }
            }
            catch
            {
                rd.Close();
                rd.Dispose();
                throw;
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
        }

        //// crystal report print direct to printer
        //private void PrintReport(string printerName)
        //{
        //    PageMargins margins;

        //    margins = reportDocument.PrintOptions.PageMargins;
        //    margins.bottomMargin = 350;
        //    margins.leftMargin = 350;
        //    margins.rightMargin = 350;
        //    margins.topMargin = 350;
        //    reportDocument.PrintOptions.ApplyPageMargins(margins);

        //    reportDocument.PrintOptions.PrinterName = printerName;
        //    reportDocument.PrintToPrinter(1, false, 0, 0);//PrintToPrinter(int nCopies , boolean collated , int startPage , int endPage );
        //}
        //// crystal report export to various media
        //private void ExportToDisk(string fileName)
        //{
        //    ExportOptions exportOpts = new ExportOptions();
        //    DiskFileDestinationOptions diskOpts =
        //       ExportOptions.CreateDiskFileDestinationOptions();

        //    exportOpts.ExportFormatType = ExportFormatType.RichText;
        //    exportOpts.ExportDestinationType =
        //       ExportDestinationType.DiskFile;

        //    diskOpts.DiskFileName = fileName;
        //    exportOpts.ExportDestinationOptions = diskOpts;

        //    Report.Export(exportOpts);
        //}

        public string GetPrefix(DateTime mdate)
        {
            return ctxTFAT.TfatPerd.Where(x => x.Code == mcompcode && mdate >= x.StartDate && mdate <= x.LastDate).Select(b => b.PerdCode).FirstOrDefault();
        }

        public string GetPrefix()
        {
            var perd = ctxTFAT.TfatPerd.Where(x => x.Code == mcompcode && x.PerdCode == mperiod).Select(b => new { b.StartDate, b.LastDate }).FirstOrDefault();
            var FDate = mperiod;
            var d1 = perd.StartDate.ToShortDateString();
            var d2 = perd.LastDate.Value.ToShortDateString();
            var m1 = d1.Substring(3, 2);
            var y1 = d1.Substring(8, 2);
            var m2 = d2.Substring(3, 2);
            var y2 = d2.Substring(8, 2);
            return y1 + m1 + y2 + m2;
        }

        public string GetTableName(string mSub)
        {
            string mMain = GetMainType(mSub);
            if (mSub == "ES" || mSub == "EP")
            {
                return "Enquiry";
            }
            else if (mSub == "QS" || mSub == "QP")
            {
                return "Quote";
            }
            else if (mSub == "OS" || mSub == "OP")
            {
                return "Orders";
            }
            else if (mSub == "PI")
            {
                return "PInvoice";
            }
            else if (mSub == "PK")
            {
                return "PackingList";
            }
            else if (mSub == "IP")
            {
                return "Indent";
            }
            else if (mSub == "WO")
            {
                return "WorkOrdersStk";
            }
            else
            {
                if (mMain == "PR")
                {
                    return "Purchase";
                }
                else if (mMain == "SL")
                {
                    return "Sales";
                }
                else if (mMain == "IV")
                {
                    return "Stock";
                }
                else
                {
                    return "Ledger";
                }
            }
        }

        public void UpdateAltCode(string mparentkey)
        {
            string mdracc = "";
            string mcracc = "";
            var mlist = ctxTFAT.Ledger.Where(z => z.ParentKey == mparentkey).Select(x => new { x.Code, x.Debit, x.Credit, x.RecoFlag }).ToList();
            if (mlist != null)
            {
                foreach (var mlb in mlist)
                {
                    if (mlb.Debit != 0 && mdracc == "" && !(mlb.RecoFlag.Contains("T") || mlb.RecoFlag.Contains("B")))
                    {
                        mdracc = mlb.Code;
                    }
                    if (mlb.Credit != 0 && mcracc == "" && !(mlb.RecoFlag.Contains("T") || mlb.RecoFlag.Contains("B")))
                    {
                        mcracc = mlb.Code;
                    }
                }
            }
            ctxTFAT.Database.ExecuteSqlCommand(@"Update Ledger Set AltCode='" + mcracc + "' Where ParentKey='" + mparentkey + "' And Debit<>0");
            ctxTFAT.Database.ExecuteSqlCommand(@"Update Ledger Set AltCode='" + mdracc + "' Where ParentKey='" + mparentkey + "' And Credit<>0");
            //ExecuteStoredProc(@"Update Ledger Set AltCode='" + mcracc + "' Where ParentKey='" + mparentkey + "' And Debit<>0");
            //ExecuteStoredProc(@"Update Ledger Set AltCode='" + mdracc + "' Where ParentKey='" + mparentkey + "' And Credit<>0");
        }

        //public void SavetoLedgerBranch(string mparentkey)
        //{
        //    var mlist = ctxTFAT.Ledger.Where(z => z.ParentKey == mparentkey).Select(x => x).ToList();
        //    if (mlist != null)
        //    {
        //        foreach (var mlb in mlist)
        //        {
        //            LedgerBranch mobj = new LedgerBranch();
        //            mobj.MainType = mlb.MainType;
        //            mobj.SubType = mlb.SubType;    // reserved journals
        //            mobj.Type = mlb.Type;
        //            mobj.Prefix = mlb.Prefix;
        //            mobj.Sno = mlb.Sno;
        //            mobj.Srl = mlb.Srl;
        //            mobj.TableKey = mlb.TableKey;
        //            mobj.ParentKey = mparentkey;
        //            mobj.DocDate = mlb.DocDate;
        //            mobj.Branch = mlb.Branch;
        //            mobj.xBranch = mlb.Branch;
        //            mobj.CompCode = mlb.CompCode;
        //            mobj.LocationCode = mlb.LocationCode;
        //            mobj.Audited = mlb.Audited;
        //            mobj.BillDate = mlb.BillDate;
        //            mobj.BillNumber = mlb.BillNumber;
        //            mobj.Cheque = mlb.Cheque;
        //            mobj.ChequeReturn = mlb.ChequeReturn;
        //            mobj.ClearDate = mlb.ClearDate;
        //            mobj.ChequeDate = mlb.ChequeDate;
        //            mobj.Code = mlb.Code;
        //            mobj.CurrName = mlb.CurrName;
        //            mobj.CurrRate = mlb.CurrRate;
        //            mobj.CurrAmount = mlb.CurrAmount;
        //            mobj.Debit = mlb.Debit ?? 0;
        //            mobj.Credit = mlb.Credit ?? 0;
        //            mobj.Narr = mlb.Narr;
        //            mobj.Party = mlb.Party;
        //            mobj.ProjCode = mlb.ProjCode;
        //            mobj.ProjectStage = mlb.ProjectStage;
        //            mobj.ProjectUnit = mlb.ProjectUnit;
        //            mobj.RecoFlag = mlb.RecoFlag;
        //            mobj.RefDoc = mlb.RefDoc;
        //            mobj.TDSCode = mlb.TDSCode;
        //            mobj.TDSFlag = mlb.TDSFlag;
        //            mobj.BankCode = mlb.BankCode;
        //            mobj.ChqCategory = mlb.ChqCategory;
        //            // iX9: Save default values to Std fields
        //            mobj.ENTEREDBY = muserid;
        //            mobj.LASTUPDATEDATE = DateTime.Now;
        //            mobj.AUTHIDS = mlb.AUTHIDS;
        //            mobj.AUTHORISE = mlb.AUTHORISE;
        //            mobj.ENTEREDBY = mlb.ENTEREDBY;
        //            mobj.LASTUPDATEDATE = mlb.LASTUPDATEDATE;
        //            ctxTFAT.LedgerBranch.Add(mobj);
        //        }
        //        _ = ctxTFAT.SaveChanges();
        //    }
        //}

        //public string GetSerial(string mTable, string mBranch, string mType, string mPrefix, string mSub, DateTime mDate)
        //{
        //    string connstring = GetConnectionString();
        //    string abc;
        //    var result = @"select dbo.GetLastSerial('" + mTable + "','" + mBranch + "','" + mType + "','" + mPrefix + "'" + ",'" + mDate.ToString("yyyy-MMM-dd") + "')";
        //    DataTable mDt2 = GetDataTable(result, connstring);
        //    if (mDt2.Rows.Count > 0)
        //    {
        //        abc = (mDt2.Rows[0][0].ToString() == null ? "0" : mDt2.Rows[0][0].ToString());
        //    }
        //    else
        //    {
        //        abc = "0";

        //    }
        //    return abc;
        //}

        public string GetLastSerial(string mTable, string mBranch, string mType, string mPrefix, string mSub, DateTime mDate, bool MergeSerial = false, string MergeType = "")
        {
            mTable = mTable.Trim();
            string mreturnstring = "";
            int mmax;
            int mmth = 0;
            string mstr = "";

            var mdoc = ctxTFAT.DocTypes.Where(z => z.Code == mType).Select(x => new { mVPrefix = (x.PrefixConst ?? "").Trim(), mCommon = x.CommonSeries, mCentralised = x.Centralised, mwidth = x.DocWidth, mfrom = (x.LimitFrom ?? "") }).FirstOrDefault();
            int mwidth = mdoc.mwidth;
            string mvprefix = mdoc.mVPrefix;
            bool mcommon = mdoc.mCommon;
            bool mcentralised = mdoc.mCentralised;
            string mfrom = mdoc.mfrom;
            //month (01,02,03,04,05,06,07,08,09,10,11,12)
            if (mdoc.mVPrefix.Contains("%%"))
            {
                mmth = mDate.Month;
                mstr = mmth > 9 ? mmth.ToString() : "0" + mmth;
                mvprefix = mvprefix.Replace("%%", mstr);
            }

            //month(1,2,3,4,5,6,7,8,9, O, N, D)
            if (mdoc.mVPrefix.Contains("%"))
            {
                mmth = mDate.Month;
                mvprefix = mvprefix.Replace("%", mmth == 10 ? "O" : (mmth == 11 ? "N" : (mmth == 12 ? "D" : mmth.ToString())));
            }
            //year
            if (mdoc.mVPrefix.Contains("@@"))
            {
                mstr = mDate.Year.ToString().Trim().Substring(2, 2); //Substring(ltrim(rtrim(str(year(mdate)))), 3, 2);
                mvprefix = mvprefix.Replace("@", mstr);
                //Replace(@mvprefix, '@', @mStr);
            }
            //Type e.g. ##### - ISL00, ##-IS, ###-ISL
            if (mvprefix.Contains("#"))
            {
                mmth = mvprefix.Length - mvprefix.Replace("#", "").Length;
                mvprefix = mvprefix.Replace(Enumerable.Repeat("#", mmth).ToString(), mType.Substring(0, mmth));
                //"".PadLeft(mmth).Replace(" ","#")
                //Replace(@mVPrefix,  REPLICATE('#', @mMth), Substring(@mType, 1, @mMth));
            }
            //Type e.g. ##### - ISL00, ##-IS, ###-ISL
            if (mvprefix.Contains("#"))
            {
            }
            //SubType
            if (mvprefix.Contains("$$"))
            {
                mvprefix = mvprefix.Replace("$$", mSub);
            }

            DataTable mdt;
            if (mcentralised == true)
            {
                if (mvprefix == "")
                {
                    if (mType == "LR000")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(LrNo as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(LrNo as integer) Desc");
                    }
                    else if (mType == "LC000")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(LCno as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(LCno as integer) Desc");
                    }
                    else if (mType == "FM000" || mType == "FMH00")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(FmNo as integer)", "Type='" + mType + "'  And Left(AUTHORISE, 1) <> 'X' Order by cast(FmNo as integer) Desc");
                    }
                    else if (mType == "PCK00")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(OrderNo as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(OrderNo as integer) Desc");
                    }
                    else if (mType == "POD00")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(PODNo as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(PODNo as integer) Desc");
                    }
                    else if (mType == "DELV0")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(DeliveryNo as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(DeliveryNo as integer) Desc");
                    }
                    else if (mType == "Trip0")
                    {
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(DocNo as integer)", " Left(AUTHORISE, 1) <> 'X' Order by cast(DocNo as integer) Desc");
                    }
                    else
                    {
                        if (MergeSerial == false)
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(Srl as integer)", "Type='" + mType + "'  And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                        }
                        else
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(Srl as integer)", "Type in (" + MergeType + ")  And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                        }
                    }
                }
                else
                {
                    //mdt = GetDataTable("Select Top 1 cast(rTrim(Substring(Srl, len('" + mvprefix + ") + 1, 15)) as integer) from " + mTable + " Where SubType='" + mSub + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by Cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as bigint) Desc");
                    mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer)", "SubType='" + mSub + "'  And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' And left(Srl," + mvprefix.Length + ")='" + mvprefix + "' Order by cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer) Desc");
                }
            }
            else
            {
                if (mcommon == false)
                {
                    if (mvprefix == "")
                    {
                        if (mType == "LR000")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(LrNo as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(LrNo as integer) Desc");
                        }
                        else if (mType == "LC000")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(LCno as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(LCno as integer) Desc");
                        }
                        else if (mType == "FM000" || mType == "FMH00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(FmNo as integer)", "Type='" + mType + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(FmNo as integer) Desc");
                        }
                        else if (mType == "PCK00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(OrderNo as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(OrderNo as integer) Desc");
                        }
                        else if (mType == "POD00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(PODNo as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(PODNo as integer) Desc");
                        }
                        else if (mType == "DELV0")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(DeliveryNo as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(DeliveryNo as integer) Desc");
                        }
                        else if (mType == "Trip0")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(DocNo as integer)", " Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(DocNo as integer) Desc");
                        }
                        else
                        {
                            if (MergeSerial == false)
                            {
                                mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(Srl as integer)", "Type='" + mType + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                            }
                            else
                            {
                                mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(Srl as integer)", "Type in (" + MergeType + ") And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                            }
                        }
                    }
                    else
                    {
                        //mdt = GetDataTable("Select Top 1 cast(rTrim(Substring(Srl, len(mvprefix) + 1, 15)) as integer) from " + mTable + " Where Type='" + mType + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by Cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as bigint) Desc");
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer)", "Type='" + mType + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' And left(Srl," + mvprefix.Length + ")='" + mvprefix + "' Order by cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer) Desc");
                    }
                }
                else
                {
                    if (mvprefix == "")
                    {

                        if (mType == "LR000")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(LrNo as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(LrNo as integer) Desc");
                        }
                        else if (mType == "LC000")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(LCno as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(LCno as integer) Desc");
                        }
                        else if (mType == "FM000" || mType == "FMH00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(FmNo as integer)", "Type='" + mType + "' And Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(FmNo as integer) Desc");
                        }
                        else if (mType == "PCK00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(OrderNo as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(OrderNo as integer) Desc");
                        }
                        else if (mType == "POD00")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(PODNo as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(PODNo as integer) Desc");
                        }
                        else if (mType == "DELV0")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(DeliveryNo as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(DeliveryNo as integer) Desc");
                        }
                        else if (mType == "Trip0")
                        {
                            mmax = (int)FieldoftableNumber(mTable, "Top 1 Cast(DocNo as integer)", " Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(DocNo as integer) Desc");
                        }
                        else
                        {
                            if (MergeSerial == false)
                            {
                                mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(Srl as integer)", "Type='" + mType + "' And Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                            }
                            else
                            {
                                mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(Srl as integer)", "Type in (" + MergeType + ") And Prefix='" + mPrefix + "' And Left(AUTHORISE, 1) <> 'X' Order by cast(Srl as integer) Desc");
                            }
                        }
                    }
                    else
                    {
                        //mdt = GetDataTable("Select Top 1 cast(rTrim(Substring(Srl, len('" + mvprefix + ") + 1, 15)) as integer) from " + mTable + " Where SubType='" + mSub + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' Order by Cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as bigint) Desc");
                        mmax = (int)FieldoftableNumber(mTable, "Top 1 cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer)", "SubType='" + mSub + "' And Prefix='" + mPrefix + "' And Branch='" + mBranch + "' And Left(AUTHORISE, 1) <> 'X' And left(Srl," + mvprefix.Length + ")='" + mvprefix + "' Order by cast(rTrim(Substring(Srl, len('" + mvprefix + "') + 1, 15)) as integer) Desc");
                    }
                }
            }



            if (Convert.ToInt32(mfrom) == 0) mfrom = "1";
            if (mmax == 0) try { mmax = Convert.ToInt32(mfrom) - 1; } catch { mmax = 0; };
            ++mmax;
            // convert to final string from numeric
            mreturnstring = mmax.ToString().Trim();
            //pad string with 0 if @maddzero is selected                 --and @mAddZero<>0
            if (mwidth > 0)
            {
                mreturnstring = mreturnstring.PadLeft(mwidth, '0');
                //REPLICATE('0', @mWidth - len(@mreturnstring)) + @mReturnString;
            }
            return mvprefix + mreturnstring;
        }


        public string GetCountryCode(string Name)
        {
            string countryCode = "0";
            if (Name == "" || Name == null)
            {
            }
            else
            {
                var a = ctxTFAT.TfatCountry.Where(x => x.Name == Name).Select(x => x).FirstOrDefault();
                if (a != null)
                {
                    countryCode = a.Code.ToString();
                }
            }
            return countryCode;
        }

        public void UpdateGrpKey(string mTable)
        {
            string connstring = GetConnectionString();
            SqlConnection con = new SqlConnection(connstring);
            SqlCommand cmd = new SqlCommand("dbo.SPTFAT_UpdateGrpKey", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 120;
            cmd.Parameters.Add("@mTable", SqlDbType.VarChar).Value = mTable;
            con.Open();
            cmd.CommandTimeout = 0;
            cmd.ExecuteNonQuery();
            cmd.Dispose();
            con.Close();
            con.Dispose();
        }

        public string GetAuthorise(string mType, decimal mTotAmt, string mBranch)
        {
            string GetAUTHORISE = "A00";
            var z = (from a in ctxTFAT.TfatUserAudit
                     join h in ctxTFAT.TfatUserAuditHeader on a.Type equals h.Type into auth
                     from leftauth in auth.DefaultIfEmpty()
                     where leftauth.AuthReq && a.Type == mType && (a.SancLimit == 0 || a.SancLimit >= mTotAmt)
                     select new { a.Type, a.UserLevel }).FirstOrDefault();

            //var a = ctxTFAT.TfatUserAudit.Where(x => x.Type == mType && x.AuthReq == true && (x.SancLimit == 0 || x.SancLimit >= mTotAmt)).Select(x => x.UserLevel).FirstOrDefault();
            if (z != null)
            {
                GetAUTHORISE = "N0" + z.UserLevel.ToString();
            }
            // Activity based Document Approval, only if Trx. Auth is not applicable
            if (GetAUTHORISE.Substring(0, 1) == "A")
            {
                var b = ctxTFAT.DocTypes.Where(x => x.Code == mType).Select(x => x.DocApprovalReq).FirstOrDefault();
                if (b == true)
                {
                    GetAUTHORISE = "D00";
                }
            }
            return GetAUTHORISE;
        }

        public string SaveAuthorise(string mParentKey, decimal mTotAmt, string mDocDate, int mCurrName, decimal mCurrRate, DateTime mEntryDate, string mCode, string mBranch, string mEnteredBy = "Super", int mLevel = -1)
        {
            string mType = mParentKey.Substring(0, 5);
            string mPrefix = mParentKey.Substring(5, 2);
            string mSrl = mParentKey.Substring(7, mParentKey.Length - 7);
            if (mType != null)
            {
                mType = mType.Trim();
            }

            if (mCurrRate == 0)
            {
                mCurrRate = 1;
            }
            //if (mCurrRateI == 0)
            //mCurrRateI = 1;
            string mAuthUser = "";
            // get auth details
            if (mLevel == -1)
            {
                mLevel = (int)ctxTFAT.TfatUserAudit.Where(x => x.Type == mType && (x.SancLimit == 0 || x.SancLimit >= mTotAmt)).Select(x => x.UserLevel).OrderBy(z => z).Take(1).FirstOrDefault();
            }

            //if (mCondAuth == true)
            //{
            //    var mList = ctxTFAT.TfatUserAudit.Where(x => x.UserLevel == mLevel && x.Branch == mBranch && x.Type == mType && x.AuthRule == 0 && (x.SancLimit == 0 || x.SancLimit >= mTotAmt)).Select(x => x).ToList();
            //} else {
            var mList = (from a in ctxTFAT.TfatUserAudit
                         join h in ctxTFAT.TfatUserAuditHeader on a.Type equals h.Type into auth
                         from leftauth in auth.DefaultIfEmpty()
                         where a.UserLevel == mLevel && a.Type == mType && (a.SancLimit == 0 || a.SancLimit >= mTotAmt)
                         select new
                         {
                             a.UserID,
                             a.SancLimit,
                             a.SendEmail,
                             a.SendMSG,
                             a.SendSMS,
                             a.Sno,
                             a.Type,
                             a.UserLevel,
                             leftauth.AuthTimeBound,
                             leftauth.AuthTimeLimit
                         }).ToList();
            //var mList = ctxTFAT.TfatUserAudit.Where(x => x.UserLevel == mLevel && x.Type == mType && (x.SancLimit == 0 || x.SancLimit >= mTotAmt)).Select(x => x).ToList();

            if (mList != null)
            {
                foreach (var item in mList)
                {
                    Authorisation mObj = new Authorisation();
                    mObj.Branch = mbranchcode;
                    mObj.Type = mType;
                    mObj.Prefix = mPrefix ?? "";
                    mObj.Srl = mSrl ?? "";
                    mObj.DocDate = Convert.ToDateTime(mDocDate);
                    mObj.Amount = mTotAmt;
                    mObj.Code = mCode ?? "";
                    mObj.ParentKey = mParentKey ?? "";
                    mObj.CompCode = "";
                    mObj.TableKey = mParentKey ?? "";
                    mObj.CurrName = mCurrName;
                    mObj.CurrRate = mCurrRate;
                    //mObj.CurrRateI = mCurrRateI;
                    mObj.AUTHIDS = item.UserID ?? "";
                    mObj.AuthLevel = mLevel;
                    mObj.AuthBy = "";
                    mObj.AuthType = "T";
                    mObj.AUTHORISE = "N";
                    mObj.ENTEREDBY = mEnteredBy ?? "";
                    mObj.EntryDate = Convert.ToDateTime(mEntryDate);
                    mObj.AuthTimeBound = item.AuthTimeBound;
                    mObj.AuthTimeLimit = item.AuthTimeLimit;
                    mObj.AuthDueDate = DateTime.Now.AddHours((double)item.AuthTimeLimit);
                    mObj.SancLimit = item.SancLimit;
                    mObj.LASTUPDATEDATE = DateTime.Now;
                    mObj.Narr = "";
                    mObj.ProcessCode = 0;
                    mObj.AuthCompulsary = false;
                    mObj.Locked = false;
                    mAuthUser = mAuthUser + item.UserID + "^";
                    ctxTFAT.Authorisation.Add(mObj);
                }
                ctxTFAT.SaveChanges();
            }
            return mAuthUser;
        }

        //public void SaveAUTHORISEDOC(ByVal mType As String, ByVal mPrefix As String, ByVal mSerial As String, ByVal mTotAmt As Currency, ByVal mDocdate As Date, ByRef mAuthUser As String, ByVal mCurrName As String, ByVal mCurrRate As Single, Optional ByVal mLevel As Integer = -1, Optional ByVal mEntryDate As Date, Optional mCode As String = "", Optional ByVal mBranch As String = "", Optional ByVal mEnteredBy As String = "", Optional ByVal mBillNo As String = "", Optional ByVal mCurrRateI As Single = 0)
        //Dim mRs As New ADODB.Recordset, mRs2 As New ADODB.Recordset, mArr() As String, n As Integer
        //Dim mStr As String
        //'
        //If mCurrRate = 0 Then mCurrRate = 1
        //If mCurrRateI = 0 Then mCurrRateI = 1 / mCurrRate
        //If mBranch = "" Then mBranch = gsCurBranch
        //If mEnteredBy = "" Then mEnteredBy = gsUserId
        //mAuthUser = ""
        //With mRs
        //.CursorLocation = adUseClient
        //.Open "Select * From Authorisation where 1=2", gsdbDbf, adOpenKeyset, adLockOptimistic, adCmdText
        //mRs2.CursorLocation = adUseClient
        //mRs2.Open "Select " + GetFieldsOfTable("DocApproval") + " From DocApproval where Branch='" & mBranch & "' And Type='" + mType + "'", gsdbDbf, adOpenStatic, adLockReadOnly, adCmdText
        //Do While mRs2.EOF = False
        //    mArr = Split(mRs2!IDs, ",")
        //    For n = 0 To UBound(mArr)
        //        If Trim(mArr(n)) = "" Then GoTo mNext
        //        .AddNew
        //        ReplFields mRs
        //        !Branch = mBranch
        //        !Type = mType
        //        !Prefix = mPrefix
        //        !Srl = mSerial
        //        !DocDate = mDocdate
        //        !Amount = mTotAmt
        //        !Code = mCode
        //        If mBillNo = "" Then
        //            !BillNumber = mSerial
        //        Else
        //            If FieldOfTable("DocTypes", "MainType", "Branch='" & mBranch & "' And Code='" & mType & "'") = "PR" Then
        //                !BillNumber = mBillNo
        //            Else
        //                !BillNumber = mSerial
        //            End If
        //        End If
        //        !CurrName = mCurrName
        //        !CurrRate = mCurrRate
        //        !CurrRateI = mCurrRateI
        //        !AUTHIDS = mArr(n)
        //        !AuthLevel = 1
        //        !AuthBy = ""
        //        !AuthType = "D"
        //        !AUTHORISE = "D"
        //        !Enteredby = mEnteredBy
        //        !EntryDate = mEntryDate
        //        '
        //        !Process = mRs2!Process
        //        !AuthTimeBound = IIf(mRs2!LeadTime<> 0, True, False)
        //        !AuthTimeLimit = mRs2!LeadTime
        //        !AuthDueDate = DateAdd("h", !AuthTimeLimit, mEntryDate)
        //        .Update
        //        mAuthUser = mAuthUser + mArr(n) + "^"
        //        ' Send it for the first process only..
        //        If mRs2!Sno = 1 Then
        //            If mRs2!SendSMS = "Y" Then
        //                mStr = Trim(FieldOfTable("TfatPass", "Mobile", "IDs='" & mArr(n) & "' And Flag<>'R' And Locked=0", "T", "N"))
        //                If mStr<> "" Then
        //                    SendSMS mStr, "Dear " + mStr + "," + vbCrLf + "Please Note that, following Document is Pending for your Authorisation.." + vbCrLf + vbCrLf + "Type: " + mType + " Prefix: " + mPrefix + " Serial: " + mSerial & vbCrLf & "Dt: " & mEntryDate & ",Activity:" & NameOfAccount(!Process, "R"), True
        //                End If
        //            End If
        //            If mRs2!SendEmail = "Y" Then
        //                mStr = Trim(FieldOfTable("TfatPass", "EmailID", "IDs='" & mArr(n) & "' And Flag<>'R' And Locked=0", "T", "N"))
        //                If mStr<> "" Then
        //                    EmailSend mStr, "Authorisation Email from " + gsModuleName, "Dear " + mStr + "," + vbCrLf + "Please Note that, following Document is Pending for your Authorisation.." + vbCrLf + vbCrLf + "Type: " + mType + " Prefix: " + mPrefix + " Serial: " + mSerial & vbCrLf & "Dated: " & mEntryDate & vbCrLf & "Activity: " & NameOfAccount(!Process, "R"), ""
        //                End If
        //            End If
        //            SendMessageLog gsUserId, mArr(n), "Dear " + mArr(n) + "," + vbCrLf + "Please Note that, Following Document is pending for your authorisation.." + vbCrLf + vbCrLf + "Type: " + mType + " Prefix: " + mPrefix + " Serial: " + mSerial & vbCrLf & "Dated: " & mEntryDate & vbCrLf & "Activity: " & NameOfAccount(!Process, "R"), True, False
        //        End If
        //mNext:
        //    Next
        //    mRs2.MoveNext
        //Loop
        //.Close
        //End With
        //mRs2.Close
        //Set mRs = Nothing
        //Set mRs2 = Nothing
        //mAuthUser = CutRightString(mAuthUser, 1, "^")
        //End Sub

        ////<a href="@Url.Action("ShowCustomerList");">Show Customer List</a> 
        //// add this in view
        //public ActionResult ShowCustomerList()
        //{
        //    CR1.Models.NORTHWINDEntities db = new crMVCApp.Models.NORTHWINDEntities();
        //    //CrMVCApp.Models.Customer c;
        //    var c = (from b in db.Customers select b).ToList();

        //    CustomerList rpt = new CustomerList();
        //    rpt.Load();
        //    rpt.SetDataSource(c);
        //    Stream s = rpt.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
        //    return File( s,"application/pdf");
        //}

        public bool CheckRCM(int mGSTType, DateTime mDate, DateTime mRCMDate)
        {
            return false;//(mGSTType == 1 || (mDate >= mRCMDate && mGSTType == 6) ? true : false);
        }

        public string CheckEntryDate(DateTime mDate, bool mBackDated, DateTime mStartDate, DateTime mLastDate, decimal mBackDays, DateTime gsLoginDate, bool gpHolidayWarn, string gpHoliday1, string gpHoliday2)
        {
            if (IsValidDate(Convert.ToString(mDate)) == false)
            {
                return "Invalid Date Input..";
            }

            if (mDate < mStartDate || mDate > mLastDate)
            {
                return "Date is out of Accounting Period..";
            }

            if ("SUPER ADMIN".Contains(muserid.ToUpper()) == false && mBackDated == false)
            {
                if (mDate.Date < gsLoginDate.AddDays((double)-mBackDays).Date)
                {
                    return "Can't go BackDated.." + (mBackDays != 0 ? "BackDays: " + mBackDays + " days" : "");
                }
            }
            return CheckHoliday(mDate, mbranchcode, gpHoliday1, gpHoliday2);
        }

        public string CheckHoliday(DateTime mmDate, string mBranch, string gpHoliday1, string gpHoliday2)
        {
            string mDay = mmDate.DayOfWeek.ToString().ToUpper();
            if (mDay == gpHoliday1.ToUpper() || mDay == gpHoliday2.ToUpper())
            {
                return "Entry falls on weekly holiday (" + mDay + ")";
            }
            else
            {
                mDay = ctxTFAT.Holidays.Where(x => x.HolidayDt == mmDate).Select(x => x.Description).FirstOrDefault();
                if (mDay != "" && mDay != null)
                {
                    return "Entry falls on a holiday..(" + mDay + ")";
                }
            }
            return "";
        }

        public decimal GetBalanceDateRange(string mCode, DateTime mDate, DateTime mDate2, string mwhat, string mbranch, int mlocationcode = 0, bool mwithpal = false, bool mwithunauth = false, bool mwithmvpv = false)
        {
            string mstr = "Code='" + mCode + "' and DocDate>='" + MMDDYY(mDate.Date) + "' and DocDate<='" + MMDDYY(mDate2.Date) + "'";

            if (mwithmvpv == false)
                mstr += " and MainType <> 'MV' and MainType<>'PV'";

            if (mwithunauth == false)
                mstr += " and left(AUTHORISE,1)= 'A'";

            if (mbranch != "ALL")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and Branch = '" + mbranch + "'";
                }
            }

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mwithpal == false)
                mstr += " and left(Type,3)<>'PAL'";

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            if (mwhat == "D")
            {
                mwhat = "Sum(Debit)";
            }
            else
            {
                mwhat = "Sum(Credit)";
            }
            return FieldoftableNumber("Ledger", mwhat, mstr);
        }

        //Suresh 6.6.2023(Create)
        public decimal GetMulBalanceDateRange(string mCode, DateTime mDate, DateTime mDate2, string mwhat, string mbranch, int mlocationcode = 0, bool mwithpal = false, bool mwithunauth = false, bool mwithmvpv = false)
        {
            string mstr = "charindex(Code,'" + mCode + "')<>0 and DocDate>='" + MMDDYY(mDate.Date) + "' and DocDate<='" + MMDDYY(mDate2.Date) + "'";

            if (mwithmvpv == false)
                mstr += " and MainType <> 'MV' and MainType<>'PV'";

            if (mwithunauth == false)
                mstr += " and left(AUTHORISE,1)= 'A'";

            if (mbranch != "ALL")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and Branch = '" + mbranch + "'";
                }
            }

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mwithpal == false)
                mstr += " and left(Type,3)<>'PAL'";

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            if (mwhat == "D")
            {
                mwhat = "Sum(Debit)";
            }
            else
            {
                mwhat = "Sum(Credit)";
            }
            return FieldoftableNumber("Ledger", mwhat, mstr);
        }


        public decimal GetBalance(string mCode, DateTime mDate, string mbranch, int mlocationcode = 0, bool mwithpal = false, bool mwithunauth = false, bool mwithmvpv = false)
        {
            string mstr = "Code='" + mCode + "' and DocDate<='" + MMDDYY(mDate.Date) + "'";

            if (mwithmvpv == false)
                mstr += " and MainType <> 'MV' and MainType<>'PV'";

            if (mwithunauth == false)
                mstr += " and left(AUTHORISE,1)= 'A'";

            if (mbranch != "ALL")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and Branch = '" + mbranch + "'";
                }
            }

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mwithpal == false)
                mstr += " and left(Type,3)<>'PAL'";

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            return FieldoftableNumber("Ledger", "Sum(Debit-Credit)", mstr);

            //                                    mBalance = (decimal)(from L in ctxTFAT.Ledger
            //                                                         where L.MainType != "MV" && L.MainType != "PV" && L.Code == mCode && L.DocDate <= mDate.Date && (mbranchcode != "ALL" ? L.Branch == mbranchcode : true) && L.LocationCode == mlocationcode && L.AUTHORISE.StartsWith("A") && L.Type.StartsWith("PAL") == false && (string.IsNullOrEmpty(mDocString) ? true : !mDocString.Contains(L.Type))
            //                                                         select L.Debit - L.Credit).DefaultIfEmpty(0).Sum();
            //        }
            //                else
            //                {
            //                    mBalance = (decimal) (from L in ctxTFAT.Ledger
            //                                          where L.MainType != "MV" && L.MainType != "PV" && L.Code == mCode && L.DocDate <= mDate.Date && (mbranchcode != "ALL" ? L.Branch == mbranchcode : true) && L.AUTHORISE.StartsWith("A") && L.Type.StartsWith("PAL") == false && (string.IsNullOrEmpty(mDocString) ? true : !mDocString.Contains(L.Type))
            //                                         select L.Debit - L.Credit).DefaultIfEmpty(0).Sum();
            //    }
            //}
            //            else
            //            {
            //                if (mlocationcode != 0)
            //                {
            //                    mBalance = (decimal) (from L in ctxTFAT.Ledger
            //                                          where L.MainType != "MV" && L.MainType != "PV" && L.Code == mCode && L.DocDate <= mDate.Date && (mbranchcode != "ALL" ? L.Branch == mbranchcode : true) && L.LocationCode == mlocationcode && L.AUTHORISE.StartsWith("A") && (string.IsNullOrEmpty(mDocString) ? true : !mDocString.Contains(L.Type))
            //                                         select L.Debit - L.Credit).DefaultIfEmpty(0).Sum();
            //                }
            //                else
            //                {
            //                    mBalance = (decimal) (from L in ctxTFAT.Ledger
            //                                          where L.MainType != "MV" && L.MainType != "PV" && L.Code == mCode && L.DocDate <= mDate.Date && (mbranchcode != "ALL" ? L.Branch == mbranchcode : true) && L.AUTHORISE.StartsWith("A") && (string.IsNullOrEmpty(mDocString) ? true : !mDocString.Contains(L.Type))
            //                                         select L.Debit - L.Credit).DefaultIfEmpty(0).Sum();
            //                }
            //            }

            //string connstring = GetConnectionString();
            //string mStr = @"select dbo.GetBalance('" + mCode + "','" + MMDDYY(mDate) + "','" + mbranchcode + "'," + mlocationcode + ")";
            //DataTable smDt = GetDataTable(mStr, connstring);
            //if (smDt.Rows.Count > 0)
            //{
            //    mBalance = (decimal)smDt.Rows[0][0];
            //}
            //return mBalance;
        }

        //Suresh 6.6.2023(Create)
        public decimal GetMulAccountBalance(string mCode, DateTime mDate, string mbranch, int mlocationcode = 0, bool mwithpal = false, bool mwithunauth = false, bool mwithmvpv = false)
        {
            string mstr = "charindex(Code,'" + mCode + "')<>0 and DocDate<='" + MMDDYY(mDate.Date) + "'";

            if (mwithmvpv == false)
                mstr += " and MainType <> 'MV' and MainType<>'PV'";

            if (mwithunauth == false)
                mstr += " and left(AUTHORISE,1)= 'A'";

            if (mbranch != "ALL")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and charindex(Branch,'" + mbranch + "')<>0";
                }
            }

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mwithpal == false)
                mstr += " and left(Type,3)<>'PAL'";

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            return FieldoftableNumber("Ledger", "Sum(Debit-Credit)", mstr);

        }


        public decimal GetOutstanding(string mTableKey)
        {
            //string connstring = GetConnectionString();
            decimal mBalance = 0;
            //string mStr = @"dbo.GetOutstanding(" + mTableKey + ")";
            DataTable smDt = GetDataTable(@"Select dbo.GetOutstanding('" + mTableKey + "')");
            if (smDt.Rows.Count > 0)
            {
                mBalance = (decimal)smDt.Rows[0][0];
            }
            smDt.Dispose();
            return mBalance;
        }

        public double GetRate(string Code, int Store, int mlocation, int mMethod = -1)
        {
            // 0-Standard, 1-LastCostRate, 2-LastPurchRate, 3-PurchRate, 4-AvgRate, 5-FIFO, 6-LIFO, 9-None
            SqlConnection conn = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SELECT [dbo].[fn_GetRate] (@mCode,@AsOn,@mStore,@mBranch,@mLocation,@Method)", conn);
            cmd.Parameters.AddWithValue("@mCode", Code);
            cmd.Parameters.AddWithValue("@AsOn", DateTime.Now);
            cmd.Parameters.AddWithValue("@mStore", Store);
            cmd.Parameters.AddWithValue("@mBranch", mbranchcode);
            cmd.Parameters.AddWithValue("@mLocation", mlocation);
            cmd.Parameters.AddWithValue("@Method", mMethod);
            conn.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            da.Dispose();
            conn.Close();
            conn.Dispose();
            return Convert.ToDouble(dt.Rows[0][0].ToString());
        }

        public double GetReservation(string mcode, string mbranchcode)
        {
            SqlConnection conn = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SELECT [dbo].[fn_GetReservation] (@mCode,@mBranch)", conn);
            cmd.Parameters.AddWithValue("@mCode", mcode);
            cmd.Parameters.AddWithValue("@mBranch", mbranchcode);
            conn.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            da.Dispose();
            conn.Close();
            conn.Dispose();
            return Convert.ToDouble(dt.Rows[0][0].ToString());
        }

        public double GetStockRange(string mCode, int mStore, DateTime mDate1, DateTime mDate2, string mwhat, string mbranch = "ALL", int mlocationcode = 0, bool mincludeorders = true)
        {
            if (mincludeorders == true)
                mincludeorders = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.gp_CLStockAddORder).FirstOrDefault();

            string mstr = "Notinstock=0 and Code='" + mCode + "' and DocDate>='" + MMDDYY(mDate1.Date) + "' and DocDate<='" + MMDDYY(mDate2.Date) + "' and ((Qty>0 And Left(AUTHORISE,1) = 'A') or Qty<0)";

            if (mbranch != "ALL")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and Branch = '" + mbranch + "'";
                }
            }

            if (mStore != 0)
                mstr += " and Store=" + mStore;

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            if (mwhat == "D")
            {
                mstr += " and Qty>0";
                mwhat = "Sum(Qty)";
            }
            else
            {
                mstr += " and Qty<0";
                mwhat = "Sum(-Qty)";
            }
            return (double)FieldoftableNumber("Stock", mwhat, mstr);
        }

        public double GetStock(string mCode, int mStore, DateTime mDate, string mbranch, int mlocationcode = 0, bool mincludeorders = true)
        {
            if (mincludeorders == true)
                mincludeorders = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.gp_CLStockAddORder).FirstOrDefault();

            string mstr = "Notinstock=0 and Code='" + mCode + "' and DocDate<='" + MMDDYY(mDate.Date) + "' and ((Qty>0 And Left(AUTHORISE,1) = 'A') or Qty<0)";

            if (mbranch != "ALL" && mbranch != "")
            {
                if (mbranch.Contains("'") == true)
                {
                    mstr += " and Branch in (" + mbranch + ")";
                }
                else
                {
                    mstr += " and Branch = '" + mbranch + "'";
                }
            }

            if (mStore != 0)
                mstr += " and Store=" + mStore;

            if (mlocationcode != 0)
                mstr += " and LocationCode=" + mlocationcode;

            if (mDocString != "")
                mstr += " and charindex(Type,'" + mDocString + "')=0";

            return (double)FieldoftableNumber("Stock", "Sum(Qty)", mstr);

            //if (mincludeorders == true)
            //    mincludeorders = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.gp_CLStockAddORder).FirstOrDefault();

            //SqlConnection conn = new SqlConnection(GetConnectionString());
            //SqlCommand cmd = new SqlCommand("SELECT [dbo].[GetStock] (@mCode,@mStore,@mBranch,@mDate,@mOpeningOnly,@mIncludeReserve,@mIncludeOrders,@mDocString)", conn);
            //cmd.Parameters.AddWithValue("@mCode", Code);
            //cmd.Parameters.AddWithValue("@mStore", Store.ToString());
            //cmd.Parameters.AddWithValue("@mBranch", mbranch);
            //cmd.Parameters.AddWithValue("@mDate", mDate);
            //cmd.Parameters.AddWithValue("@mOpeningOnly", false);
            //cmd.Parameters.AddWithValue("@mIncludeReserve", false);
            //cmd.Parameters.AddWithValue("@mIncludeOrders", mincludeorders);
            //cmd.Parameters.AddWithValue("@mDocString", mDocString);
            //conn.Open();
            //SqlDataAdapter da = new SqlDataAdapter(cmd);
            //DataTable dt = new DataTable();
            //da.Fill(dt);
            //da.Dispose();
            //conn.Close();
            //conn.Dispose();
            //return Convert.ToDouble(dt.Rows[0][0].ToString());
        }

        public double GetPendingOrderItem(string msubtype, string mcode, string mbranchcode, DateTime mdate)
        {
            SqlConnection conn = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SELECT dbo.fn_GetPendingOrderItem(@SubType,@Code,@Branch,@mDate,@mDocString)", conn);
            cmd.Parameters.AddWithValue("@SubType", msubtype);
            cmd.Parameters.AddWithValue("@Code", mcode);
            cmd.Parameters.AddWithValue("@Branch", mbranchcode);
            cmd.Parameters.AddWithValue("@mDate", mdate);
            cmd.Parameters.AddWithValue("@mDocString", mDocString);
            conn.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            da.Dispose();
            conn.Close();
            conn.Dispose();
            return Convert.ToDouble(dt.Rows[0][0].ToString());
        }

        public double GetStock2(string Code, int Store)
        {
            bool mincludeorders = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.gp_CLStockAddORder).FirstOrDefault();
            SqlConnection conn = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("SELECT [dbo].[GetStock2] (@mCode,@mStore,@mBranch,@mDate,@mOpeningOnly,@mIncludeReserve,@mIncludeOrders,@mDocString)", conn);
            cmd.Parameters.AddWithValue("@mCode", Code);
            cmd.Parameters.AddWithValue("@mStore", Store.ToString());
            cmd.Parameters.AddWithValue("@mBranch", mbranchcode);
            cmd.Parameters.AddWithValue("@mDate", DateTime.Now);
            cmd.Parameters.AddWithValue("@mOpeningOnly", false);
            cmd.Parameters.AddWithValue("@mIncludeReserve", false);
            cmd.Parameters.AddWithValue("@mIncludeOrders", mincludeorders);
            cmd.Parameters.AddWithValue("@mDocString", mDocString);
            conn.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            da.Dispose();
            conn.Close();
            conn.Dispose();
            return Convert.ToDouble(dt.Rows[0][0].ToString());
        }

        public string GetCompanyName(string mComp)
        {
            return ctxTFAT.TfatComp.Where(x => x.Code == mComp).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public string GetBranchName(string Code)
        {
            return ctxTFAT.TfatBranch.Where(x => x.Code == Code).Select(x => x.Name).FirstOrDefault() ?? "";
        }

        public int GetCodeInteger(string mtable, string mfld = "Code")
        {
            return Convert.ToInt32(FieldoftableNumber(mtable, "Max(" + mfld + ")", "1=1") + 1);
        }

        public string GetCode(byte mAutoAccStyle, byte mAutoAccLength, string mGrp)
        {
            string mCode = "";
            if (mAutoAccStyle == 0)   // continuous number
            {
                ////mCode = (from TS in ctxTFAT.Master select TS.Code).Max();
                ////string digits = new string(mCode.Where(char.IsDigit).ToArray());
                ////if (!int.TryParse(digits, out int number)) //int.Parse would do the job since only digits are selected
                ////{
                ////    //Console.WriteLine("Something Went Wrong");
                ////}
                ////mCode = (++number).ToString("D9");
                int mmax = 0;
                string mquery = "Select Top 1 Cast(Code as integer) from Master Order by Code Desc";
                DataTable mDt = GetDataTable(mquery);
                if (mDt.Rows.Count > 0)
                {
                    mmax = (mDt.Rows[0][0].ToString() == null || mDt.Rows[0][0].ToString() == "") ? 0 : Convert.ToInt32(mDt.Rows[0][0].ToString());
                }
                mDt.Dispose();
                mCode = (++mmax).ToString("D9");
            }
            else    // group wise
            {
                string mPrefix = "";
                var mobj = ctxTFAT.MasterGroups.Select(x => new
                {
                    x.Prefix,
                    x.Code
                }).Where(z => z.Code == mGrp).FirstOrDefault();
                if (mobj != null)
                {
                    mPrefix = mobj.Prefix.Trim();
                }
                string mCnt = ctxTFAT.Master.Where(z => z.Code.Substring(0, mPrefix.Length) == mPrefix).Select(x => x.Code.Substring(mPrefix.Length, 9)).Max() ?? "0";

                mCode = mPrefix + (Convert.ToInt32(mCnt) + 1).ToString().PadLeft(mAutoAccLength, '0');
                //(from TS in ctxTFAT.Master select TS.Code.Substring(mPrefix.Length, 9)).Where( ;
            }
            return mCode;
        }
        public string GetCustomerCode(byte mAutoAccStyle, byte mAutoAccLength, string mGrp)
        {
            string mCode = "";
            if (mAutoAccStyle == 0)   // continuous number
            {
                ////mCode = (from TS in ctxTFAT.Master select TS.Code).Max();
                ////string digits = new string(mCode.Where(char.IsDigit).ToArray());
                ////if (!int.TryParse(digits, out int number)) //int.Parse would do the job since only digits are selected
                ////{
                ////    //Console.WriteLine("Something Went Wrong");
                ////}
                ////mCode = (++number).ToString("D9");
                int mmax = 0;
                string mquery = "Select Top 1 Cast(Code as integer) from customermaster Order by Code Desc";
                DataTable mDt = GetDataTable(mquery);
                if (mDt.Rows.Count > 0)
                {
                    mmax = (mDt.Rows[0][0].ToString() == null || mDt.Rows[0][0].ToString() == "") ? 0 : Convert.ToInt32(mDt.Rows[0][0].ToString());
                }
                mDt.Dispose();
                mCode = (++mmax).ToString("D9");
            }
            else    // group wise
            {
                string mPrefix = "";
                var mobj = ctxTFAT.MasterGroups.Select(x => new
                {
                    x.Prefix,
                    x.Code
                }).Where(z => z.Code == mGrp).FirstOrDefault();
                if (mobj != null)
                {
                    mPrefix = mobj.Prefix.Trim();
                }
                string mCnt = ctxTFAT.Master.Where(z => z.Code.Substring(0, mPrefix.Length) == mPrefix).Select(x => x.Code.Substring(mPrefix.Length, 9)).Max() ?? "0";

                mCode = mPrefix + (Convert.ToInt32(mCnt) + 1).ToString().PadLeft(mAutoAccLength, '0');
                //(from TS in ctxTFAT.Master select TS.Code.Substring(mPrefix.Length, 9)).Where( ;
            }
            return mCode;
        }

        public string GetGroupTree(string mGrp)
        {
            string connstring = GetConnectionString();
            string mTree = "";
            string mStr = @"dbo.fn_GetGroupTree(" + mGrp + ")";
            DataTable smDt = GetDataTable(mStr, connstring);
            if (smDt.Rows.Count > 0)
            {
                mTree = smDt.Rows[0][0].ToString() + "@";
            }
            return mTree;
        }

        //public decimal GetReOrderLevel(string mCode, DateTime mDate, string mBranch = "", int mStore = 0)
        //{
        //    decimal? mReOrd = 0;
        //    decimal? mReOrdC = 0;
        //    DateTime mDate2;
        //    if (mBranch == "")
        //    {
        //        mBranch = mbranchcode;
        //    }

        //    var mobj = ctxTFAT.SeasonStockLevel.Where(z => z.Branch == mBranch && z.Code == mCode && z.EffDateFrom <= mDate && z.EffDateTo >= mDate).Select(x => new { x.ReOrdDays, x.ReOrdDaysC, x.Code, x.ReOrdLevel, x.ReOrdHighLow }).FirstOrDefault();
        //    if (mobj == null && mStore != 0)
        //    {
        //        mobj = ctxTFAT.StoreMinMax.Where(z => z.Code == mCode && z.Store == mStore && z.EffDateFrom <= mDate && z.EffDateTo >= mDate).Select(x => new { x.ReOrdDays, x.ReOrdDaysC, x.Code, x.ReOrdLevel, x.ReOrdHighLow }).FirstOrDefault();
        //    }
        //    if (mobj == null)
        //    {
        //        mobj = ctxTFAT.ItemDetail.Where(z => z.Code == mCode && z.Branch == mBranch).Select(x => new { x.ReOrdDays, x.ReOrdDaysC, x.Code, x.ReOrdLevel, x.ReOrdHighLow }).FirstOrDefault();
        //    }
        //    if (mobj != null)
        //    {
        //        mReOrd = mobj.ReOrdLevel;
        //        if (mobj.ReOrdDays != 0 && mobj.ReOrdDaysC != 0) // calculate reorder level
        //        {
        //            mReOrdC = mobj.ReOrdDaysC;
        //            mDate2 = mDate.AddDays(-1 * (double)mobj.ReOrdDays);
        //            if (mReOrdC == 0)
        //            {
        //                mReOrdC = 1;
        //            }
        //            // dont consider mdate i.e. docdate<mdate not docdate<=mdate
        //            mReOrdC = (decimal?)ctxTFAT.Stock.Where(z => z.Code == mCode && z.Qty < 0 && z.NotInStock == false && z.AUTHORISE.Substring(0, 1) == "A" && z.DocDate >= mDate2 && z.DocDate < mDate).Sum(x => (double?)x.Qty) ?? 0;
        //            mReOrdC = -1 * (mReOrdC / mobj.ReOrdDays == 0 ? 1 : mobj.ReOrdDays);
        //            mReOrdC = mReOrdC * mobj.ReOrdDaysC;
        //        }
        //    }
        //    decimal? GetReOrderLevel = 0;
        //    if (mobj.ReOrdHighLow == true) // higher
        //    {
        //        GetReOrderLevel = mReOrdC > mReOrd ? mReOrdC : mReOrd;
        //    }
        //    else
        //    {
        //        GetReOrderLevel = mReOrdC < mReOrd ? mReOrd : mReOrdC;
        //        if (GetReOrderLevel == 0)
        //        {
        //            GetReOrderLevel = mReOrd + mReOrdC; // anyone which is not 0
        //        }
        //    }
        //    return (decimal)GetReOrderLevel;
        //}

        public void ExecuteStoredProc(string mSQLQuery, string connstring = "")
        {
            if (connstring == "") connstring = GetConnectionString();
            SqlConnection conn = new SqlConnection(connstring);
            SqlCommand cmd = new SqlCommand(mSQLQuery, conn);
            try
            {
                conn.Open();
                cmd.CommandTimeout = 0;
                cmd.ExecuteNonQuery();
            }
            catch (Exception mex)
            {
            }
            finally
            {
                cmd.Dispose();
                conn.Close();
                conn.Dispose();
            }
        }

        public void DropTable(string mtable)
        {
            try
            {
                ctxTFAT.Database.ExecuteSqlCommand("Drop Table " + mtable);
            }
            catch (Exception ex)
            {
            }
        }
        public void SPTFAT_GenerateGroupsMain()
        {
            string @mCode = "";
            int @mCnt = 0, @mCount = 0, @mOrder = 0;
            string connstring = GetConnectionString();
            ExecuteStoredProc("update MasterGroups Set DisplayOrder=-1;", connstring);
            var MainMasterGroups = ctxTFAT.MasterGroups.Where(x => x.Code.ToString().Trim() == x.Grp.ToString().Trim()).OrderBy(x => x.Code).Select(x => x.Code).ToList();
            foreach (var item in MainMasterGroups)
            {
                @mCode = item;
                @mOrder = (ctxTFAT.MasterGroups.OrderByDescending(x => x.DisplayOrder).Select(x => x.DisplayOrder ?? 0).FirstOrDefault()) + 1;
                @mCnt = 1;
                SPTFAT_GenerateGroupStructure(@mCode, @mCnt, 0);
            }
        }
        public int SPTFAT_GenerateGroupStructure(string @mGroup, int @mCnt, int @mCount)
        {
            string connstring = GetConnectionString();
            string @mCode = "";
            int @mMore = 0, @mOrder = 0;
            var MainMasterGroups = ctxTFAT.MasterGroups.Where(x => x.Grp.ToString().Trim() == @mGroup.ToString().Trim() && x.Grp.ToString().Trim() != x.Code.ToString().Trim()).OrderBy(x => new { x.Grp, x.Code }).Select(x => x.Code).ToList();
            foreach (var item in MainMasterGroups)
            {
                @mCode = item;
                @mOrder = (ctxTFAT.MasterGroups.OrderByDescending(x => x.DisplayOrder).Select(x => x.DisplayOrder ?? 0).FirstOrDefault()) + 1;
                ExecuteStoredProc("update MasterGroups set Level=" + @mCnt + ",DisplayOrder=" + @mOrder + " Where Code='" + @mCode + "'", connstring);
                ExecuteStoredProc("update Master set Level=" + ++@mCnt + ",DisplayOrder=" + @mOrder + " Where Grp='" + @mCode + "'", connstring);
                @mMore = ctxTFAT.MasterGroups.Where(x => x.Grp.ToString().Trim() == @mCode.ToString().Trim()).ToList().Count;
                if (@mMore > 0)
                {
                    @mCnt = @mCnt + 1;
                    SPTFAT_GenerateGroupStructure(@mCode, @mCnt, @mCount);
                    @mCnt = @mCnt - 1;
                }
            }
            @mCount = @mCnt;
            return @mCount;
        }
        public void GenerateGrpWithBalance(string mDate, string mBranch, string mWhat, int mLocation, string mstyle, bool msuppress, decimal mclosingstock, bool PAL)
        {
            DropTable("ztmp_xTable");
            DropTable("ztmp_TempL");
            DropTable("ztmp_TempA");
            DropTable("ztmp_TempTFormat");
            DropTable("ztmp_Temp");
            DropTable("ztmp_Tempx");
            DropTable("ztmp_TempE");
            DropTable("ztmp_TempI");
            DropTable("ztmp_xTableMth");
            DropTable("ztmp_TempxMth");
            DropTable("ztmp_TempMth");
            DropTable("ztmp_xTableBranch");
            DropTable("ztmp_TempxBranch");
            DropTable("ztmp_TempBranch");
            string connstring = GetConnectionString();
            //SPTFAT_GenerateGroupsMain();
            //Suresh Comment Below Code
            ExecuteStoredProc("Update Master Set GroupTree=dbo.fn_GetGroupTree(Grp)", connstring);
            SqlConnection conTFAT = new SqlConnection(connstring);
            SqlCommand cmd = new SqlCommand("dbo.SPTFAT_GenerateGroupsMain", conTFAT);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 120;
            conTFAT.Open();
            cmd.ExecuteNonQuery();
            cmd = new SqlCommand(mstyle == "monthly" || mstyle == "monthlyplus" ? "dbo.SPTFAT_QuickMonthlyBalances" : (mstyle == "branch" || mstyle == "branchplus" ? "dbo.SPTFAT_QuickBranchBalances" : "dbo.SPTFAT_QuickBalances"), conTFAT);
            cmd.CommandType = CommandType.StoredProcedure;

            //Suresh Using Mbranch Then Opening Not Calculate Properly So Mbranch Set Empty
            //if (cmd.CommandText == "dbo.SPTFAT_QuickBalances")
            //{
            //    mBranch = "";
            //}

            //PAL == true ? "PAL" : "&^%";//
            var date = mDate.Replace("-", "/").Split(':');
            string mFromDate = (Convert.ToDateTime(date[0])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            string mToDate = (Convert.ToDateTime(date[1])).ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture);
            cmd.Parameters.Add("@mDate1", SqlDbType.VarChar).Value = mFromDate;
            cmd.Parameters.Add("@mDate2", SqlDbType.VarChar).Value = mToDate;
            cmd.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mBranch ?? "";
            cmd.Parameters.Add("@mWhat", SqlDbType.VarChar).Value = mWhat.Substring(0, 2);
            cmd.Parameters.Add("@mWithDetails", SqlDbType.Bit).Value = (mWhat == "BSL" || mWhat == "PLL" || mWhat == "TBL" || mWhat == "ACL" ? true : false);
            cmd.Parameters.Add("@mLocation", SqlDbType.Int).Value = mLocation;// == 0 ? 100001 : mLocation;
            cmd.Parameters.Add("@excludetype", SqlDbType.VarChar).Value = (mWhat == "TBL" || mWhat == "PL" || mWhat == "PLL" ? "PAL" : "&^%");
            cmd.Parameters.Add("@mDocString", SqlDbType.VarChar).Value = mDocString;
            cmd.Parameters.Add("@mProject", SqlDbType.VarChar).Value = "";
            cmd.Parameters.Add("@mSuppress", SqlDbType.Bit).Value = msuppress;
            cmd.Parameters.Add("@muserid", SqlDbType.VarChar).Value = muserid;// can be used for unique temp file
            if (!(mstyle == "monthly" || mstyle == "monthlyplus" || mstyle == "branch" || mstyle == "branchplus"))
            {
                cmd.Parameters.Add("@mClosingStock", SqlDbType.Float).Value = mclosingstock;
            }
            cmd.CommandTimeout = 0;
            cmd.ExecuteNonQuery();
            conTFAT.Close();
        }

        public ActionResult GetMenuURL(string moptioncode, string moptionname)
        {
            string murl = "";
            bool mrights = true;
            int mid = (int)FieldoftableNumber("TfatMenu", "ID", "OptionCode='" + moptioncode + "'");
            if (muserid.ToLower() != "super")
            {
                mrights = Convert.ToBoolean(Fieldoftable("UserRights", "xAdd", "MenuID=" + mid, "L"));
            }
            if (mrights == true)
            {
                string mmodule = "";
                if (moptionname.Contains("[") && moptionname.Contains("]"))
                {
                    mmodule = moptionname.Substring(moptionname.IndexOf('[') + 1, moptionname.IndexOf(']') - moptionname.IndexOf('[') - 1);
                }
                //Session["ModuleName"].ToString();
                if (mmodule == "")
                    mmodule = Session["ModuleName"].ToString();

                Session["ModuleName"] = mmodule;

                TfatMenu mmenu = ctxTFAT.TfatMenu.Where(z => z.OptionCode == moptioncode && z.ModuleName == mmodule).Select(x => x).FirstOrDefault();
                if (mmenu != null)
                {
                    //murl = "/" + mmenu.ParentMenu + "/" + GetControllerName(mmenu.OptionType, mmenu.Controller) + "/Index?Document=&Mode=Add&ChangeLog=Add&ViewDataId=" + HttpUtility.UrlEncode(mmenu.FormatCode.Trim()) + "&Header=" + HttpUtility.UrlEncode(mmenu.Menu.Trim()) + "&Module=" + HttpUtility.UrlEncode(mmenu.ModuleName.Trim()) + "&TableName=" + mmenu.TableName.Trim() + "&OptionType=T&OptionCode=" + HttpUtility.UrlEncode(mmenu.OptionCode.Trim()) + "&Controller2=" + mmenu.Controller.Trim() + "&AutoClose=false";
                    murl = "/" + mmenu.ParentMenu + "/" + GetControllerName(mmenu.OptionType, mmenu.Controller) + "/Index?ViewDataId=" + HttpUtility.UrlEncode(mmenu.FormatCode.Trim()) + "&Header=" + HttpUtility.UrlEncode(mmenu.Menu.Trim()) + "&Module=" + HttpUtility.UrlEncode(mmenu.ModuleName.Trim()) + "&TableName=" + mmenu.TableName.Trim() + "&MainType=" + mmenu.MainType + "&SubType=" + mmenu.SubType + "&OptionType=T&OptionCode=" + HttpUtility.UrlEncode(mmenu.OptionCode.Trim()) + "&Controller2=" + mmenu.Controller.Trim() + "&AutoClose=false";
                }
            }
            return Json(new { url = murl, Message = "Ohhh! You're not AUTHORISEd to Execute this Action." }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SearchMenu(string term)
        {
            //string mmodule = Session["ModuleName"].ToString();
            if (muserid.ToLower() == "super")
            {
                return Json((from m in ctxTFAT.TfatMenu
                             where m.Hide == false && m.AllowClick == true && m.Menu.ToLower().Contains(term.ToLower()) //m.ModuleName == mmodule && 
                             select new { Name = m.Menu + " [" + m.ModuleName + "]", Code = m.OptionCode }).OrderBy(x => x.Name).Distinct().ToArray(), JsonRequestBehavior.AllowGet); ;
            }
            else
            {
                return Json((from m in ctxTFAT.TfatMenu
                             where m.Hide == false && m.AllowClick == true && m.Menu.ToLower().Contains(term.ToLower())//m.ModuleName == mmodule && 
                             join xUserRights in ctxTFAT.UserRights.Where(z => z.Code == muserid && z.xCess == true) on m.ID equals xUserRights.MenuID
                             select new { Name = m.Menu + " [" + m.ModuleName + "]", Code = m.OptionCode }).OrderBy(x => x.Name).Distinct().ToArray(), JsonRequestBehavior.AllowGet);
            }
        }

        public void UpdateAuditTrail(string mBranch, string mOp, string OptName, string mParentKey, DateTime mDocdate, decimal mAmt, string mParty, string mLog, string mtable)
        {
            if (mOp == "") { mOp = "X"; } // access mode
            OptName = OptName.PadRight(50);

            if (String.IsNullOrEmpty(mLog))
            {
                mLog += "\n" + mParty;
            }
            if (mParentKey == null || mParentKey == "")
                mParentKey = "".PadRight(31, ' ');
            mParentKey = mParentKey.PadRight(31, ' ');


            mParty = (mParty ?? "").Trim();
            string mPartyName = NameofAccount(mParty, mtable);
            if (mPartyName == "") mPartyName = mParty;

            string mType = "", mSrl = "", mPrefix = "";
            string CatchBranch = mParentKey.Substring(0, 6);
            if (ctxTFAT.TfatBranch.Where(x => x.Code == CatchBranch).FirstOrDefault() == null)
            {
                mType = mParentKey.Substring(0, 5).Trim();
                mPrefix = mParentKey.Substring(5, 2).Trim();
                mSrl = mParentKey.Substring(7, mParentKey.Length - 7).Trim();
            }
            else
            {
                var NewParentkey = mParentKey.Substring(6, mParentKey.Length - 6).Trim();
                mType = NewParentkey.Substring(0, 5).Trim();
                mPrefix = NewParentkey.Substring(5, 2).Trim();
                mSrl = NewParentkey.Substring(7, NewParentkey.Length - 7).Trim();
            }


            string mquery =
            @"Insert into AuditTrail (AUTHIDS, AUTHORISE, ENTEREDBY, LASTUPDATEDATE, ExeInfo, UserID, EntryDate, OptionName, TableKey, Type, Prefix, Srl, EntryLog, DocDate, Amt, Opmode, Party, Branch, LocationCode, CompCode, WorkStation) 
            values ('" + (muserid ?? "") + "', 'A00', '" + (muserid ?? "") + "', '" + MMDDYY(DateTime.Now) + "' ,'', '" + (muserid ?? "") + "', '" + MMDDYYTime(DateTime.Now) + "', '" + OptName.Substring(0, 50) + "', '" + mParentKey + "', '" + mType.Trim() + "', '" + mPrefix.Trim() + "', '" + mSrl.Trim() + "','" + (mLog == "" ? Session["location"].ToString() : mLog) + "', '" + MMDDYY(mDocdate) + "', " + mAmt + ", '" + (mOp ?? "") + "','" + (mPartyName ?? "") + "' , '" + (mBranch ?? "") + "', " + mlocationcode + ", '" + (mcompcode ?? "") + "', '" + Session["MyIP"].ToString() + "')";
            try { ExecuteStoredProc(mquery); } catch { }
        }

        //public string GetIP()   --MMDDYY
        //{
        //    string ip = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
        //    if (string.IsNullOrEmpty(ip))
        //    {
        //        ip = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        //    }
        //    return ip;
        //}

        public int GetMessageId()
        {
            var nextcode = (from x in ctxTFAT.MessageLog select (int?)x.MessageID).Max() ?? 0;
            return (++nextcode);
        }



        public string GetSubType(string Code)
        {
            return ctxTFAT.DocTypes.Where(x => x.Code == Code).Select(z => z.SubType).FirstOrDefault() ?? "";
        }

        public string GetMainType(string mType, string mSub = "")
        {
            string mMain = "";
            if (mSub != "")
            {
                mMain = ctxTFAT.DocTypes.Where(x => x.SubType == mSub).Select(z => z.MainType).FirstOrDefault() ?? "";
            }
            else
            {
                mMain = ctxTFAT.DocTypes.Where(x => x.Code == mType).Select(z => z.MainType).FirstOrDefault() ?? "";
            }
            return mMain;
        }

        public ActionResult GetCurrencyRate(int Code)
        {
            decimal mCurr = ctxTFAT.CurrencyMaster.Where(x => x.Code == Code).Select(z => z.CurrRate).FirstOrDefault();
            if (mCurr == 0)
            {
                mCurr = 1;
            }

            return Json(mCurr, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetController()
        {
            string ID = "";
            ID = this.ControllerContext.RouteData.Values["controller"].ToString();

            return Json(ID = ID, JsonRequestBehavior.AllowGet);
        }


        public void SendAuthoriseMessage(string mAuthUser, string mParentKey, string mDate, string mAuthType = "A00", string mParty = "")
        {
            string mStr = "";
            string mStr2 = "";
            //string mType = mParentKey.Substring(6, 5);
            //string mSrl = mParentKey.Substring(13, 15);
            string mType = mParentKey.Substring(0, 5);
            string mPrefix = mParentKey.Substring(5, 2);
            string mSrl = mParentKey.Substring(7, mParentKey.Length - 7);
            var mArr = mAuthUser.Split('^');
            if (mAuthType.StartsWith("N"))
            {
                for (int n = 0; n < mArr.Count(); n++)
                {
                    mStr = mArr[n];
                    if (ctxTFAT.TfatUserAudit.Where(z => z.Type == mType && z.UserID == mStr).Select(x => x.SendSMS).FirstOrDefault() == true)
                    {
                        mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Mobile).FirstOrDefault() ?? "".Trim();
                        if (mStr2 != "")
                        {
                            SendSMS(mStr2, "Dear " + mStr + ",\nPlease Note that, the following Document is Pending for your Authorisation..\n\nType: " + mType + " Serial: " + mSrl + "\nDated: " + mDate, true, "", false, mParentKey);
                        }
                    }
                    if (ctxTFAT.TfatUserAudit.Where(z => z.Type == mType && z.UserID == mStr).Select(x => x.SendEmail).FirstOrDefault() == true)
                    {
                        mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Email).FirstOrDefault() ?? "".Trim();
                        if (mStr2 != "")
                        {
                            SendEMail(mStr2, "Authorisation Email from T.FAT ERP-iX9", "Dear " + mStr + ",\nPlease Note that, the following Document is Pending for your Authorisation..\n\nType: " + mType + "\nSerial: " + mSrl + "\nDated: " + mDate + "\nParty: " + mParty, false, "", "", mParentKey, "");
                        }
                    }
                    SendMessageLog(muserid, mStr, "Dear " + mStr + ",\nPlease Note that, the Following Document is pending for your authorisation..\n\nType: " + mType + " Serial: " + mSrl + "\nDated: " + mDate, true, false);
                }
            }
            else if (mAuthType.StartsWith("R"))
            {
                for (int n = 0; n < mArr.Count(); n++)
                {
                    mStr = mArr[n];
                    if (ctxTFAT.TfatUserAudit.Where(z => z.Type == mType && z.UserID == mStr).Select(x => x.SendSMS).FirstOrDefault() == true)
                    {
                        mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Mobile).FirstOrDefault() ?? "".Trim();
                        if (mStr2 != "")
                        {
                            SendSMS(mStr2, "Dear " + mStr + ",\nPlease Note that, the following Document is Rejected by Authorisation..\n\nType: " + mType + " Serial: " + mSrl + "\nDated: " + mDate, true, "", false, mParentKey);
                        }
                    }
                    //else
                    //{
                    //    // if no rule is specified then also send alert to the entered by user
                    //    mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Mobile).FirstOrDefault() ?? "".Trim();
                    //    if (mStr2 != "")
                    //    {
                    //        SendSMS(mStr2, "Dear " + mStr + ",\nPlease Note that, the following Document is Rejected by Authorisation..\n\nType: " + mType + " Serial: " + mSrl + "\nDated: " + mDate, true, "", false, mParentKey);
                    //    }
                    //}
                    if (ctxTFAT.TfatUserAudit.Where(z => z.Type == mType && z.UserID == mStr).Select(x => x.SendEmail).FirstOrDefault() == true)
                    {
                        mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Email).FirstOrDefault() ?? "".Trim();
                        if (mStr2 != "")
                        {
                            SendEMail(mStr2, "Authorisation Email from T.FAT ERP-iX9", "Dear " + mStr + ",\nPlease Note that, the following Document Rejected by Authorisation..\n\nType: " + mType + "\nSerial: " + mSrl + "\nDated: " + mDate + "\nParty: " + mParty, false, "", "", mParentKey, "");
                        }
                    }
                    //else
                    //{
                    //    // if no rule is specified then also send alert to the entered by user
                    //    mStr2 = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mStr).Select(x => x.Email).FirstOrDefault() ?? "".Trim();
                    //    if (mStr2 != "")
                    //    {
                    //        SendEMail(mStr2, "Authorisation Email from T.FAT ERP-iX9", "Dear " + mStr + ",\nPlease Note that, the following Document Rejected by Authorisation..\n\nType: " + mType + "\nSerial: " + mSrl + "\nDated: " + mDate + "\nParty: " + mParty, false, "", "", mParentKey, "");
                    //    }
                    //}
                    SendMessageLog(muserid, mStr, "Dear " + mStr + ",\nPlease Note that, the Following Document is Rejected by Authorisation..\n\nType: " + mType + " Serial: " + mSrl + "\nDated: " + mDate, true, true);
                }
            }
        }

        public void SendMessageLog(string mFrom, string mTo, string mMSG, bool mAUTHORISE, bool mSendEmailSMS)
        {
            var mArr = mTo.Split(';');
            string mStr = "";
            string mEmails = "";
            string mMobiles = "";
            for (int n = 0; n < mArr.Count(); n++)
            {
                if (mArr[n] != "")
                {
                    MessageLog mlog = new MessageLog();
                    mlog.Code = mArr[n];
                    mlog.FromIDs = mFrom;
                    mlog.mDate = DateTime.Now;
                    //mlog.mTime = DateTime.Now;
                    mlog.SendNow = true;
                    mlog.Message = mMSG;
                    mlog.MessageRead = false;
                    mlog.Category = 100002;
                    mlog.ReplyRequest = false;
                    mlog.AUTHIDS = muserid;
                    mlog.AUTHORISE = "A00";
                    mlog.ENTEREDBY = muserid;
                    mlog.LASTUPDATEDATE = DateTime.Now;
                    mlog.MessageID = mlog.RECORDKEY;
                    mlog.MessageRead = false;
                    mlog.Prefix = "";
                    mlog.ReplyRequest = false;
                    mlog.Srl = "";
                    mlog.TableKey = "";
                    mlog.Type = "";
                    ctxTFAT.MessageLog.Add(mlog);
                    ctxTFAT.SaveChanges();
                    string mID = mArr[n];
                    mStr = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mID && z.RecMsg == true).Select(x => x.Email).FirstOrDefault() ?? "".Trim();
                    if (mStr.Trim() != "")
                    {
                        mEmails = mEmails + mStr + ";";
                    }

                    mStr = ctxTFAT.TfatPass.Where(z => z.Locked == false && z.Code == mID && z.RecSMS == true).Select(x => x.Mobile).FirstOrDefault() ?? "".Trim();
                    if (mStr.Trim() != "")
                    {
                        mMobiles = mMobiles + mStr + ";";
                    }
                }
            }

            if (mSendEmailSMS == true)
            {
                if (mEmails != "")
                {
                    SendEMail(mEmails, "Auto-Alert from T.FAT ERP-iX9", mMSG);
                }

                if (mMobiles != "")
                {
                    SendSMS(mStr, mMSG, true, "");
                }
            }
        }



        public ActionResult SendInwardMsgLog(string mTable, string mParentKey, string mTrx, int mSno)
        {
            //if (mTrx == "G")
            //{
            // send intimation to the receiving store
            int mStore = 0;
            string mSubType = "";
            string mParty = "";
            DateTime mDocDate = DateTime.Now;
            var mobj2 = ctxTFAT.Stock.Select(x => new
            {
                x.Code,
                x.SubType,
                x.DocDate,
                x.Qty,
                x.Store,
                x.ParentKey,
                x.Party
            }).Where(z => z.ParentKey == mParentKey && z.Qty > 0).FirstOrDefault();
            if (mobj2 == null)
            {
                mStore = mobj2.Store;
                mSubType = mobj2.SubType;
                mParty = mobj2.Party;
                mDocDate = mobj2.DocDate;
            }

            var mobj = ctxTFAT.Stock.Select(x => new
            {
                x.Code,
                x.SubType,
                x.DocDate,
                x.Qty,
                x.Store,
                x.ParentKey,
                x.Party
            }).Where(z => z.ParentKey == mParentKey && z.Qty > 0).ToList();
            if (mobj == null)
            {
                return Json(new
                {
                    Status = "Error",
                    Message = "No items found.."
                }, JsonRequestBehavior.AllowGet);
            }
            //}
            //if (mTrx = "T") {
            //.Open "Select DocDate,code,Qty,Store,Party From " & mTable & " Where Type='" + mType + "' && Prefix='" + mPrefix + "' && Srl='" + mSrl + "' && Branch='" + mBranch + "' && Left(Stock.AUTHORISE,1) = 'A' && Stock.NotInStock=0 && Sno <> '00001'", gsdbDbf, adOpenForwardOnly, adLockReadOnly
            //Elseif (mTrx = "I") {
            //.Open "Select IssueDate as DocDate,Productcode as Code,IssueQty as Qty,PartyCode From " & mTable & " Where Type='" + mType + "' && Prefix='" + mPrefix + "' && Srl='" + mSrl + "' && Branch='" + mBranch + "' ", gsdbDbf, adOpenForwardOnly, adLockReadOnly
            //Elseif (mTrx = "Q") {
            //.Open "Select DocDate,code,Qty,Store From " & mTable & " Where Type='" + mType + "' && Prefix='" + mPrefix + "' && Srl='" + mSrl + "' && Branch='" + mBranch + "' && Sno='" + mSno + "'", gsdbDbf, adOpenForwardOnly, adLockReadOnly
            bool mSendSMS = false;
            bool mSendEmail = false;
            string mMobile = "";
            string mEmail = "";
            string mPerson = "";

            var mStores = ctxTFAT.Stores.Select(x => new
            {
                x.Code,
                x.EmailAlert,
                x.Mobile,
                x.Email,
                x.SMSAlert,
                x.StoreIncharge
            }).Where(z => z.Code == mStore).FirstOrDefault();
            if (mStores != null)
            {
                mSendSMS = mStores.SMSAlert;
                mSendEmail = mStores.EmailAlert;
                mMobile = mStores.Mobile;
                mEmail = mStores.Email;
                if (mStores.StoreIncharge != null)
                {
                    mPerson = ctxTFAT.Employee.Where(z => z.EmpID == mStores.StoreIncharge).Select(x => x.Name).FirstOrDefault() ?? "".Trim();
                }
            }

            if (mSendEmail == false && mSendSMS == false)
            {
                return Json(new
                {
                    Status = "Error",
                    Message = "Alerts not configured for the Store"
                }, JsonRequestBehavior.AllowGet);
            }

            string mMSG = "Material Transferred Srl: " + mParentKey.Substring(13, 15) + " Dt:" + mDocDate;
            if (mSubType == "GT")
            {
                mMSG += " from Store:" + NameofAccount(Convert.ToInt32(mParty), "T");
            }

            mMSG += " Items:";
            foreach (var mlist in mobj)
            {
                mMSG = mMSG + ", " + mlist.Code + "(" + mlist.Qty + ")";
            }

            MessageLog mlog = new MessageLog();
            mlog.FromIDs = muserid;
            mlog.Code = mPerson;
            mlog.mDate = DateTime.Now;
            //mlog.mTime = DateTime.Now;
            mlog.SendNow = true;
            mlog.Message = mMSG;
            mlog.MessageRead = false;
            mlog.Category = 100003;
            mlog.ReplyRequest = false;
            ctxTFAT.MessageLog.Add(mlog);
            ctxTFAT.SaveChanges();
            if (mSendEmail && mEmail.Trim() != "")
            {
                SendEMail(mEmail, "Auto-Alert from T.FAT ERP-iX9", mMSG, false, "", "", mParentKey);
            }

            if (mSendSMS && mMobile.Trim() != "")
            {
                SendSMS(mMobile, mMSG, true, mParty, false, mParentKey);
            }

            return Json(new
            {
                Status = "Success",
                Message = "Message Processed Successfully.."
            }, JsonRequestBehavior.AllowGet);
        }

        public int GetRandomNumber()
        {
            Random rnd = new Random();
            return rnd.Next(100000, 999999);
        }

        public DateTime GetFirstDate()
        {
            return ctxTFAT.TfatPerd.Where(z => z.Code == mcompcode).OrderBy(x => x.StartDate).Select(x => x.StartDate).FirstOrDefault();
        }

        public string GetDefaultCode(string mformat)
        {
            string mmformat = (ctxTFAT.ReportHeader.Where(z => z.SubCodeOf == mformat && z.DefaultReport == true).Select(x => x.Code).FirstOrDefault() ?? mformat).Trim();
            if (mmformat == "") mmformat = mformat;
            return mmformat;
        }

        #region parameters	
        [HttpPost]
        public ActionResult GetParameterValues(string mformat)
        {
            List<string> inputlist = new List<string>();
            List<string> inputlist2 = new List<string>();
            string mparastring = "";
            string maccgroups = "";
            string mitemgroups = "";
            string msubtypes = "";
            string minputpara = "";
            string mtabs = "";
            var result = ctxTFAT.ReportHeader.Select(x => new { x.ParaString, x.AccGroups, x.ItemGroups, x.SubTypes, x.Code, x.InputPara, x.Tabs }).Where(z => z.Code == mformat).FirstOrDefault();
            if (result != null)
            {
                mparastring = result.ParaString;
                maccgroups = result.AccGroups;
                mitemgroups = result.ItemGroups;
                msubtypes = result.SubTypes;
                minputpara = result.InputPara;
                mtabs = result.Tabs;
                inputlist = (result.InputPara == "" || result.InputPara == null) ? inputlist : result.InputPara.Split('~').ToList();
            }
            GridOption Model = new GridOption();
            foreach (var ai in inputlist)
            {
                string a1 = "";
                string a2 = "";
                if (ai != null && ai != "")
                {
                    var a = ai.Split('^');
                    a1 = a[0];
                    if (a[1].Trim() != "")
                    {
                        a2 = GetQueryText(a[1]);
                    }
                    inputlist2.Add(a1 + "^" + a2);
                }
            }

            Model.AddOnParaList = inputlist2;
            string html = ViewHelper.RenderPartialView(this, "ReportAddOnGrid", Model);
            return Json(new
            {
                tabs = mtabs,
                parastring = mparastring,
                itemgroup = mitemgroups,
                accgroup = maccgroups,
                sub = msubtypes,
                inputpara = minputpara,
                inputlist = inputlist,
                Status = "Success",
                Html = html,
                Message = ""
            }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetViewCodes(string mSubCodeOf)
        {
            var result = ctxTFAT.ReportHeader.Where(x => x.SubCodeOf == mSubCodeOf && !x.Code.EndsWith(".bak")).Select(m => new
            {
                Value = m.Code,
                Text = m.Code
            }).OrderBy(n => n.Value).ToList();
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult SaveParameters(GridOption Model)
        {
            ppara01 = "";
            ppara02 = "";
            ppara03 = "";
            ppara04 = "";
            ppara05 = "";
            ppara06 = "";
            ppara07 = "";
            ppara08 = "";
            ppara09 = "";
            ppara10 = "";
            ppara11 = "";
            ppara12 = "";
            ppara13 = "";
            ppara14 = "";
            ppara15 = "";
            ppara16 = "";
            ppara17 = "";
            ppara18 = "";
            ppara19 = "";
            ppara20 = "";
            ppara21 = "";
            ppara22 = "";
            ppara23 = "";
            ppara24 = "";
            Model.SelectContent = (Model.SelectContent ?? "").Replace("~", ",");
            var mudf = (Model.SelectContent ?? "").Trim().Split('|');
            mpara = "";
            for (var x = 0; x < mudf.Length; x++)
            {
                if (mudf[x].Trim() != "")
                {
                    string mval = mudf[x];
                    if (mval.StartsWith("["))
                    {
                        mval = mval.Substring(1, mval.IndexOf("]") - 1);
                    }
                    mpara = mpara + "para" + (x + 1).ToString().PadLeft(2, '0') + "^" + mval + "~";
                    switch (x + 1)
                    {
                        case 1:
                            ppara01 = mval;
                            break;
                        case 2:
                            ppara02 = mval;
                            break;
                        case 3:
                            ppara03 = mval;
                            break;
                        case 4:
                            ppara04 = mval;
                            break;
                        case 5:
                            ppara05 = mval;
                            break;
                        case 6:
                            ppara06 = mval;
                            break;
                        case 7:
                            ppara07 = mval;
                            break;
                        case 8:
                            ppara08 = mval;
                            break;
                        case 9:
                            ppara09 = mval;
                            break;
                        case 10:
                            ppara10 = mval;
                            break;
                        case 11:
                            ppara11 = mval;
                            break;
                        case 12:
                            ppara12 = mval;
                            break;
                        case 13:
                            ppara13 = mval;
                            break;
                        case 14:
                            ppara14 = mval;
                            break;
                        case 15:
                            ppara15 = mval;
                            break;
                        case 16:
                            ppara16 = mval;
                            break;
                        case 17:
                            ppara17 = mval;
                            break;
                        case 18:
                            ppara18 = mval;
                            break;
                        case 19:
                            ppara19 = mval;
                            break;
                        case 20:
                            ppara20 = mval;
                            break;
                        case 21:
                            ppara21 = mval;
                            break;
                        case 22:
                            ppara22 = mval;
                            break;
                        case 23:
                            ppara23 = mval;
                            break;
                        case 24:
                            ppara24 = mval;
                            break;
                    }
                }
            }
            if (Model.IsFormatSelected == true)
            {
                ctxTFAT.Database.ExecuteSqlCommand("Update ReportHeader Set DefaultReport=0 Where SubCodeOf='" + Model.OptionCode + "'");
                ctxTFAT.Database.ExecuteSqlCommand("Update ReportHeader Set DefaultReport=-1 Where Code='" + Model.ViewDataId + "'");
            }
            return Json(new
            {
                Status = "Success",
                Message = ""
            }, JsonRequestBehavior.AllowGet);
        }
        #endregion parameters

        public string GetGroupByField(string mformat)
        {
            return (ctxTFAT.ReportHeader.Where(z => z.Code == mformat).Select(m => m.SubTotalOn).FirstOrDefault() ?? "").Trim(); ;
        }

        public string GetQueryText(string sql)
        {
            string bca;
            if (sql.Contains("|"))  // | was ,
            {
                bca = sql;
            }
            else if (sql.Contains("`"))  // used for multiple check list selection
            {
                bca = sql;
            }
            else
            {
                string mchar = "|";
                if (sql.StartsWith("@"))  // used for multiple check list selection
                {
                    mchar = "`";
                    sql = sql.Substring(1);
                }
                StringBuilder addonT = new StringBuilder();
                DataTable mDt2 = GetDataTable(sql, GetConnectionString());
                if (mDt2.Rows.Count > 0)
                {
                    for (var i = 0; i < mDt2.Rows.Count; i++)
                    {
                        bca = (mDt2.Rows[i][0].ToString() == "" || mDt2.Rows[i][0].ToString() == null) ? "" : mDt2.Rows[i][0].ToString();
                        addonT.Append(bca + mchar);  // | was ,
                    }
                }
                string addonVT = addonT.ToString().Trim();
                if (addonVT != "")
                {
                    bca = addonVT;
                    //bca = CutRightString(addonVT, 1, mchar); // ` character is required at view, so dont remove
                }
                else
                {
                    bca = sql;
                }

                //if (addonVT != "")
                //{
                //    int result1 = addonVT.Length - addonVT.Replace(mchar, "").Length;  // | was ,
                //    if (result1 > 1)
                //    {
                //        bca = addonVT.Remove(addonVT.Length - 1);
                //    }
                //    else
                //    {
                //        bca = addonVT;
                //    }
                //}
                //else
                //{
                //    bca = sql;
                //}
            }
            return bca;
        }

        public string ReplaceVariables(string mstr)
        {
            mstr = mstr.Replace("%Branch", mbranchcode);
            mstr = mstr.Replace("%branch", mbranchcode);
            mstr = mstr.Replace("%StartDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"].ToString())));
            mstr = mstr.Replace("%LastDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"].ToString())));
            mstr = mstr.Replace("%RepStartDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["StartDate"].ToString())));
            mstr = mstr.Replace("%RepEndDate", MMDDYY(Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"].ToString())));
            mstr = mstr.Replace("%ToDate", MMDDYY(DateTime.Today));
            mstr = mstr.Replace("%Today", MMDDYY(DateTime.Today));
            mstr = mstr.Replace("%CompCode", mcompcode);
            mstr = mstr.Replace("%compcode", mcompcode);
            mstr = mstr.Replace("%LocationCode", mlocationcode.ToString());
            mstr = mstr.Replace("%locationcode", mlocationcode.ToString());
            return mstr;
        }

        public string GetQueryTextAddon(string msql)
        {
            string bca;
            if (msql.Contains("^"))
            {
                bca = msql;
            }
            else
            {
                StringBuilder addonT = new StringBuilder();

                if (msql.Contains("%"))
                    msql = ReplaceVariables(msql);

                DataTable mDt2 = GetDataTable(msql, GetConnectionString());
                if (mDt2.Rows.Count > 0)
                {
                    for (var i = 0; i < mDt2.Rows.Count; i++)
                    {
                        bca = (mDt2.Rows[i][0].ToString() == "" || mDt2.Rows[i][0].ToString() == null) ? "" : mDt2.Rows[i][0].ToString();
                        addonT.Append(bca + "^");
                    }
                }
                string addonVT = addonT.ToString();
                if (addonVT != "")
                {
                    bca = addonVT.Remove(addonVT.Length - 1);
                }
                else
                {
                    bca = msql;
                }
            }
            return bca;
        }

        public ActionResult GenerateChart(string code)
        {
            //System.Web.HttpContext.Current.Session["LastDate"].ToString();
            ArrayList xvalues = new ArrayList();
            ArrayList yvalues = new ArrayList();
            string cmdtxt = "";
            //@"Select FORMAT(DocDate, 'MMM') + ' ' + substring(CONVERT(varchar, docdate, 1),7,2) as MonthName, Sum(Amt) as Amt, Cast(year(docdate) as varchar) + Substring(CONVERT(varchar, docdate, 1), 1, 2) from Sales Group by FORMAT(DocDate, 'MMM') + ' ' + substring(CONVERT(varchar, docdate, 1),7,2), cast(year(docdate) as varchar) + Substring(CONVERT(varchar, docdate, 1), 1, 2) order by cast(year(docdate) as varchar) + Substring(CONVERT(varchar, docdate, 1), 1, 2)";
            var mobj = ctxTFAT.ActiveObjects.Where(z => z.Code == code).Select(x => new { x.SizeType, x.Query, x.Name, x.ObjectType }).FirstOrDefault();
            if (mobj == null)
            {
                return null;
            }
            else
            {
                if (mobj.Query == null) return null;
            }
            cmdtxt = mobj.Query;
            // accounting period
            cmdtxt = ReplaceVariables(cmdtxt);
            //ctxTFAT.ActiveObjects.Where(z => z.Code == code).Select(x => x.Query).FirstOrDefault();
            DataTable dt = GetDataTable(cmdtxt, GetConnectionString());
            for (int x = 0; x <= dt.Rows.Count - 1; x++)
            {
                xvalues.Add(dt.Rows[x][0]);
                yvalues.Add(dt.Rows[x][1]);
            }
            //xyz.ToList().ForEach(x => xvalues.Add(x.Key));
            //xyz.ToList().ForEach(x => yvalues.Add(x.Sum(z=>z.Amt)));
            //new Chart(width: 800, height: 400, theme: ChartTheme.Blue)
            string PlainWhite = "<Chart BackColor=\"White\" BackGradientStyle=\"TopBottom\" BackSecondaryColor=\"White\" BorderColor=\"White\" BorderlineDashStyle=\"Solid\" BorderWidth=\"0\" Palette=\"BrightPastel\">\r\n    <ChartAreas>\r\n        <ChartArea Name=\"Default\" _Template_=\"All\" BackColor=\"White\" BackGradientStyle=\"TopBottom\" BackSecondaryColor=\"White\" BorderColor=\"0, 0, 0, 0\" BorderDashStyle=\"Solid\" ShadowColor=\"Transparent\" /> \r\n    </ChartAreas>\r\n    <Legends>\r\n        <Legend _Template_=\"All\" BackColor=\"Transparent\" Font=\"Tahoma, 8.25pt, style=Bold\" IsTextAutoFit=\"False\" /> \r\n    </Legends>\r\n    <BorderSkin SkinStyle=\"0\" /> \r\n  </Chart>";
            //new Chart(width: (mobj.SizeType == "1" ? 1200 : 600), height: 400, theme: PlainWhite)
            //.AddTitle("")
            //.AddLegend()
            //.AddSeries("Default", chartType: mobj.ObjectType, xValue: xvalues, yValues: yvalues)
            //.Write("png");
            new Chart(width: (mobj.SizeType == "1" ? 150 : 150), height: 150, theme: PlainWhite)
            .AddTitle("")
            .AddSeries("Default", chartType: mobj.ObjectType, xValue: xvalues, yValues: yvalues)
            .Write("png");
            return null;
        }

        public ActionResult GetReportFormat(GridOption Model)
        {
            List<GridOption> Grlist = new List<GridOption>();
            var list = ctxTFAT.TfatSearch.Where(x => x.Code == Model.ViewDataId).Select(x => x).ToList();
            if (list != null)
            {
                foreach (var a in list)
                {
                    Grlist.Add(new GridOption
                    {
                        Header = a.ColHead,
                        IsHidden = a.IsHidden,
                        Sno = a.Sno.ToString(),
                    });
                }
            }
            Model.list = Grlist;
            var html = ViewHelper.RenderPartialView(this, "~/Views/Shared/TfatSearchUpdate.cshtml", Model);
            var jsonResult = Json(new
            {
                Model.list,
                Html = html
            }, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        public ActionResult SaveReportFormat(GridOption Model)
        {
            var ff = Model.list.Where(x => x.Header == "Customer").FirstOrDefault();
            var docformat = ctxTFAT.TfatSearch.Where(x => x.Code == Model.ViewDataId).ToList();
            if (docformat.Count() > 0)
            {
                var HideColums = Model.list.Where(x => x.IsHidden == true).Select(x => x.Sno).ToList();
                docformat.Where(x => HideColums.Contains(x.Sno.ToString())).ToList().ForEach(x => x.IsHidden = true);

                var UnHideColums = Model.list.Where(x => x.IsHidden == false).Select(x => x.Sno).ToList();
                docformat.Where(x => UnHideColums.Contains(x.Sno.ToString())).ToList().ForEach(x => x.IsHidden = false);

                ctxTFAT.SaveChanges();
            }

            //foreach (var a in Model.list)
            //{
            //    int mSno = Convert.ToInt32(a.Sno);
            //    var docformat = ctxTFAT.TfatSearch.Where(x => x.Code == Model.ViewDataId && x.Sno == mSno).Select(x => x).FirstOrDefault();
            //    docformat.IsHidden = a.IsHidden;
            //    ctxTFAT.Entry(docformat).State = EntityState.Modified;
            //    ctxTFAT.SaveChanges();
            //}

            return Json(new { Status = "Success" }, JsonRequestBehavior.AllowGet);
        }

        public string GetItemGroupTree(string Grp)
        {
            string mTree = "";
            string mStr = @"select dbo.fn_GetGroupTreeItem('" + Grp + "')";
            DataTable smDt = GetDataTable(mStr, GetConnectionString());
            if (smDt.Rows.Count > 0)
            {
                mTree = smDt.Rows[0][0].ToString() + "@";
            }

            return mTree;
        }

        public ActionResult GetEmail(string mcode)
        {
            string memail = ctxTFAT.Address.Where(z => z.Code == mcode && z.Sno == 0).Select(x => x.Email).FirstOrDefault() ?? "";
            return Json(new { Status = "Success", data = memail }, JsonRequestBehavior.AllowGet);
        }

        public bool CheckUserRights(string mode, string moptioncode)
        {
            int mid = ctxTFAT.TfatMenu.Where(z => z.OptionCode == moptioncode).Select(x => x.ID).FirstOrDefault();
            bool mallow = true;
            if (muserid.ToLower() != "super")
            {
                mallow = ctxTFAT.UserRights.Where(z => z.Code == muserid && z.MenuID == mid).Select(x => mode == "Add" ? x.xAdd : (mode == "Edit" ? x.xEdit : x.xDelete)).FirstOrDefault();
            }
            return mallow;
        }

        public ActionResult GetURL(string mdocument, string mode = "Edit")
        {
            if (mdocument.StartsWith("%"))
            {
                mdocument = mdocument.Substring(1);
                mode = "Delete";
            }
            string murl = "", mPrefix = "";
            try
            {
                bool UseNewKey = true;
                string CheckBranch = mdocument.Substring(6, 6);
                string mtype = "";
                string mBranch = mdocument.Substring(0, 6);
                if (CheckBranch.Trim() != mBranch.Trim())
                {
                    UseNewKey = false;
                    mtype = mdocument.Substring(6, 5);
                }
                else
                {
                    mtype = mdocument.Substring(12, 5);
                }
                mBranch = mbranchcode;
                mPrefix = ctxTFAT.Ledger.Where(x => x.Branch + x.ParentKey == mdocument).Select(x => x.Prefix).FirstOrDefault();
                if (mtype == "Trip0")
                {
                    if (UseNewKey)
                    {
                        mdocument = mdocument.Substring(19, (mdocument.Length - 19));
                    }
                    else
                    {
                        mdocument = mdocument.Substring(13, (mdocument.Length - 13));
                    }
                    //mdocument = mdocument.Substring(16, 6);
                }
                else if (mtype == "FM000" || mtype == "FMH00")
                {
                    if (UseNewKey)
                    {
                        mdocument = mdocument.Substring(6, 13) + "001" + mdocument.Substring(19, (mdocument.Length - 19));
                    }
                    else
                    {
                        mdocument = mdocument.Substring(6, 7) + "001" + mdocument.Substring(13, (mdocument.Length - 13));
                    }
                }

                int ID = GetId(mtype.Trim());


                var mrights = ctxTFAT.UserRights.Where(z => z.Code == muserid && z.MenuID == ID).FirstOrDefault();

                if (mrights != null || muserid.ToLower() == "super")
                {
                    if (mBranch.Trim() != mbranchcode.Trim())
                    {
                        return Json(new { url = murl, Message = "View Only Current Branch Document." }, JsonRequestBehavior.AllowGet);
                    }
                    string msubtype = GetSubType(mtype);
                    var mstr = ctxTFAT.TfatMenu.Select(x => new { x.ID, x.OptionCode, x.TableName, x.ModuleName, x.Menu, x.Controller, x.FormatCode, x.SubType, x.ParentMenu }).Where(z => z.ID == ID && z.ModuleName == "Transactions" && (z.ParentMenu == "Accounts" || z.ParentMenu == "Logistics" || z.ParentMenu == "Vehicles")).FirstOrDefault();
                    murl = "/" + mstr.ParentMenu + "/" + mstr.Controller + "/Index?Document=" + mdocument + "&Mode=" + mode + "&ChangeLog=" + mode + "&ViewDataId=" + HttpUtility.UrlEncode(mstr.FormatCode.Trim()) + "&Header=" + HttpUtility.UrlEncode(mstr.Menu.Trim()) + "&Module=" + HttpUtility.UrlEncode(mstr.ModuleName.Trim()) + "&TableName=" + mstr.TableName.Trim() + "&Prefix=" + mPrefix.Trim() + "&OptionType=T&OptionCode=" + HttpUtility.UrlEncode(mstr.OptionCode.Trim()) + "&Controller2=" + mstr.Controller.Trim() + "&LedgerThrough=true";
                }
                return Json(new { url = murl, Message = "In-sufficient Rights to Execute this Action." }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { url = "", Message = "Error." }, JsonRequestBehavior.AllowGet);
            }
        }

        public int GetId(string Type)
        {
            int ID = 0;

            if (Type == "CPO00")
            {
                ID = 2077;
            }
            else if (Type == "FMP00")
            {
                ID = 2064;
            }
            else if (Type == "SLR00")
            {
                ID = 2074;
            }
            else if (Type == "CMM00")
            {
                ID = 2070;
            }
            else if (Type == "BRC00")
            {
                ID = 2184;
            }
            else if (Type == "SLW00")
            {
                ID = 2188;
            }
            else if (Type == "PUR00")
            {
                ID = 2073;
            }
            else if (Type == "GJV00")
            {
                ID = 2076;
            }
            else if (Type == "COT00")
            {
                ID = 2183;
            }
            else if (Type == "Trip0")
            {
                ID = 2081;
            }
            else if (Type == "FM000")
            {
                ID = 2053;
            }
            else if (Type == "BPM00")
            {
                ID = 2186;
            }
            else if (Type == "LR000")
            {
                ID = 2060;
            }
            else if (Type == "FMH00")
            {
                ID = 2456;
            }
            else if (Type == "LC000")
            {
                ID = 2056;
            }

            return ID;
        }

        public string RecToString(string mSQL, string mChar = "^")
        {
            string mreturn = "";
            DataTable mdt = GetDataTable(mSQL);
            for (int mrow = 0; mrow < mdt.Rows.Count; mrow++)
            {
                for (int mcol = 0; mcol < mdt.Columns.Count; mcol++)
                {
                    mreturn += mdt.Rows[mrow][mcol].ToString() + mChar;
                }
            }
            mreturn = CutRightString(mreturn, 1, mChar);
            mdt.Dispose();
            return mreturn;
        }

        public string GetAsonDate(string mDate)
        {
            if (mDate.Contains("undefined:"))
            {
                mDate.Replace("undefined:", "01-01-2000:");
            }
            return mDate;
        }

        public double ConvertQty(string mcode, double mqty, string mfromunit, string mtounit)
        {
            decimal mFactor;
            string mOp;
            double convertqty = mqty;
            //if (mtounit == "") mtounit = ctxTFAT.ItemMaster.Where(z => z.Code == mcode).Select(x => x.Unit.Trim()).FirstOrDefault() ?? "";
            if (mtounit == "") mtounit = mfromunit;
            if (mtounit == mfromunit)
            {
                return convertqty;
            }
            var munitconv = ctxTFAT.UnitConversion.Where(x => x.Code == mcode && x.Unit == mfromunit && x.Unit2 == mtounit).Select(x => new { x.Operator, x.Factor }).FirstOrDefault();
            if (munitconv != null && munitconv.Factor != 0)
            {
                switch (munitconv.Operator)
                {
                    case "*":
                        convertqty = mqty * (double)munitconv.Factor;
                        break;
                    case "/":
                        convertqty = mqty / (double)munitconv.Factor;
                        break;
                    case "-":
                        convertqty = mqty - (double)munitconv.Factor;
                        break;
                    case "+":
                        convertqty = mqty + (double)munitconv.Factor;
                        break;
                    default:
                        convertqty = mqty;
                        break;
                }
            }
            else
            {
                munitconv = ctxTFAT.UnitConversion.Where(x => x.Code == mcode && x.Unit2 == mfromunit && x.Unit == mtounit).Select(x => new { x.Operator, x.Factor }).FirstOrDefault();
                if (munitconv != null)
                {
                    switch (munitconv.Operator)
                    {
                        case "*":
                            convertqty = mqty / (double)munitconv.Factor;
                            break;
                        case "/":
                            convertqty = mqty * (double)munitconv.Factor;
                            break;
                        case "-":
                            convertqty = mqty + (double)munitconv.Factor;
                            break;
                        case "+":
                            convertqty = mqty - (double)munitconv.Factor;
                            break;
                        default:
                            convertqty = mqty;
                            break;
                    }
                }
            }
            return convertqty;
        }

        public double CalculateQty2(string mcode, string munit, string munit2, double mqty)
        {
            double mqty2 = mqty;
            var munitconv = ctxTFAT.UnitConversion.Where(x => x.Code == mcode && x.Unit == munit && x.Unit2 == munit2).Select(x => new { x.Operator, x.Factor }).FirstOrDefault();
            if (munitconv != null && munitconv.Factor != 0)
            {
                switch (munitconv.Operator)
                {
                    case "*":
                        mqty2 = mqty * (double)munitconv.Factor;
                        break;
                    case "/":
                        mqty2 = mqty / (double)munitconv.Factor;
                        break;
                    case "-":
                        mqty2 = mqty - (double)munitconv.Factor;
                        break;
                    case "+":
                        mqty2 = mqty + (double)munitconv.Factor;
                        break;
                    default:
                        mqty2 = mqty;
                        break;
                }
            }
            return mqty2;
        }

        #region emailroutines
        public ActionResult GetEmailTemplates()
        {
            List<string> CodeList = new List<string>();
            var result = ctxTFAT.MsgTemplate.Select(m => new
            {
                Value = m.Code,
                Text = m.Subject
            }).OrderBy(n => n.Text).ToList();
            var jsonResult = Json(result, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue; // to enhance size of image attachment
            return jsonResult;
        }

        public ActionResult GetMsgTextByTemplate(string Code)
        {
            string EmailTemplate = ctxTFAT.MsgTemplate.Where(x => x.Code == Code).Select(x => x.MsgText).FirstOrDefault() ?? "";
            return Json(new { EmailTemplate }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult EmailData(PurchaseVM Model)
        {
            List<DocFormats> mFormats = new List<DocFormats>();
            mFormats = ctxTFAT.DocFormats.Where(x => x.Type == Model.Document.Substring(6, 5) && x.SendEmail == true).Select(x => x).ToList();
            bool musercr = ctxTFAT.DocTypes.Where(x => x.Code == Model.Document.Substring(6, 5)).Select(x => x.UseCR).FirstOrDefault();
            if (musercr == false)
            {
                EmailDocumentCrystal(Model.Document, "PDF", true, mFormats, Model.EmailTo, Model.EmailCC, Model.EmailBCC, Model.EmailSubject, Model.EmailMessage, Model.ImageStr, Model.FileName);
                return Json(new { Status = "Success", }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                EmailDocumentCrystal(Model.Document, "PDF", true, mFormats, Model.EmailTo, Model.EmailCC, Model.EmailBCC, Model.EmailSubject, Model.EmailMessage, Model.ImageStr, Model.FileName);
                return Json(new { Status = "Success", }, JsonRequestBehavior.AllowGet);
            }
        }

        public void EmailDocumentCrystal(string Document, string mWhat, bool SendEmail, List<DocFormats> mFormats, string mToEmail = "", string mCC = "", string mbCC = "", string mSubject = "", string mMessage = "", string AttachFileData = "", string AttachFileName = "")
        {
            if (mWhat == "")
            {
                mWhat = "PDF";
            }
            string mSubType = ctxTFAT.DocTypes.Where(x => x.Code == Document.Substring(6, 5)).Select(x => x.SubType).FirstOrDefault();
            string mParentKey = Document.Substring(6, Document.Length - 6);
            foreach (var a in mFormats)
            {
                if (a.FormatCode == "")
                {
                    a.FormatCode = "NoFormatDefined";
                }
                DataTable dtreport = new DataTable();
                SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
                SqlCommand cmd = new SqlCommand("SPDoc_" + a.StoredProc, tfat_conx); //name of the storedprocedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 120;
                cmd.Parameters.AddWithValue("@mTableKey", mParentKey);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtreport);
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), a.FormatCode + ".rpt"));
                rd.SetDataSource(dtreport);
                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                try
                {
                    Stream mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    mstream.Seek(0, SeekOrigin.Begin);
                    SendMultiReportEMail(mstream, mSubType, mParentKey, "", mbranchcode + "_" + mParentKey + ".pdf", mToEmail, mCC, mbCC, mSubject, mMessage, AttachFileData, AttachFileName);
                    //SendMultiReportEMail(mstream, mSubType, mParentKey, "", a.FormatCode + ".pdf", mToEmail, mCC, mbCC, mSubject, mMessage);
                }
                catch
                {
                    rd.Close();
                    rd.Dispose();
                    throw;
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
            }
        }

        public void SendMultiReportEMail(Stream mstream, string mSubType, string Document, string mCode, string mPDF, string mToEmail, string mCC, string mbCC, string mSubject, string mMessage, string AttachFileDat = "", string AttachFileName = "")
        {
            string connstring = GetConnectionString();
            try
            {
                string mTable = GetTableName(mSubType);
                if (mCode == "")
                {
                    string mQuery = @"Select Top 1 Code from " + mTable + " Where TableKey='" + Document + "'";
                    DataTable smDt = GetDataTable(mQuery, connstring);
                    if (smDt.Rows.Count > 0)
                    {
                        mCode = smDt.Rows[0][0].ToString();
                    }
                }
                if (Document != "" && mMessage == "")
                {
                    mMessage = ctxTFAT.DocFormats.Where(z => z.Type == Document.Substring(0, 5)).Select(x => x.EmailTemplate.Trim()).FirstOrDefault() ?? "";
                }
                //string mfilename = mbranchcode;
                //if (Document != "")
                //{
                //    mfilename = mbranchcode + "_" + Document + ".pdf";
                //}
                string msmtppassword = "";
                string msmtphost = "";
                int msmtpport = 25;
                string msmtpuser = "";
                string mFromEmail = "";
                if (mToEmail == "")
                {
                    mToEmail = ctxTFAT.Address.Where(x => x.Code == mCode && x.Sno == 0).Select(z => z.Email).FirstOrDefault() ?? "";
                }
                if (mToEmail != "")
                {
                    var mEmailInfo = ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => new
                    {
                        x.SMTPUser,
                        x.SMTPServer,
                        x.SMTPPassword,
                        x.SMTPPort,
                        x.CCTo,
                        x.BCCTo,
                        x.Email
                    }).FirstOrDefault();
                    // successful example: suchansoft@gmail.com, data+1234, port; 587
                    if (mEmailInfo != null)
                    {
                        if (mCC == "")
                        {
                            mCC = mEmailInfo.CCTo;
                        }
                        if (mbCC == "")
                        {
                            mbCC = mEmailInfo.BCCTo;
                        }
                        msmtpuser = mEmailInfo.SMTPUser;
                        msmtppassword = mEmailInfo.SMTPPassword;
                        msmtphost = mEmailInfo.SMTPServer;
                        msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                        mFromEmail = mEmailInfo.Email ?? "";
                    }
                }
                if (mFromEmail == "")
                {
                    mFromEmail = msmtpuser;
                }
                // suchansoft@gmail.com, data+1234, port; 587
                if (msmtphost == null || msmtphost == "")
                {
                    msmtphost = "smtp.gmail.com";
                    msmtpuser = "suchansoft@gmail.com";
                    msmtppassword = "data+1234";
                    msmtpport = 587;
                    mFromEmail = msmtpuser;
                }
                var Attachments = ctxTFAT.Attachment.Where(x => x.ParentKey == Document).Select(x => x).ToList();
                MailMessage message = new MailMessage();
                if (Attachments != null && Attachments.Count > 0)
                {
                    foreach (var a in Attachments)
                    {
                        byte[] file = System.IO.File.ReadAllBytes(a.FilePath);
                        Stream mstream2 = new MemoryStream(file);
                        string mFileName = Path.GetFileName(a.FilePath);
                        System.Net.Mail.Attachment attachment2 = new System.Net.Mail.Attachment(mstream2, mFileName);
                        message.Attachments.Add(attachment2);
                    }
                }
                if (string.IsNullOrEmpty(AttachFileName) == false)
                {
                    var attachfiles = AttachFileDat.Split(',');
                    var attachnames = AttachFileName.Split(',');
                    for (int i = 0; i < attachnames.Count(); i++)
                    {
                        byte[] file = Convert.FromBase64String(attachfiles[i]);
                        Stream mstream2 = new MemoryStream(file);
                        string mFileName = attachnames[i];
                        System.Net.Mail.Attachment attachment2 = new System.Net.Mail.Attachment(mstream2, mFileName);
                        message.Attachments.Add(attachment2);
                    }
                }
                System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(mstream, mPDF);
                message.Attachments.Add(attachment);
                message.From = new MailAddress(mFromEmail);
                message.To.Add(mToEmail.Trim());
                if (mCC != null && mCC != "")
                {
                    message.CC.Add(mCC);
                }
                if (mbCC != null && mbCC != "")
                {
                    message.Bcc.Add(mbCC);
                }
                if (mSubject == null || mSubject == "")
                {
                    mSubject = "Auto Generated Document";
                }
                message.Subject = mSubject;
                message.IsBodyHtml = true;
                if (mMessage == null || mMessage == "")
                {
                    mMessage = "Please find Attached the Document here.";
                }
                if (mMessage.Contains("<html>") == false)
                {
                    mMessage = TextToHtml(mMessage);
                }
                message.Body = mMessage;
                message.Priority = MailPriority.High;
                message.IsBodyHtml = true;
                message.BodyEncoding = System.Text.Encoding.UTF8;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = msmtphost;
                smtp.Port = msmtpport;
                smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);
                smtp.EnableSsl = true;
                smtp.Send(message);
                mstream.Close();
                mstream.Dispose();
            }
            catch (SmtpFailedRecipientException smtex)
            {
                throw;
            }
        }

        public void SendMultiReportEMail(Stream mstream, string mSubType, string Document, string mCode, string mPDF, string mToEmail, string mCC, string mbCC, string mSubject, string mMessage)
        {
            string connstring = GetConnectionString();
            try
            {
                string mTable = GetTableName(mSubType);
                if (mCode == "")
                {
                    string mQuery = @"Select Top 1 Code from " + mTable + " Where TableKey='" + Document + "'";
                    DataTable smDt = GetDataTable(mQuery, connstring);
                    if (smDt.Rows.Count > 0)
                    {

                        mCode = smDt.Rows[0][0].ToString();
                    }
                }
                if (Document != "" && mMessage == "")
                {
                    mMessage = ctxTFAT.DocFormats.Where(z => z.Type == Document.Substring(0, 5)).Select(x => x.EmailTemplate.Trim()).FirstOrDefault() ?? "";
                }
                //string mfilename = mbranchcode;
                //if (Document != "")
                //{
                //    mfilename = mbranchcode + "_" + Document + ".pdf";
                //}
                string msmtppassword = "";
                string msmtphost = "";
                int msmtpport = 25;
                string msmtpuser = "";
                string mFromEmail = "";
                if (mToEmail == "")
                {
                    mToEmail = ctxTFAT.Address.Where(x => x.Code == mCode && x.Sno == 0).Select(z => z.Email).FirstOrDefault() ?? "";
                }
                if (mToEmail != "")
                {
                    var mEmailInfo = ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => new
                    {
                        x.SMTPUser,
                        x.SMTPServer,
                        x.SMTPPassword,
                        x.SMTPPort,
                        x.CCTo,
                        x.BCCTo,
                        x.Email
                    }).FirstOrDefault();
                    // successful example: suchansoft@gmail.com, data+1234, port; 587
                    if (mEmailInfo != null)
                    {
                        if (mCC == "")
                        {
                            mCC = mEmailInfo.CCTo;
                        }
                        if (mbCC == "")
                        {
                            mbCC = mEmailInfo.BCCTo;
                        }
                        msmtpuser = mEmailInfo.SMTPUser;
                        msmtppassword = mEmailInfo.SMTPPassword;
                        msmtphost = mEmailInfo.SMTPServer;
                        msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                        mFromEmail = mEmailInfo.Email ?? "";
                    }
                }
                if (mFromEmail == "")
                {
                    mFromEmail = msmtpuser;
                }
                // suchansoft@gmail.com, data+1234, port; 587
                if (msmtphost == null || msmtphost == "")
                {
                    msmtphost = "smtp.gmail.com";
                    msmtpuser = "suchansoft@gmail.com";
                    msmtppassword = "data+1234";
                    msmtpport = 587;
                    mFromEmail = msmtpuser;
                }
                var Attachments = ctxTFAT.Attachment.Where(x => x.ParentKey == Document).Select(x => x).ToList();
                MailMessage message = new MailMessage();
                if (Attachments != null && Attachments.Count > 0)
                {
                    foreach (var a in Attachments)
                    {
                        byte[] file = System.IO.File.ReadAllBytes(a.FilePath);
                        Stream mstream2 = new MemoryStream(file);
                        string mFileName = Path.GetFileName(a.FilePath);
                        System.Net.Mail.Attachment attachment2 = new System.Net.Mail.Attachment(mstream2, mFileName);
                        message.Attachments.Add(attachment2);
                    }
                }
                System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(mstream, mPDF);
                message.Attachments.Add(attachment);
                message.From = new MailAddress(mFromEmail);
                message.To.Add(mToEmail.Trim());
                if (mCC != null && mCC != "")
                {
                    message.CC.Add(mCC);
                }
                if (mbCC != null && mbCC != "")
                {
                    message.Bcc.Add(mbCC);
                }
                if (mSubject == null || mSubject == "")
                {
                    mSubject = "Auto Generated Document";
                }
                message.Subject = mSubject;
                message.IsBodyHtml = true;
                if (mMessage == null || mMessage == "")
                {
                    mMessage = "Please find Attached the Document here.";
                }
                if (mMessage.Contains("<html>") == false)
                {
                    mMessage = TextToHtml(mMessage);
                }
                message.Body = mMessage;
                message.Priority = MailPriority.High;
                message.IsBodyHtml = true;
                message.BodyEncoding = System.Text.Encoding.UTF8;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = msmtphost;
                smtp.Port = msmtpport;
                smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);
                smtp.EnableSsl = true;
                smtp.Send(message);
                mstream.Close();
                mstream.Dispose();
            }
            catch (SmtpFailedRecipientException smtex)
            {
                throw;
            }
        }


        [HttpPost]
        public ActionResult SendEMail(string mEmail, string mSubject, string mMsg, bool UseSuchanURL = false, string mCC = "", string mBCC = "", string mParentKey = "", string mParty = "")
        {
            int mid = 0;
            try
            {
                string msmtppassword = "";
                string msmtphost = "";
                int msmtpport = 25;
                string msmtpuser = "";
                string mFromEmail = "";
                mEmail = mEmail.Trim();
                mCC = mCC.Trim();
                mBCC = mBCC.Trim();
                var mEmailInfo = ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => new
                {
                    x.SMTPUser,
                    x.SMTPServer,
                    x.SMTPPassword,
                    x.SMTPPort,
                    x.CCTo,
                    x.BCCTo,
                    x.Email
                }).FirstOrDefault();

                if (mEmailInfo != null)
                {
                    mCC = (mCC != "" ? mCC + "," : "");
                    mCC += mEmailInfo.CCTo == null ? "" : mEmailInfo.CCTo.Trim();
                    mBCC = (mBCC != "" ? mBCC + "," : "");
                    mBCC += mEmailInfo.BCCTo == null ? "" : mEmailInfo.BCCTo.Trim();
                    msmtpuser = mEmailInfo.SMTPUser == null ? "" : mEmailInfo.SMTPUser.Trim();
                    msmtppassword = mEmailInfo.SMTPPassword == null ? "" : mEmailInfo.SMTPPassword.Trim();
                    msmtphost = mEmailInfo.SMTPServer == null ? "" : mEmailInfo.SMTPServer.Trim();
                    msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                    mFromEmail = (mEmailInfo.Email ?? "").Trim();
                }
                mCC = CutRightString(mCC, 1, ",");
                mBCC = CutRightString(mBCC, 1, ",");
                // suchansoft@gmail.com, data+1234, port; 587
                if (UseSuchanURL == true || (msmtphost == null || msmtphost == "") || mFromEmail == "")
                {
                    msmtphost = "smtp.gmail.com";
                    msmtpuser = "suchansoft@gmail.com";
                    msmtppassword = "data+1234";
                    msmtpport = 587;
                    mFromEmail = msmtpuser;
                }
                //if (UseSuchanURL == true)
                //{
                //    mFromEmail = "register@suchansoftware.com";
                //}

                //if (mFromEmail == "")
                //{
                //    mFromEmail = msmtpuser;
                //}

                MailMessage message = new MailMessage();
                message.From = new MailAddress(mFromEmail);
                mEmail = CutRightString(mEmail, 1, ";");
                mEmail = CutRightString(mEmail, 1, ",");
                message.To.Add(mEmail);
                if (mCC != "")
                {
                    message.CC.Add(mCC);
                }

                if (mBCC != "")
                {
                    message.Bcc.Add(mBCC);
                }
                message.Subject = mSubject;
                message.IsBodyHtml = true;
                message.BodyEncoding = System.Text.Encoding.UTF8;
                mMsg = mMsg.Replace("^~|", "<br>");
                if (mMsg.Contains("<html>") == false)
                {
                    mMsg = TextToHtml(mMsg);
                }
                message.Body = mMsg;
                message.Priority = MailPriority.High;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = msmtphost;
                smtp.Port = msmtpport;
                smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);
                smtp.EnableSsl = true;
                if (mParentKey != "" && mParty == "")
                {
                    string mmain = GetMainType(mParentKey.Substring(0, 5));
                    if ("SL~PR".Contains(mmain))
                    {
                        mParty = Fieldoftable(mmain == "SL" ? "Sales" : "Purchase", "Code", "TableKey='" + mParentKey + "'");
                    }
                }
                mid = SaveEmailLog(mEmail, mCC, mBCC, mSubject, mMsg, mParentKey, mParty);
                smtp.Send(message);
                return Json(new { Status = "Success", Message = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update Emaillog Set sentStatus=0 where RecordKey=" + mid);
                return Json(new { Status = "Error", Message = smtex.InnerException }, JsonRequestBehavior.AllowGet);
            }
        }

        public int SaveEmailLog(string memail, string mcc, string mbcc, string msubject, string mmsg, string mparentkey = "", string mParty = "", string EmialLogReportName = "", string EmialLogPersonName = "", string EmialLogHeader = "", string EmialLogAutoRemark = "", string SaveuserID = "", string AccountName = "")
        {
            mParty = mParty ?? "";
            if (mParty.Length > 9) mParty = "";
            EmailLog log = new EmailLog();
            log.SendDate = DateTime.Now;
            log.ParentKey = mparentkey;
            log.Address = memail ?? "";
            log.CC = mcc ?? "";
            log.BCC = mbcc ?? "";
            log.DocDate = DateTime.Now.Date;
            log.Subject = msubject;
            log.InOut = "O";
            log.Party = mParty;
            log.UserID = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.MsgText = mmsg ?? "";
            log.MsgType = "";
            log.SendStatus = true;
            log.AttachPath = "";
            log.ENTEREDBY = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.AUTHIDS = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.AUTHORISE = "A00";
            log.Branch = mbranchcode;
            log.LASTUPDATEDATE = DateTime.Now;
            log.CompCode = mcompcode;
            log.ReportName = EmialLogReportName;
            log.PersonName = EmialLogPersonName;
            log.Header = EmialLogHeader;
            log.AutoRemark = EmialLogAutoRemark;
            log.Account = AccountName;
            ctxTFAT.EmailLog.Add(log);
            ctxTFAT.SaveChanges();
            int mid = log.RECORDKEY;
            return mid;
        }

        public int SaveSMSLog(string mmobile, string mmsg, string mparentkey = "", string mParty = "", string EmialLogPersonName = "", string EmialLogHeader = "", string EmialLogAutoRemark = "", string SaveuserID = "")
        {
            mParty = mParty ?? "";
            if (mParty.Length > 9) mParty = "";
            SMSLog log = new SMSLog();
            log.Mobile = mmobile ?? "";
            log.URL = mmsg ?? "";
            log.UserID = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.SendStatus = true;
            log.ParentKey = mparentkey ?? "";
            log.Party = mParty ?? "";
            log.SendDate = DateTime.Now;
            log.ENTEREDBY = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.AUTHIDS = String.IsNullOrEmpty(SaveuserID) == true ? "N/A" : muserid;
            log.AUTHORISE = "A00";
            log.LASTUPDATEDATE = DateTime.Now;
            log.CompCode = mcompcode;
            log.PersonName = EmialLogPersonName;
            log.Header = EmialLogHeader;
            log.AutoRemark = EmialLogAutoRemark;
            ctxTFAT.SMSLog.Add(log);
            ctxTFAT.SaveChanges();
            int mid = log.RECORDKEY;
            return mid;
        }

        private string TextToHtml(string text)
        {
            //text = HttpUtility.HtmlEncode(text);
            text = text.Replace("\r\n", "\r");
            text = text.Replace("\n", "\r");
            text = text.Replace("\r", "<br>\r\n");
            text = text.Replace("  ", " &nbsp;");
            string mstr = "<html>";

            if (ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Logo).FirstOrDefault() != null)
                mstr += "<img src = \"data:image/png;base64," + Convert.ToBase64String(ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Logo).FirstOrDefault()) + "\" width=\"50\" height=\"50\" alt=\"Branch Logo\"/>";
            mstr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + (ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
            mstr += "<hr>";
            if (text.Contains("^b"))
            {
                text = text.Replace("^b", "<strong>").Replace("^eb", "</strong>");
            }
            mstr += text + "</html>";
            return mstr;
        }

        public ActionResult SendReportEMail(Stream mstream, string mSubType, string mParentKey, string mCode, string mfilename, string mfiletype, string memaildata = "")
        {
            string connstring = GetConnectionString();
            try
            {
                string mTable = GetTableName(mSubType);
                if (mCode == "")
                {
                    DataTable smDt = GetDataTable(@"Select Top 1 Code from " + mTable + " Where TableKey='" + mParentKey + "'", connstring);
                    if (smDt.Rows.Count > 0)
                    {
                        mCode = smDt.Rows[0][0].ToString();
                    }
                }

                string msmtppassword = "";
                string msmtphost = "";
                int msmtpport = 25;
                string msmtpuser = "";
                string mCC = "";
                string mBCC = "";
                string mToEmail = "";
                string msubject = "";
                string mmessage = "";
                string mFromEmail = "";

                if (memaildata != "") // passed from report print options view 
                {
                    var mparam = memaildata.Split('~');
                    msubject = mparam[0].ToString().Trim();
                    mToEmail = mparam[1].ToString().Trim();
                    mmessage = mparam[2].ToString().Trim();
                    //mmessage = mmessage.Replace("\n", "<br/>");
                }

                if (mToEmail == "")
                {
                    mToEmail = (ctxTFAT.Address.Where(x => x.Code == mCode && x.Sno == 0).Select(z => z.Email).FirstOrDefault() ?? "").Trim();
                }

                if (mToEmail == "" || !mToEmail.Contains(".") || !mToEmail.Contains("@"))
                {
                    return Json(new { Status = "NoEmailAddress" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    //var mEmailInfo = ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => new
                    //{
                    //    x.SMTPUser,
                    //    x.SMTPServer,
                    //    x.SMTPPassword,
                    //    x.SMTPPort,
                    //    x.CCTo,
                    //    x.BCCTo,
                    //    x.Email
                    //}).FirstOrDefault();
                    var mEmailInfo = ctxTFAT.TfatComp.Where(z => z.Code == mcompcode).Select(x => new
                    {
                        x.SMTPUser,
                        x.SMTPServer,
                        x.SMTPPassword,
                        x.SMTPPort,
                        x.CCTo,
                        x.BCCTo,
                        x.Email
                    }).FirstOrDefault();
                    if (mEmailInfo != null)
                    {
                        mCC = mEmailInfo.CCTo ?? "";
                        mBCC = mEmailInfo.BCCTo ?? "";
                        msmtpuser = mEmailInfo.SMTPUser ?? "";
                        msmtppassword = mEmailInfo.SMTPPassword ?? "";
                        msmtphost = (mEmailInfo.SMTPServer ?? "").Trim();
                        msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                        mFromEmail = mEmailInfo.Email ?? "";
                    }
                }

                // suchansoft@gmail.com, data+1234, port; 587
                if (mFromEmail == "")
                {
                    mFromEmail = msmtpuser;
                }
                if (msmtphost == null || msmtphost == "")
                {
                    msmtphost = "smtp.gmail.com";
                    msmtpuser = "suchansoft@gmail.com";
                    msmtppassword = "data+1234";
                    msmtpport = 587;
                    mFromEmail = msmtpuser;
                }
                //Warning[] warnings;
                //string[] streamids;
                //string mimeType;
                //string encoding;
                //string extension;

                //byte[] bytes = reportViewer.LocalReport.Render("PDF", null, out mimeType, out encoding, out extension, out streamids, out warnings);
                //MemoryStream memoryStream = new MemoryStream(bytes);
                //memoryStream.Seek(0, SeekOrigin.Begin);

                if (msubject == "")
                {
                    if (mParentKey != "")
                    {
                        msubject = "Auto Generated Doc:" + mTable + " : " + mParentKey.Substring(7, mParentKey.Length - 7);
                    }
                    else
                    {
                        msubject = "Auto Generated Report";
                    }
                }
                if (mmessage == "")
                {
                    mmessage = "Please find herewith Attached the Document";
                }

                MailMessage message = new MailMessage();
                //System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(memoryStream, "STAAnnexureReport.pdf");
                System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(mstream, mfilename + "." + mfiletype);
                message.Attachments.Add(attachment);
                message.From = new MailAddress(mFromEmail);
                message.To.Add(mToEmail);
                if (mCC != "")
                {
                    message.CC.Add(mCC);
                }

                if (mBCC != "")
                {
                    message.Bcc.Add(mBCC);
                }
                // example of html message
                // Construct the alternate body as HTML.
                //string body = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">";
                //body += "<HTML><HEAD><META http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\">";
                //body += "</HEAD><BODY><DIV><FONT face=Arial color=#ff0000 size=2>this is some HTML text";
                //body += "</FONT></DIV></BODY></HTML>";

                message.Subject = msubject;
                message.IsBodyHtml = true;
                message.BodyEncoding = System.Text.Encoding.UTF8;
                message.Body = mmessage;
                message.Priority = MailPriority.High;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = msmtphost;
                smtp.Port = msmtpport;
                smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);
                smtp.EnableSsl = true;
                SaveEmailLog(mToEmail, mCC, mBCC, msubject, mmessage);
                smtp.Send(message);
                mstream.Close();
                mstream.Dispose();
                return Json(new
                {
                    Status = "Success"
                }, JsonRequestBehavior.AllowGet);
            }
            catch (SmtpFailedRecipientException smtex)
            {
                return Json(new
                {
                    Status = "Fail"
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public void EmailDocumentCrystal(string Document, string mWhat, bool SendEmail, List<DocFormats> mFormats, string mToEmail = "", string mCC = "", string mbCC = "", string mSubject = "", string mMessage = "")
        {
            if (mWhat == "")
            {
                mWhat = "PDF";
            }
            string mSubType = ctxTFAT.DocTypes.Where(x => x.Code == Document.Substring(6, 5)).Select(x => x.SubType).FirstOrDefault();
            string mParentKey = Document.Substring(6, Document.Length - 6);
            foreach (var a in mFormats)
            {
                if (a.FormatCode == "")
                {
                    a.FormatCode = "NoFormatDefined";
                }

                DataTable dtreport = new DataTable();
                SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
                SqlCommand cmd = new SqlCommand("SPDoc_" + a.StoredProc, tfat_conx); //name of the storedprocedure
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 120;
                cmd.Parameters.AddWithValue("@mTableKey", mParentKey);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtreport);
                ReportDocument rd = new ReportDocument();

                rd.Load(Path.Combine(Server.MapPath("~/Reports"), a.FormatCode + ".rpt"));
                rd.SetDataSource(dtreport);
                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                try
                {
                    Stream mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    mstream.Seek(0, SeekOrigin.Begin);
                    SendMultiReportEMail(mstream, mSubType, mParentKey, "", mbranchcode + "_" + mParentKey + ".pdf", mToEmail, mCC, mbCC, mSubject, mMessage);
                    //SendMultiReportEMail(mstream, mSubType, mParentKey, "", a.FormatCode + ".pdf", mToEmail, mCC, mbCC, mSubject, mMessage);
                }
                catch
                {
                    rd.Close();
                    rd.Dispose();
                    throw;
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
            }
        }


        public string GetMyIP()
        {
            string mIP;
            Session["location"] = "";
            Session["locationpin"] = "";
            try
            {
                //using (WebClient client = new WebClient())
                //{
                //mIP = client.DownloadString("https://api.ipify.org");
                //}
                mIP = Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
                if (string.IsNullOrEmpty(mIP))
                {
                    mIP = Request.ServerVariables["REMOTE_ADDR"];
                }
                if (string.IsNullOrEmpty(mIP))
                {
                    mIP = Request.UserHostAddress;
                }
                // site login credentials: shenghanis@yahoo.com, pass: 0000000
                string url = "http://api.ipstack.com/" + mIP + "?access_key=25213fbec754097175a67cea4725b45c";
                WebClient client = new WebClient();
                string jsonstring = client.DownloadString(url);
                dynamic dynObj = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonstring);
                //System.Web.HttpContext.Current.Session["UserCountryCode"] = dynObj.country_code;
                Session["locationpin"] = dynObj.zip;
                Session["location"] = "City:" + dynObj.city + ", State:" + dynObj.region_name + ", Country:" + dynObj.country_name + ", Pin:" + dynObj.zip + ", lat:" + dynObj.latitude + ", long:" + dynObj.longitude;
                //country_name, region_name (state), city, zip, latitude, longitude
            }
            catch (Exception ex2)
            {
                mIP = "error";
            }
            Session["MyIP"] = mIP;
            return mIP;
        }

        public string RequestOTP(string muserid, string mwhat, string mtype, string mode, string mvalue, string moptionname)
        {
            string mSendTo = "";
            //string msg = "..from " + muserid + " (" + ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => x.Name).FirstOrDefault() ?? "" + ")";
            string msg = "..from " + ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => x.Name).FirstOrDefault() ?? "";
            int mmint = 10;
            UserOTPLogin mvar = ctxTFAT.UserOTPLogin.Where(z => z.UserID == muserid).Select(x => x).FirstOrDefault();
            if (mvar != null)
            {
                mmint = mvar.ExpiryMinutes ?? 10;
                switch (mwhat)
                {
                    case "A":
                        mSendTo = (mode == "A" && mvar.MasterOTPAdd) || (mode == "E" && mvar.MasterOTPEdit) || (mode == "D" && mvar.MasterOTPDelete) ? (mvar.MasterUserID ?? "") : "";
                        msg = " for Request to " + (mode == "A" ? "Add" : (mode == "E" ? "Edit" : "Delete")) + " an Account " + (mvalue != "" ? "{" + mvalue + "}" : "") + msg;
                        break;
                    case "I":
                        mSendTo = (mode == "A" && mvar.ItemOTPAdd) || (mode == "E" && mvar.ItemOTPEdit) || (mode == "D" && mvar.ItemOTPDelete) ? (mvar.ItemMasterUserID ?? "") : "";
                        msg = " for Request to " + (mode == "A" ? "Add" : (mode == "E" ? "Edit" : "Delete")) + " an Item " + (mvalue != "" ? "{" + mvalue + "}" : "") + msg;
                        break;
                    case "T":
                        switch (mode)
                        {
                            case "A":
                                mSendTo = mvar.TrxOTPAdd ? (mvar.TrxUsersAdd ?? "") : "";
                                msg = " for Request to Add a Document in " + mtype + msg;
                                break;
                            case "E":
                                mSendTo = mvar.TrxOTPEdit ? (mvar.TrxUsersEdit ?? "") : "";
                                msg = " for Request to Edit a Document in " + mtype + (mvalue != "" ? "{" + mvalue + "}" : "") + msg;
                                break;
                            case "D":
                                mSendTo = mvar.TrxOTPDelete ? (mvar.TrxUsersDelete ?? "") : "";
                                msg = " for Request to Delete a Document in " + mtype + (mvalue != "" ? "{" + mvalue + "}" : "") + msg;
                                break;
                        }
                        int n = mSendTo.IndexOf(mtype + "|");
                        if (n == -1)
                        {
                            mSendTo = "";
                            msg = "";
                        }

                        if (mSendTo != "")
                        {
                            mSendTo = mSendTo.Substring(n, mSendTo.IndexOf("|") - n);
                            mSendTo = mSendTo.Substring(6);
                        }
                        break;
                    case "R":
                        mSendTo = mvar.TrxCntrRate ? (mvar.TrxUsersCntrRate ?? "") : "";

                        int n2 = mSendTo.IndexOf(mtype + "|");
                        if (n2 == -1)
                        {
                            mSendTo = "";
                            msg = "";
                        }

                        if (mSendTo != "")
                        {
                            string mmSendTo = "";
                            mmSendTo = mSendTo.Substring(n2 + 6);
                            mSendTo = mmSendTo;
                        }
                        msg = " for Request to Update Rate" + (mvalue != "" ? mvalue : "") + msg + ")";
                        break;

                    case "L":
                        mSendTo = mvar.LoginOTP ? (mvar.LoginUserID ?? "") : "";
                        msg = " for Request to Access into T.FAT ERPiX9" + msg + ", ip: " + Session["MyIp"].ToString() + ", pin:" + Session["locationpin"].ToString();
                        break;
                }
            }
            if (mSendTo != "")
            {
                mSendTo = ctxTFAT.TfatPass.Where(z => z.Code == mSendTo).Select(x => x.Mobile).FirstOrDefault();
                int motp = GetRandomNumber();
                ExecuteStoredProc(@"Update RequestOTP Set IsActive=0 where UserID='" + muserid + "'");
                UpdateRequestOTP(muserid, mode, moptionname, motp, mmint, mtype, msg);
                msg = "OTP: " + motp + msg;
                string merr = SendSMS(mSendTo, msg, true, "");
                return merr;
            }
            return "No Rule Defined..";
        }

        [HttpPost]
        public ActionResult SaveFollowup(string mparty, string mparentkey, string mfollowuptype, string minout, string mcalldate, string mcontactperson, string mcommunication, string mnextdate, string mremark, bool mcreatetask)
        {
            try
            {
                if (mparty == "" && mparentkey.Length == 9) mparty = mparentkey;
                if (mparentkey.Substring(0, 6) == mbranchcode) mparentkey = mparentkey.Substring(6);
                mparentkey = mparentkey.PadRight(22, ' ');
                FollowUp mobj = new FollowUp
                {
                    TableKey = mparentkey,
                    Party = mparty,
                    Type = mparentkey.Substring(0, 5),
                    Prefix = mparentkey.Substring(5, 2),
                    Srl = mparentkey.Substring(7, 15),
                    Communication = mcommunication,
                    Action = mfollowuptype,
                    Branch = mbranchcode,
                    CompCode = mcompcode,
                    DocDate = Convert.ToDateTime(mcalldate),
                    LocationCode = mlocationcode,
                    NextDate = Convert.ToDateTime(mnextdate),
                    Person = mcontactperson,
                    Remark = mremark,
                    Dept = 0,
                    LASTUPDATEDATE = DateTime.Now,
                    AUTHIDS = muserid,
                    AUTHORISE = "A00",
                    ENTEREDBY = muserid
                };
                ctxTFAT.FollowUp.Add(mobj);
                ctxTFAT.SaveChanges();
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Status = "Error",
                    Message = "Error!\n" + ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { Status = "Success", Message = "Followup Saved.." }, JsonRequestBehavior.AllowGet);
        }

        public void UpdateRequestOTP(string muserid, string mode, string moptionname, int motp, int mmint, string mtype, string msg)
        {
            RequestOTP mobj = new RequestOTP
            {
                UserID = muserid,
                IsActive = true,
                Mode = mode,
                OptionName = moptionname,
                OTP = motp,
                UseDate = null,
                GenDate = DateTime.Now,
                ExpDate = DateTime.Now.AddMinutes(mmint),
                Type = mtype,
                Message = msg,
                LASTUPDATEDATE = DateTime.Now,
                AUTHIDS = muserid,
                AUTHORISE = "A00",
                ENTEREDBY = muserid
            };
            ctxTFAT.RequestOTP.Add(mobj);
            ctxTFAT.SaveChanges();
        }

        [HttpPost]
        public ActionResult SendSMSResponse(string mMobile, string mMsg, string mParentKey, string mParty = "")
        {
            string merr = SendSMS(mMobile, mMsg, false, mParty, false, mParentKey);
            return Json(new { Message = merr }, JsonRequestBehavior.AllowGet);
        }


        #endregion emailroutines

        public ActionResult GetBranchListSTD(string UserId)
        {
            List<SelectListItem> branch = new List<SelectListItem>();
            if (UserId == null)
            {
                return Json("", JsonRequestBehavior.AllowGet);
            }

            UserId = UserId.ToUpper();
            if (UserId == "SUPER")
            {
                var branchlist = ctxTFAT.TfatBranch.Where(x => x.Status == true && x.Category != "Area" && x.Code != "G00000" && x.Grp != "G00000").ToList().Select(b => new { b.Code, b.Name, b.Category });
                foreach (var item in branchlist)
                {
                    var Prefix = "";
                    if (item.Category == "Branch")
                    {
                        Prefix = " - " + item.Category.Substring(0, 1);
                    }
                    else if (item.Category == "0")
                    {
                        Prefix = " - HO";
                    }
                    else
                    {
                        Prefix = " - " + item.Category.Substring(0, 2);
                    }
                    branch.Add(new SelectListItem { Text = item.Name + Prefix, Value = item.Code });
                }
            }
            else
            {
                //x.CompCode == CompCode && 
                var branchlist = ctxTFAT.TfatBranch.Where(x => x.Users.ToUpper().Contains(UserId)).ToList().Select(b => new { b.Code, b.Name, b.Category });
                foreach (var item in branchlist)
                {
                    var Prefix = "";
                    if (item.Category == "Branch")
                    {
                        Prefix = " - " + item.Category.Substring(0, 1);
                    }
                    else if (item.Category == "0")
                    {
                        Prefix = " - HO";
                    }
                    else
                    {
                        Prefix = " - " + item.Category.Substring(0, 2);
                    }
                    branch.Add(new SelectListItem { Text = item.Name + Prefix, Value = item.Code });
                }
            }
            return Json(branch, JsonRequestBehavior.AllowGet);
        }

        public DateTime GetEffectiveDate()
        {
            DateTime mdate = Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastDate"].ToString());
            if (DateTime.Now.Date < mdate) mdate = DateTime.Now.Date;
            return mdate;
        }

        public ActionResult GetPerdListSTD()
        {
            List<SelectListItem> perd = new List<SelectListItem>();
            //Where(x => x.Code == CompCode).
            var perdlist = ctxTFAT.TfatPerd.ToList().Select(b => new { b.StartDate, b.LastDate, b.PerdCode }).OrderByDescending(x => x.PerdCode);
            foreach (var item in perdlist)
            {
                //perd.Add(new SelectListItem { Value = item.StartDate.ToShortDateString() + "-" + item.LastDate.ToShortDateString(), Text = item.StartDate.ToString("MMM yyyy") + " to " + item.LastDate.ToString("MMM yyyy") });
                perd.Add(new SelectListItem { Value = item.PerdCode, Text = item.StartDate.ToString("MMM yyyy") + " to " + item.LastDate.Value.ToString("MMM yyyy") });
            }
            return Json(perd, JsonRequestBehavior.AllowGet);
        }

        public DateTime GetLastDateOfMonth(DateTime mDate)
        {
            return new DateTime(mDate.Year, mDate.Month, DateTime.DaysInMonth(mDate.Year, mDate.Month));
        }

        public DateTime GetFirstDateOfMonth(DateTime mDate)
        {
            return new DateTime(mDate.Year, mDate.Month, 1);
        }

        public ActionResult ChangeBranch(string BranchCode)
        {
            System.Web.HttpContext.Current.Session["BranchCode"] = BranchCode;
            System.Web.HttpContext.Current.Session["BranchName"] = ctxTFAT.TfatBranch.Where(x => x.Code == BranchCode).Select(x => x.Name).FirstOrDefault();
            System.Web.HttpContext.Current.Session["ActivityType"] = ctxTFAT.TfatBranch.Where(x => x.Code == BranchCode).Select(x => x.BranchType).FirstOrDefault();
            return Json(new { Status = "Success" }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ChangePeriod(string perd)
        {
            var perdlist = ctxTFAT.TfatPerd.Where(z => z.PerdCode == perd).Select(b => new { b.LockUsers, b.StartDate, b.LastDate, b.PerdCode, b.Locked }).OrderByDescending(x => x.PerdCode).FirstOrDefault();
            if (!String.IsNullOrEmpty(perdlist.LockUsers))
            {
                var LockUSerList = perdlist.LockUsers.Split(',').ToList();
                if (LockUSerList.Where(x => x == muserid).FirstOrDefault() != null)
                {
                    return Json(new { Status = "Error", Message = "This Period Is Locked For You...!" }, JsonRequestBehavior.AllowGet);
                }
            }

            if (perdlist.Locked && muserid.ToUpper() != "SUPER")
            {
                return Json(new { Status = "Error", Message = "This Period Is Locked...!" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                System.Web.HttpContext.Current.Session["StartDate"] = perdlist.StartDate.Date.ToShortDateString();
                System.Web.HttpContext.Current.Session["LastDate"] = perdlist.LastDate.Value.Date.ToShortDateString();
                System.Web.HttpContext.Current.Session["FPerd"] = perd;
            }
            return Json(new { Status = "Success" }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetGridImage(string mtable, string id)
        {
            {
                try
                {
                    byte[] mlogo;
                    if (mtable == "TfatBranch")
                    {
                        mlogo = ctxTFAT.TfatBranch.Where(x => x.Code == id).Select(x => x.Logo).Single();
                    }
                    else if (mtable == "Master")
                    {
                        mlogo = ctxTFAT.Master.Where(x => x.Code == id).Select(x => x.Logo).Single();
                    }
                    else if (mtable == "TfatPass")
                    {
                        mlogo = ctxTFAT.TfatPass.Where(x => x.Code == id).Select(x => x.Logo).Single();
                    }
                    else if (mtable == "ItemMaster")
                    {
                        mlogo = ctxTFAT.ItemMore.Where(x => x.Code == id).Select(x => x.Logo).Single();
                    }
                    else if (mtable == "SalesMan")
                    {
                        mlogo = ctxTFAT.SalesMan.Where(x => x.Code == Convert.ToInt32(id)).Select(x => x.Logo).Single();
                    }
                    else
                    {
                        mlogo = ctxTFAT.SalesMan.Where(x => x.Code == Convert.ToInt32(id)).Select(x => x.Logo).Single();
                    }
                    //Encoding.ASCII.GetBytes(Fieldoftable(mtable, "logo", "Code='" + id + "'"));
                    //ctxTFAT.TfatBranch.Where(x => x.Code == id).Select(x => x.Logo).Single();
                    var serializer = new JavaScriptSerializer();
                    serializer.MaxJsonLength = Int32.MaxValue;
                    var jsonResult = Json(new { mlogo = "data:image/png;base64," + Convert.ToBase64String(mlogo) }, JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue; // to enhance size of image attachment
                    return jsonResult;
                    //return File(mlogo, "image/png");
                }
                catch (Exception)
                {
                    return null;// File("", "image/png");
                }
            }
        }

        public List<DataRow> GetGeneralItemList(string mType, string mMaintype, string msearchstyle, bool mAssTypeGrp, string msearchtext)
        {
            bool HideItemCode = ctxTFAT.TfatPass.Where(x => x.Code == muserid).Select(x => x.HideItemCode).FirstOrDefault();
            string mItemcodestr = "";
            mItemcodestr = (HideItemCode == true) ? "" : "'[' +" + "im.Code" + " + '] ' + ";
            string mcansalpurquery = "";
            if (mMaintype == "SL" || mMaintype == "PR")
            {
                mcansalpurquery = " and (('" + mMaintype + "' = 'SL' and im.cansale = 1) or ('" + mMaintype + "' = 'PR' and im.CanPurch = 1))";
            }
            if (msearchtext == "")
            {
                if (mAssTypeGrp == true)
                {
                    string mquery = @"select im.Code ," + mItemcodestr + " im.Name as Name ,im.Unit from ItemMaster im where im.Hide = 0 and left(im.AUTHORISE,1) = 'A' and Charindex('" + mbranchcode + "', AppBranch)<>0 " + mcansalpurquery + " and im.grp in (select tig.code from TypeItemGroups tig where tig.Type='" + mType + "')";
                    List<DataRow> mDt = GetDataTable(mquery).AsEnumerable().ToList();
                    return mDt;
                }
                else
                {
                    string mquery = @"select im.Code ," + mItemcodestr + " im.Name as Name ,im.Unit from ItemMaster im where im.Hide = 0 and left(im.AUTHORISE,1) = 'A' and Charindex('" + mbranchcode + "', AppBranch)<>0 " + mcansalpurquery;
                    List<DataRow> mDt = GetDataTable(mquery).AsEnumerable().ToList();
                    return mDt;
                }
            }
            else
            {
                string mAddSearchFlds = Fieldoftable("TfatBranch", "gp_ItemSearchFlds", "Code='" + mbranchcode + "'");
                string mqueryaddon = "";
                string mqueryleftjoinquery = "";
                string mselectaddon = "";
                if (string.IsNullOrEmpty(mAddSearchFlds) == false)
                {
                    mqueryleftjoinquery = "left join AddonItemMas imadd on im.Code = imadd.TableKey ";
                    string[] mflds = mAddSearchFlds.Split(',');
                    foreach (var a in mflds)
                    {
                        mqueryaddon = mqueryaddon + "(imadd." + a + " LIKE '%" + msearchtext + "%') or";
                        mselectaddon = mselectaddon + "imadd." + a + "+";
                    }
                    mqueryaddon = "or " + mqueryaddon.Remove(mqueryaddon.Length - 2, 2);
                    mselectaddon = "+" + mselectaddon.Remove(mselectaddon.Length - 1, 1);
                }
                if (mAssTypeGrp == true)
                {
                    string mquery = @"select im.Code ," + mItemcodestr + " im.Name " + mselectaddon + " as Name ,im.Unit from ItemMaster im " + mqueryleftjoinquery + " where im.Hide = 0 and left(im.AUTHORISE,1) = 'A' and Charindex('" + mbranchcode + "', AppBranch)<>0 and (('" + msearchstyle + "' = 'B' and (im.Name LIKE '" + msearchtext + "%' or im.Code LIKE '" + msearchtext + "%')) or ('" + msearchstyle + "' <> 'B' and (im.Name LIKE '%" + msearchtext + "%' or im.Code LIKE '%" + msearchtext + "%')) " + mqueryaddon + ") " + mcansalpurquery + " and im.grp in (select tig.code from TypeItemGroups tig where tig.Type='" + mType + "')";
                    List<DataRow> mDt = GetDataTable(mquery).AsEnumerable().ToList();
                    return mDt;
                }
                else
                {
                    string mquery = @"select im.Code ," + mItemcodestr + " im.Name " + mselectaddon + " as Name ,im.Unit from ItemMaster im " + mqueryleftjoinquery + " where im.Hide = 0 and left(im.AUTHORISE,1) = 'A' and Charindex('" + mbranchcode + "', AppBranch)<>0 and (('" + msearchstyle + "' = 'B' and (im.Name LIKE '" + msearchtext + "%' or im.Code LIKE '" + msearchtext + "%')) or ('" + msearchstyle + "' <> 'B' and (im.Name LIKE '%" + msearchtext + "%' or im.Code LIKE '%" + msearchtext + "%')) " + mqueryaddon + ") " + mcansalpurquery;
                    List<DataRow> mDt = GetDataTable(mquery).AsEnumerable().ToList();
                    return mDt;
                }
            }
        }

        public string GetGridQuery(string mformatcode, string mfromdate = "", string mtodate = "")
        {
            SqlConnection con = new SqlConnection(GetConnectionString());
            SqlCommand cmd = new SqlCommand("Select dbo.GetGridQuery(@mFormatCode,@mAlias,@mCurrDec,@mBranch,@mUserID,@mReportStartDate,@mReportEndDate,@mReturn)", con);
            cmd.Parameters.Add("@mFormatCode", SqlDbType.VarChar).Value = mformatcode;
            cmd.Parameters.Add("@mAlias", SqlDbType.VarChar).Value = "";
            cmd.Parameters.Add("@mCurrDec", SqlDbType.TinyInt).Value = 2;
            cmd.Parameters.Add("@mBranch", SqlDbType.VarChar).Value = mbranchcode;
            cmd.Parameters.Add("@mUserID", SqlDbType.VarChar).Value = muserid;
            cmd.Parameters.Add("@mReportStartDate", SqlDbType.VarChar).Value = mfromdate;
            cmd.Parameters.Add("@mReportEndDate", SqlDbType.VarChar).Value = mtodate;
            cmd.Parameters.Add("@mReturn", SqlDbType.VarChar).Value = "B";
            con.Open();
            return "Select " + cmd.ExecuteScalar().ToString();
        }

        public string Decode(string token)
        {
            var parts = token.Split('.');
            string header = parts[0];
            string payload = parts[1];
            var headerData = JObject.Parse(Base64Decode(header));
            var payloadData = JObject.Parse(Base64Decode(payload));
            return headerData.ToString() + payloadData.ToString();
        }

        private string Base64Decode(string data)
        {
            try
            {
                data = data.Replace('-', '+'); // 62nd char of encoding
                data = data.Replace('_', '/'); // 63rd char of encoding
                switch (data.Length % 4) // Pad with trailing '='s
                {
                    case 0: break; // No pad chars in this case
                    case 2: data += "=="; break; // Two pad chars
                    case 3: data += "="; break; // One pad char
                    default:
                        throw new System.Exception("Illegal base64url string!");
                }
                byte[] crypto = Convert.FromBase64String(data);
                return Encoding.UTF8.GetString(crypto);
            }
            catch (Exception e)
            {
                throw new Exception("Error in base64Decode" + e.Message);
            }
        }

        //---------------Below Code Written By Suresh--------------------------

        public string SetAuthorisationLogistics(TfatUserAuditHeader authorisation, string mParentKey, string mSrl, int mLevel, string mDocDate, decimal mTotAmt, string mParty, string mBranch)
        {
            string AUTHORISE = "A00";

            bool Default = false, Authenticate = false;

            List<string> CurrentBranch = new List<string>();
            CurrentBranch.Add(mbranchcode);

            var AuthBranchList = authorisation.AuthBranch.Split(',').ToList();
            var CommonList = CurrentBranch.Intersect(AuthBranchList);
            if (CommonList.Count() > 0)
            {
                Default = true;
            }
            if (String.IsNullOrEmpty(authorisation.AuthReqBranch))
            {
                AuthBranchList = new List<string>();
            }
            else
            {
                AuthBranchList = authorisation.AuthReqBranch.Split(',').ToList();
            }
            CommonList = CurrentBranch.Intersect(AuthBranchList);
            if (CommonList.Count() > 0)
            {
                Authenticate = true;
            }

            bool AllowAuth = true;
            var GetAuthorization = ctxTFAT.Authorisation.Where(x => x.Type == authorisation.Type && x.Srl == mSrl && x.TableKey == mParentKey).ToList();
            if (GetAuthorization.Count() > 0 && authorisation.AuthEach == false)
            {
                AllowAuth = false;
            }
            if (AllowAuth)
            {
                if (!(Default == false && Authenticate == false))
                {
                    var UserID = "";
                    var GetUserAudit = ctxTFAT.TfatUserAudit.Where(x => x.UserLevel == mLevel && x.Type == authorisation.Type).ToList();
                    foreach (var item in GetUserAudit)
                    {
                        if (String.IsNullOrEmpty(item.AppBranch))
                        {
                            UserID += item.UserID + "^";
                        }
                        else
                        {
                            AuthBranchList = item.AppBranch.Split(',').ToList();
                            CommonList = CurrentBranch.Intersect(AuthBranchList);
                            if (CommonList.Count() > 0)
                            {
                                UserID += item.UserID + "^";
                            }
                        }
                    }

                    //if (authorisation.AuthEach)
                    {
                        var DeleteAthorisedlist = ctxTFAT.Authorisation.Where(x => x.TableKey == mParentKey).ToList();
                        ctxTFAT.Authorisation.RemoveRange(DeleteAthorisedlist);
                    }

                    if (Authenticate)
                    {
                        if (String.IsNullOrEmpty(UserID))
                        {
                            AUTHORISE = "N00";
                            //DefaultCompulsaryEntry
                            SaveLogisticsAuth(mBranch, authorisation.Type, 0, 0, muserid, mSrl, mDocDate, mTotAmt, mParty, mParentKey, DateTime.Now);
                        }
                        else
                        {
                            AUTHORISE = "N00";
                            //AuthenticateEntry Pass UserID
                            UserID = UserID.Substring(0, UserID.Length - 1);
                            SaveLogisticsAuth(mBranch, authorisation.Type, 0, 0, UserID, mSrl, mDocDate, mTotAmt, mParty, mParentKey, DateTime.Now);
                        }
                    }
                    else if (Default)
                    {
                        //DefaultEntry
                        if (String.IsNullOrEmpty(UserID))
                        {
                            SaveLogisticsAuth(mBranch, authorisation.Type, 0, 0, muserid, mSrl, mDocDate, mTotAmt, mParty, mParentKey, DateTime.Now);
                        }
                        else
                        {
                            UserID = UserID.Substring(0, UserID.Length - 1);
                            SaveLogisticsAuth(mBranch, authorisation.Type, 0, 0, UserID, mSrl, mDocDate, mTotAmt, mParty, mParentKey, DateTime.Now);
                        }
                    }
                }
            }


            return AUTHORISE;
        }

        public void SaveLogisticsAuth(string mbranch, string Type, decimal mCurrRate, int mLevel, string USerID, string DocNO, string mDocDate, decimal mTotAmt, string Party, string mParentKey, DateTime mEntryDate)
        {
            if (Type != null)
            {
                Type = Type.Trim();
            }
            if (mCurrRate == 0)
            {
                mCurrRate = 1;
            }

            Authorisation mObj = new Authorisation();
            mObj.Branch = mbranch;
            mObj.Type = Type;
            mObj.Prefix = mperiod ?? "";
            mObj.Srl = DocNO ?? "";
            mObj.DocDate = Convert.ToDateTime(mDocDate);
            mObj.Amount = mTotAmt;
            mObj.Code = Party ?? "";
            mObj.ParentKey = mParentKey ?? "";
            mObj.CompCode = "";
            mObj.TableKey = mParentKey ?? "";
            mObj.CurrName = 1;
            mObj.CurrRate = mCurrRate;
            mObj.AUTHIDS = USerID ?? "";
            mObj.AuthLevel = mLevel;
            mObj.AuthBy = "";
            mObj.AuthType = "T";
            mObj.AUTHORISE = "N00";
            mObj.ENTEREDBY = muserid ?? "";
            mObj.EntryDate = Convert.ToDateTime(mEntryDate);
            mObj.AuthTimeBound = false;
            mObj.AuthTimeLimit = 0;
            mObj.AuthDueDate = DateTime.Now.AddHours((double)0);
            mObj.SancLimit = 0;
            mObj.LASTUPDATEDATE = DateTime.Now;
            mObj.Narr = "";
            mObj.ProcessCode = 0;
            mObj.Locked = false;
            mObj.AuthCompulsary = false;

            ctxTFAT.Authorisation.Add(mObj);
        }

        public bool LockAuthorise(string Type, string Mode, string Tablekey, string Parentkey)
        {
            bool Lock = false;
            TfatUserAuditHeader tfatUserAuditHeader = ctxTFAT.TfatUserAuditHeader.Where(x => x.Type == Type.Trim()).FirstOrDefault();
            if (tfatUserAuditHeader != null)
            {
                //Compulsory Authorise
                if (Mode.Trim().ToUpper() == "EDIT")
                {
                    if (!String.IsNullOrEmpty(tfatUserAuditHeader.AuthReqBranch))
                    {
                        List<string> GetChild = new List<string>();
                        GetChild.Add(mbranchcode);
                        var Branchlist = tfatUserAuditHeader.AuthReqBranch.Split(',').ToList();
                        var CommonList = GetChild.Intersect(Branchlist);
                        if (CommonList.Count() > 0)
                        {
                            Lock = tfatUserAuditHeader.AuthLock;
                        }
                    }
                    //Lock = tfatUserAuditHeader.AuthLock;
                }
                if (Mode.Trim().ToUpper() == "DELETE")
                {
                    //if (!String.IsNullOrEmpty(tfatUserAuditHeader.AuthReqBranch))
                    //{
                    //    List<string> GetChild = new List<string>();
                    //    GetChild.Add(mbranchcode);
                    //    var Branchlist = tfatUserAuditHeader.AuthReqBranch.Split(',').ToList();
                    //    var CommonList = GetChild.Intersect(Branchlist);
                    //    if (CommonList.Count() > 0)
                    //    {
                    //        Lock = tfatUserAuditHeader.DeleteLock;
                    //    }
                    //}
                    Lock = tfatUserAuditHeader.DeleteLock;
                }

                //Optional Authorise
                if (Lock == false)
                {
                    Authorisation authorisation = ctxTFAT.Authorisation.OrderByDescending(x => x.RECORDKEY).Where(x => x.TableKey == Tablekey).FirstOrDefault();
                    if (authorisation != null)
                    {
                        var CheckAuth = authorisation.AUTHORISE.Substring(0, 1);
                        if (Mode.Trim().ToUpper() == "EDIT" && tfatUserAuditHeader.OptAuthLock == true && CheckAuth == "A")
                        {
                            Lock = true;
                        }
                        if (Mode.Trim().ToUpper() == "DELETE" && tfatUserAuditHeader.OptDeleteLock == true && CheckAuth == "A")
                        {
                            Lock = true;
                        }
                    }
                }
            }
            return Lock;
        }

        public ActionResult SendPartywiseSMS(string msubtype, string mParentKey, string mCode, int mAltAdd, bool mAuto, string mBranch)
        {
            try
            {
                if (mAltAdd == -1) mAltAdd = 0;
                if (mBranch == "") mBranch = mbranchcode;
                var mrule = ctxTFAT.SMSRules.FirstOrDefault();
                string mType = mParentKey.Substring(0, 5);
                //var mrule = ctxTFAT.SMSRules.Where(z => z.Type == mType && z.Code == mCode).Select(x => new { x.Type, x.SendEmail, x.SendSMS, x.SendSalesman, x.SendBroker, x.SendUser, x.SMSTemp, x.EmailTemp, x.OtherContact }).FirstOrDefault();
                if (mrule == null)
                {
                    return Json(new
                    {
                        Status = "Error",
                        Message = "No rules defined"
                    }, JsonRequestBehavior.AllowGet);
                }
                //bool mSendMail = mrule.SendEmail;
                //bool mSendSMS = mrule.SendSMS;
                //bool mSendSMAN = mrule.SendSalesman;
                //bool mSendBroker = mrule.SendBroker;
                //bool mSendUser = mrule.SendUser;
                //if (mSendSMAN == false && mSendBroker == false && mSendUser == false && !(mSendMail == true || mSendSMS == true))
                //{
                //    return Json(new
                //    {
                //        Status = "Error",
                //        Message = "No rules defined"
                //    }, JsonRequestBehavior.AllowGet);
                //}

                //string mStr = "";
                //DateTime mDocDate = DateTime.Now;
                //int mSalesman = 0;
                //int mBroker = 0;
                ////SMS Template
                //string mSub = GetSubType(mType);
                //string mSMSTemp = (mrule.SMSTemp ?? "").Trim();
                //if (string.IsNullOrEmpty(mSMSTemp) == false)
                //{
                //    mSMSTemp = (ctxTFAT.MsgTemplate.Where(x => x.Code == mSMSTemp).Select(x => x.MsgText).FirstOrDefault() ?? "").Trim();
                //}
                ////Email Template
                //string mEmailTemp = (mrule.EmailTemp ?? "").Trim();
                //if (string.IsNullOrEmpty(mEmailTemp) == false)
                //{
                //    mEmailTemp = (ctxTFAT.MsgTemplate.Where(x => x.Code == mEmailTemp).Select(x => x.MsgText).FirstOrDefault() ?? "").Trim();
                //}

                //string mOthContact = mrule.OtherContact.Trim();

                ////no message text found
                //if (string.IsNullOrEmpty(mSMSTemp) == true && string.IsNullOrEmpty(mEmailTemp) == true)
                //{
                //    return Json(new
                //    {
                //        Status = "Error",
                //        Message = "No rules defined"
                //    }, JsonRequestBehavior.AllowGet);
                //}

                //PROCESS DATA FROM HEADER TABLE(ORDERS, QUOTE, ENQUIRY, SALES, PURCHASE ETC)
                //string mTable = GetTableName(msubtype);
                //if (mSMSTemp.Contains("%") || mEmailTemp.Contains("%"))
                //{
                //    //update for Pending Value from Outstanding
                //    if (mSMSTemp.Contains("%PENDING") || mEmailTemp.Contains("%PENDING"))
                //    {
                //        mStr = GetOutstanding(mParentKey).ToString();
                //        mSMSTemp = mSMSTemp.Replace("%PENDING", mStr);
                //        mEmailTemp = mEmailTemp.Replace("%PENDING", mStr);
                //    }
                //    if (mSMSTemp.Contains("%"))
                //    {
                //        mSMSTemp = mSMSTemp.Replace("%NAMEOFPARTY%", NameofAccount(mCode));
                //        mSMSTemp = mSMSTemp.Replace("%COMPANYNAME%", GetCompanyName(mcompcode));
                //        mSMSTemp = mSMSTemp.Replace("%COMPANYCODE%", mcompcode);
                //        mSMSTemp = mSMSTemp.Replace("%BRANCHNAME%", GetBranchName(mBranch));
                //        mSMSTemp = mSMSTemp.Replace("%BRANCH%", mBranch);
                //        mSMSTemp = mSMSTemp.Replace("%USERID%", muserid);
                //        mSMSTemp = mSMSTemp.Replace("%Time%", DateTime.Now.ToString("HH:mm"));
                //        if (mSMSTemp.Contains("%GETBALANCE%"))
                //            mSMSTemp = mSMSTemp.Replace("%GETBALANCE%", GetBalance(mCode, mDocDate, mBranch).ToString());
                //    }
                //    if (mEmailTemp.Contains("%"))
                //    {
                //        mEmailTemp = mEmailTemp.Replace("%NAMEOFPARTY%", NameofAccount(mCode));
                //        mEmailTemp = mEmailTemp.Replace("%COMPANYNAME%", GetCompanyName(mcompcode));
                //        mEmailTemp = mEmailTemp.Replace("%COMPANYCODE%", mcompcode);
                //        mEmailTemp = mEmailTemp.Replace("%BRANCHNAME%", GetBranchName(mBranch));
                //        mEmailTemp = mEmailTemp.Replace("%BRANCH%", mBranch);
                //        mEmailTemp = mEmailTemp.Replace("%USERID%", muserid);
                //        mEmailTemp = mEmailTemp.Replace("%Time%", DateTime.Now.ToString("HH:mm"));
                //        if (mEmailTemp.Contains("%GETBALANCE%"))
                //            mEmailTemp = mEmailTemp.Replace("%GETBALANCE%", GetBalance(mCode, mDocDate, mBranch).ToString());
                //    }
                //}

                //// process addon fields - SDS 28.8.2020 - tinco
                //if (mSMSTemp.Contains("%F") || mEmailTemp.Contains("%F"))
                //{
                //    string mmain = ctxTFAT.DocTypes.Where(z => z.SubType == msubtype).Select(x => x.MainType).FirstOrDefault();
                //    DataTable mdt = GetDataTable("Select * from AddonDoc" + mmain + " Where TableKey='" + mParentKey + "'");
                //    if (mdt.Rows.Count > 0)
                //    {
                //        for (int n = 1; n <= 50; ++n)
                //        {
                //            string mfld = "F" + n.ToString().PadLeft(3, '0');
                //            if (mdt.Rows[0][mfld] != null)
                //            {
                //                mSMSTemp = mSMSTemp.Replace("%" + mfld + "%", mdt.Rows[0][mfld].ToString());
                //                mEmailTemp = mEmailTemp.Replace("%" + mfld + "%", mdt.Rows[0][mfld].ToString());
                //            }
                //            if (!(mSMSTemp.Contains("%F") || mEmailTemp.Contains("%F"))) break;
                //        }
                //    }
                //}

                //string mEmailTo = "";
                //string mSMSTo = "";
                //string mStr2 = "";
                //if (string.IsNullOrEmpty(mOthContact) == false) //process for the common numbersusers
                //{
                //    var mArr = mOthContact.Split(',');
                //    for (int oCnt = 0; oCnt < mArr.Count(); oCnt++)
                //    {
                //        mStr = mArr[oCnt].Trim().ToString();
                //        if (mArr[oCnt].Trim() != "")
                //        {
                //            mStr2 = ctxTFAT.TfatPass.Where(z => z.Code == mStr).Select(x => x.Email).FirstOrDefault().Trim();
                //            if (mStr2 != "")
                //            {
                //                mEmailTo += mStr2 + ",";
                //            }
                //            mStr2 = ctxTFAT.TfatPass.Where(z => z.Code == mStr).Select(x => x.Mobile).FirstOrDefault().Trim();
                //            if (mStr2 != "")
                //            {
                //                mSMSTo += mStr2 + ",";
                //            }
                //        }
                //    }
                //}

                //if (mSendMail == true && string.IsNullOrEmpty(mEmailTemp) == false)
                //{
                //    mStr2 = ctxTFAT.Address.Where(z => z.Code == mCode && z.Sno == mAltAdd).Select(x => x.Email).FirstOrDefault().Trim();
                //    if (mStr2 != "")
                //    {
                //        mEmailTo += mStr2 + ",";
                //    }

                //    if (mSendSMAN) //send email to Salesman also
                //    {
                //        mStr2 = (ctxTFAT.SalesMan.Where(z => z.Code == mSalesman).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mEmailTo += mStr2 + ",";
                //        }
                //    }

                //    if (mSendBroker)// send email to Salesman also
                //    {
                //        mStr2 = (ctxTFAT.Broker.Where(z => z.Code == mBroker).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mEmailTo += mStr2 + ",";
                //        }
                //    }

                //    if (mSendUser) //send email to Salesman also
                //    {
                //        mStr2 = (ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mEmailTo += mStr2 + ",";
                //        }
                //    }
                //    mEmailTo = CutRightString(mEmailTo, 1, ",");
                //    if (mEmailTo != "")
                //    {
                //        SendEMail(mEmailTo, "ALT.AIR Transaction Alert", mEmailTemp + "\n\n\n\n:Generated from ALT.AIR.3 on Cloud, info@Shruhamsoftware.com", false, "", "", mParentKey, mCode);
                //    }
                //}

                //if (mSendSMS == true && string.IsNullOrEmpty(mSMSTemp) == false)
                //{
                //    mStr2 = (ctxTFAT.Address.Where(z => z.Code == mCode && z.Sno == mAltAdd).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                //    if (mStr2 != null)
                //    {
                //        mSMSTo += mStr2 + ",";
                //    }

                //    if (mSendSMAN) //send SMS to Salesman also
                //    {
                //        mStr2 = (ctxTFAT.SalesMan.Where(z => z.Code == mSalesman).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mSMSTo += mStr2 + ",";
                //        }
                //    }

                //    if (mSendBroker) //send SMS to broker also
                //    {
                //        mStr2 = (ctxTFAT.Broker.Where(z => z.Code == mBroker).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mSMSTo += mStr2 + ",";
                //        }
                //    }

                //    if (mSendUser) //send SMS to user also
                //    {
                //        mStr2 = (ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                //        if (mStr2 != "")
                //        {
                //            mSMSTo += mStr2 + ",";
                //        }
                //    }
                //    mSMSTo = CutRightString(mSMSTo, 1, ",");
                //    if (mSMSTo != "")
                //    {
                //        SendSMS(mSMSTo, mSMSTemp, mAuto, mCode, false, mParentKey);
                //    }
                //}
                return Json(new { Status = "Success", Message = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Status = "Error",
                    ex.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public string SendSMS(string mMobile, string mMsg, bool mAuto, string mParty = "", bool UseSuchanURL = false, string mParentKey = "")
        {
            int mid = 0;
            try
            {
                //mMsg = "SHRUHM Your Consignment has been {#var#} Docket No{#var#} Doc.Date{#var#} From{#var#}  To{#var#} Del.Date{#var#} Quantity{#var#} Thank You,";
                if (mParentKey != "" && mParty == "")
                {
                    string mmain = GetMainType(mParentKey.Substring(0, 5));
                    if ("SL~PR".Contains(mmain))
                    {
                        mParty = Fieldoftable(mmain == "SL" ? "Sales" : "Purchase", "Code", "TableKey='" + mParentKey + "'");
                    }
                }
                mMobile = mMobile.Trim();
                if (mMobile == "" && mParty != "")
                {
                    string mStr = NameofAccount(mParty);
                    if (mStr == "")
                    {
                        mStr = mParty; // if the passed value is account code and not the name then mstr will be blank
                    }
                    mMobile = ctxTFAT.Address.Where(x => x.Code == mStr).Select(z => z.Mobile).FirstOrDefault();
                }

                // to update server for no. of SMS
                //http://www.suchansoftware.com/smsgateway.aspx?345678ST0241000
                // Get Count    
                //http://www.suchansoftware.com/smsgateway.aspx?567890ST024^9327004099^TFAT^count
                WebRequest request = null;
                HttpWebResponse response = null;
                string mUID = "";
                string mPass = "";
                string mCaption = "";
                string mURL = "";
                string mProxy = "";
                bool mSMSPrefix = false;
                mMsg = mMsg.Replace("^~|", "\n");
                mMsg = mMsg.Replace("^b", "").Replace("^eb", "");   // bold attributes used in email
                mMsg = mMsg.Replace("<b>", "").Replace("</b>", ""); // bold attributes used in email

                var mSMSobj = ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => new { x.SMSURL, x.SMSUserId, x.SMSPass, x.SMSCaption, x.ProxyServer, x.SMSPrefix }).FirstOrDefault();
                if (mSMSobj != null)
                {
                    mUID = mSMSobj.SMSUserId ?? "";
                    mPass = mSMSobj.SMSPass ?? "";
                    mCaption = mSMSobj.SMSCaption == "" ? "ALT.AIR.3 " : mSMSobj.SMSCaption;
                    mURL = mSMSobj.SMSURL ?? "";
                    mProxy = mSMSobj.ProxyServer ?? "";
                    mSMSPrefix = mSMSobj.SMSPrefix;
                    if (mURL == "" && mAuto == false)
                    {
                        //return Json(new { Status = "Error", Message = "SMS URL not found.." }, JsonRequestBehavior.AllowGet);
                        return "SMS URL is not Configured..";
                    }
                }
                // customer has bought sms services from us.
                if (UseSuchanURL == false)
                {
                    UseSuchanURL = Convert.ToBoolean(Session["SuchanSMS"]);
                }
                if (UseSuchanURL == true)
                {
                    mURL = "http://login.businesslead.co.in/api/mt/SendSMS?user=suchansoftware&password=suchan2017bl17&senderid=SUCHAN&channel=Trans&DCS=0&flashsms=0&route=6&number=%RECMOBILE%&text=%MESSAGE%";
                }
                //Fields: UserID: %ID%, Password: %PASS%, Caption: %CAPTION%, Rec.Mobile No: %RECMOBILE%, MessageText: %MESSAGE%, Schedule Date: %SCHDATE%, Schedule Time: %SCHTIME%
                #region Not Required Suchan Code
                mURL = mURL.Replace("%ID%", mUID);
                mURL = mURL.Replace("%PASS%", mPass);
                mURL = mURL.Replace("%CAPTION%", mCaption);
                mMsg = mMsg.Replace("%", "");
                string mOMsg = mMsg;
                mURL = mURL.Replace("\n", "");
                string moURL = mURL;
                if (mProxy == "0")
                {
                    mProxy = "";
                }
                #endregion

                var mArr = mMobile.Split(',');
                for (int n = 0; n < mArr.Count(); n++)
                {
                    mMobile = mArr[n];
                    if (mMobile != "")
                    {
                        if (mSMSPrefix == true)
                        {
                            if (mMobile.Substring(0, 3) != "+91")
                            {
                                if (mMobile.Substring(0, 1) != "0")
                                {
                                    mMobile = "0" + mMobile;
                                }
                            }
                        }

                        mMsg = mOMsg;
                        mURL = moURL;
                        //if (UseSuchanURL == false)
                        //{
                        mURL = mURL.Replace("%MESSAGE%", mMsg).Replace("%RECMOBILE%", mMobile).Trim();
                        //HttpUtility.UrlEncode(
                        //}
                        //else
                        //{
                        //    mURL = "http://login.businesslead.co.in/api/mt/SendSMS?user=suchansoftware&password=suchan2017bl17&senderid=SUCHAN&channel=Trans&DCS=0&flashsms=0&route=6&number=" + mMobile + "&text=" + mMsg;
                        //}


                        mURL = "https://web.insignsms.com/api/sendsms?username=shruhamsoftware&password=shruhamsoftware&senderid=SHRUHM&message=" + mMsg + "&numbers=" + mMobile + "&dndrefund=1";

                        try
                        {// You can convert a string into a byte array
                            byte[] asciiBytes = Encoding.ASCII.GetBytes(mMsg);

                            // You can convert a byte array into a char array
                            char[] asciiChars = Encoding.ASCII.GetChars(asciiBytes);
                            string asciiString = new string(asciiChars);
                            using (WebClient client = new WebClient())
                            {
                                //var responseObject = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObjectVM>(client.DownloadString(mURL));
                                var FFF = "https://web.insignsms.com/api/sendsms?username=shruhamsoftware&password=shruhamsoftware&senderid=SHRUHM&message=" + asciiString + "&numbers=" + mMobile + "&dndrefund=1";
                                var content = client.DownloadString(FFF);
                            }
                            mid = SaveSMSLog(mMobile, mMsg, mParentKey, mParty);
                        }
                        catch (Exception ex)
                        {
                            ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                            return "Error!\nInvalid SMS URL..or Server not Reachable.." + ex.InnerException;

                            //return Json(new { Status = "Error", Message = ex.InnerException }, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                return "Text Message is Sent to\n" + mMobile;
                //return Json(new { Status = "Success", Message = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                return "Error!\n" + smtex.InnerException;
                //return Json(new { Status = "Error", Message = smtex.InnerException }, JsonRequestBehavior.AllowGet);
            }
        }


        public bool PeriodLock(string Branch, string Type, DateTime Docdate)
        {
            bool Lock = false;
            var Date = ConvertDDMMYYTOYYMMDD(Docdate.ToShortDateString());
            if (ctxTFAT.PeriodLock.Where(x => x.Type == Type && x.LockDate == Date && x.Branch == Branch).Select(x => x.Locked).FirstOrDefault() == true)
            {
                Lock = true;
            }
            else
            {
                Lock = false;
            }
            return Lock;
        }

        #region Create By Suresh Send Email Function

        public void SendSMS_MSG_Email(string mMode, decimal mAmt, string mParentKey, DateTime mDate, string mAccount, string mtable = "A", string FMTYPEOnly = "")
        {

            string EmailmStr = "";
            string mType = "";
            mType = mParentKey.Substring(12, 5);
            string mStr = "Mode of Input: " + mMode;
            mStr += "\n       Branch: " + mParentKey.Substring(0, 6);
            mStr += "\n         Type: " + mType;
            mStr += "\n       Prefix: " + mParentKey.Substring(17, 2);
            mStr += "\n       Serial: " + mParentKey.Substring(20);
            mStr += "\n       UserID: " + muserid;
            mStr += "\n     Doc.Date: " + mDate;
            mStr += "\n       Amount: " + mAmt;
            mStr += "\n        Party: " + NameofAccount(mAccount, mtable);

            var SendSMSList = new List<string>();
            var EmailList = new List<string>();
            var MSGList = new List<string>();

            var LRParentkey = mParentKey.Substring(6);
            LRMaster rMaster = null;
            rMaster = ctxTFAT.LRMaster.Where(x => x.ParentKey == LRParentkey).FirstOrDefault();


            if (mMode == "Add")
            {
                if (mType == "LR000" || mType == "DELV0")
                {
                    #region UserRule(SMS) 
                    var MEssegeRule1 = ctxTFAT.MessageRules.Where(x => x.SmsBranch.Contains(mbranchcode) && x.SendSMS == true && x.Type == mType).ToList();

                    foreach (var item in MEssegeRule1)
                    {
                        string mMobile = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Locked == false).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                        if (!String.IsNullOrEmpty(mMobile))
                        {
                            EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                            SendSMSList.Add(item.SMSTemp + "^" + mMobile + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                        }
                    }
                    #endregion

                    #region Party And USer(Party Rule)
                    var SMSRule1 = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.PartyBranch.Contains(mbranchcode) && x.PartySMS == true && x.Type == mType).ToList();
                    foreach (var item in SMSRule1)
                    {
                        var ActiveCustomerCheck = ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Hide).FirstOrDefault();
                        if (ActiveCustomerCheck == false)
                        {


                            string mMobile = (ctxTFAT.Caddress.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower()).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                            if (!String.IsNullOrEmpty(mMobile))
                            {
                                EmialLogPersonName = "Customer Name : " + ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                                SendSMSList.Add(item.PartySMSTemp + "^" + mMobile + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                            }
                        }
                    }

                    SMSRule1 = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserSMS == true && x.Type == mType).ToList();

                    foreach (var item in SMSRule1)
                    {
                        var USer = item.UsersList.Split(',');
                        foreach (var item1 in USer)
                        {
                            string mMobile = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item1.Trim().ToLower() && z.Locked == false).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                            if (!String.IsNullOrEmpty(mMobile))
                            {
                                EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item1).Select(x => x.Name).FirstOrDefault();
                                SendSMSList.Add(item.PartySMSTemp + "^" + mMobile + "^" + item1.Trim() + "^" + EmialLogPersonName);
                            }
                        }

                    }
                    #endregion
                    #region Consignor Send SMS
                    if (mType == "LR000")
                    {
                        //var LRParentkey = mParentKey.Substring(6);
                        //LRMaster rMaster = ctxTFAT.LRMaster.Where(x => x.ParentKey == LRParentkey).FirstOrDefault();
                        var ConsignorSMSRule1 = ctxTFAT.ConsignorRule.Where(x => x.Code == rMaster.RecCode && x.Branch.Contains(mbranchcode) && x.SMSReq == true && x.Type == mType).ToList();
                        foreach (var item in ConsignorSMSRule1)
                        {
                            var Consigner = ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).FirstOrDefault();
                            if (Consigner != null)
                            {
                                EmialLogPersonName = "Consignor Name : " + Consigner.Name;

                                var ConsigerList = ctxTFAT.ConsignerAddress.Where(x => x.Code == item.Code.Trim()).ToList();
                                if (ConsigerList != null)
                                {
                                    var MobileList = "";
                                    foreach (var Con in ConsigerList)
                                    {
                                        if (Con.AllSendSMS)
                                        {
                                            if (!(String.IsNullOrEmpty(Con.Mobile)))
                                            {
                                                MobileList += Con.Mobile + ",";
                                            }
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(MobileList))
                                    {
                                        MobileList = MobileList.Substring(0, MobileList.Length - 1);
                                        SendSMSList.Add(item.SMSTemp + "^" + MobileList + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                                    }
                                }
                            }

                        }
                        var ConsigneeSMSRule1 = ctxTFAT.ConsignorRule.Where(x => x.Code == rMaster.SendCode && x.Branch.Contains(mbranchcode) && x.SMSReq == true && x.Type == mType).ToList();
                        foreach (var item in ConsigneeSMSRule1)
                        {
                            var Consigner = ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).FirstOrDefault();
                            if (Consigner != null)
                            {
                                EmialLogPersonName = "Consignee Name : " + Consigner.Name;

                                var ConsigerList = ctxTFAT.ConsignerAddress.Where(x => x.Code == item.Code.Trim()).ToList();
                                if (ConsigerList != null)
                                {
                                    var MobileList = "";
                                    foreach (var Con in ConsigerList)
                                    {
                                        if (Con.AllSendSMS)
                                        {
                                            if (!(String.IsNullOrEmpty(Con.Mobile)))
                                            {
                                                MobileList += Con.Mobile + ",";
                                            }
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(MobileList))
                                    {
                                        MobileList = MobileList.Substring(0, MobileList.Length - 1);
                                        SendSMSList.Add(item.SMSTemp + "^" + MobileList + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                }
                else if (mType == "FM000" || mType == "FMH00")
                {
                    mType = FMTYPEOnly;

                    #region UserRule(SMS) 
                    var MEssegeRule1 = ctxTFAT.MessageRules.Where(x => x.SmsBranch.Contains(mbranchcode) && x.SendSMS == true && x.Type == mType).ToList();

                    foreach (var item in MEssegeRule1)
                    {
                        string mMobile = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Locked == false).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                        if (!String.IsNullOrEmpty(mMobile))
                        {
                            EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                            SendSMSList.Add(item.SMSTemp + "^" + mMobile + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                        }
                    }
                    #endregion

                    #region Party And USer(Party Rule)
                    var SMSRule1 = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.PartyBranch.Contains(mbranchcode) && x.PartySMS == true && x.Type == mType).ToList();
                    foreach (var item in SMSRule1)
                    {
                        var ActiveCustomerCheck = ctxTFAT.Master.Where(x => x.Code == item.Code).Select(x => x.Hide).FirstOrDefault();
                        if (ActiveCustomerCheck == false)
                        {
                            string mMobile = (ctxTFAT.Address.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower()).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                            if (!String.IsNullOrEmpty(mMobile))
                            {
                                EmialLogPersonName = "Broker Name : " + ctxTFAT.Master.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                                SendSMSList.Add(item.PartySMSTemp + "^" + mMobile + "^" + item.Code.Trim() + "^" + EmialLogPersonName);
                            }
                        }
                    }

                    SMSRule1 = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserSMS == true && x.Type == mType).ToList();

                    foreach (var item in SMSRule1)
                    {
                        var USer = item.UsersList.Split(',');
                        foreach (var item1 in USer)
                        {
                            string mMobile = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item1.Trim().ToLower() && z.Locked == false).Select(x => x.Mobile).FirstOrDefault() ?? "").Trim();
                            if (!String.IsNullOrEmpty(mMobile))
                            {
                                EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item1).Select(x => x.Name).FirstOrDefault();
                                SendSMSList.Add(item.PartySMSTemp + "^" + mMobile + "^" + item1.Trim() + "^" + EmialLogPersonName);
                            }
                        }

                    }
                    #endregion
                }
            }

            #region Check Email

            #region User Rule
            var MEssegeRule = ctxTFAT.MessageRules.Where(x => x.EmailBranch.Contains(mbranchcode) && ((x.EmailAdd == true && mMode == "Add") || (x.EmaiEdit == true && mMode == "Edit") || (x.EmaiDelete == true && mMode == "Delete") || (x.EmaiPrint == true)) && x.Type == mType).ToList();
            foreach (var item in MEssegeRule)
            {
                string mEmail = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Locked == false).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                //Match match = Emailregex.Match(mEmail);
                //if (match.Success)
                {
                    EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                    EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                }
            }
            #endregion

            #region Check Party Rule--> Email
            if (mType == "LR000" && mMode == "Add")
            {
                var SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.PartyBranch.Contains(mbranchcode) && x.PartyEmail == true && x.Type == mType).ToList();
                foreach (var item in SMSRule)
                {
                    var ActiveCustomerCheck = ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Hide).FirstOrDefault();
                    if (ActiveCustomerCheck == false)
                    {
                        string mEmail = (ctxTFAT.Caddress.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower()).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                        //Match match = Emailregex.Match(mEmail);
                        //if (match.Success)
                        if (!String.IsNullOrEmpty(mEmail))
                        {
                            EmialLogPersonName = "Customer Name : " + ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                            EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                        }
                    }
                }

                SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserEmail == true && x.Type == mType).ToList();
                foreach (var item in SMSRule)
                {
                    var Userli = item.UsersList.Split(',');
                    foreach (var item1 in Userli)
                    {
                        string mEmail = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item1.Trim().ToLower() && z.Locked == false).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                        //Match match = Emailregex.Match(mEmail);
                        //if (match.Success)
                        {
                            EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item1).Select(x => x.Name).FirstOrDefault();
                            EmailList.Add(mEmail.Trim() + "^" + item1.Trim().ToLower() + "^" + EmialLogPersonName);
                        }
                    }

                }
            }
            else if ((mType == "FM000" || mType == "FMH00") && mMode == "Add")
            {
                var SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.PartyBranch.Contains(mbranchcode) && x.PartyEmail == true && x.Type == mType).ToList();
                foreach (var item in SMSRule)
                {
                    var ActiveCustomerCheck = ctxTFAT.Master.Where(x => x.Code == item.Code).Select(x => x.Hide).FirstOrDefault();
                    if (ActiveCustomerCheck == false)
                    {
                        string mEmail = (ctxTFAT.Address.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower()).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                        //Match match = Emailregex.Match(mEmail);
                        //if (match.Success)
                        if (!String.IsNullOrEmpty(mEmail))
                        {
                            EmialLogPersonName = "Broker Name : " + ctxTFAT.Master.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                            EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                        }
                    }
                }

                SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserEmail == true && x.Type == mType).ToList();
                foreach (var item in SMSRule)
                {
                    var Userli = item.UsersList.Split(',');
                    foreach (var item1 in Userli)
                    {
                        string mEmail = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item1.Trim().ToLower() && z.Locked == false).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                        //Match match = Emailregex.Match(mEmail);
                        //if (match.Success)
                        {
                            EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item1).Select(x => x.Name).FirstOrDefault();
                            EmailList.Add(mEmail.Trim() + "^" + item1.Trim().ToLower() + "^" + EmialLogPersonName);
                        }
                    }

                }
            }



            #endregion

            #region Consignor Email

            if (mType == "LR000" && mMode == "Add")
            {
                //var LRParentkey = mParentKey.Substring(6);
                //LRMaster rMaster = ctxTFAT.LRMaster.Where(x => x.ParentKey == LRParentkey).FirstOrDefault();
                var ConsignorSMSRule = ctxTFAT.ConsignorRule.Where(x => x.Code == rMaster.RecCode && x.Branch.Contains(mbranchcode) && x.EmailReq == true && x.Type == mType).ToList();
                foreach (var item in ConsignorSMSRule)
                {
                    //string mEmail = (ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                    //Match match = Emailregex.Match(mEmail);
                    //if (match.Success)
                    //if (!String.IsNullOrEmpty(mEmail))
                    //{
                    //   EmialLogPersonName = "Consignor Name : " + ctxTFAT.Consigner.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                    //    EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                    //}
                    var Consigner = ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).FirstOrDefault();
                    if (Consigner != null)
                    {
                        EmialLogPersonName = "Consignor Name : " + Consigner.Name;

                        var ConsigerList = ctxTFAT.ConsignerAddress.Where(x => x.Code == item.Code.Trim()).ToList();
                        if (ConsigerList != null)
                        {
                            var EmailListC = "";
                            foreach (var Con in ConsigerList)
                            {
                                if (Con.AllSendEmail)
                                {
                                    if (!(String.IsNullOrEmpty(Con.Email)))
                                    {
                                        EmailListC += Con.Email + ",";
                                    }
                                }
                            }
                            if (!String.IsNullOrEmpty(EmailListC))
                            {
                                EmailListC = EmailListC.Substring(0, EmailListC.Length - 1);
                                EmailList.Add(EmailListC.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                            }
                        }
                    }
                }
                var ConsigneeSMSRule = ctxTFAT.ConsignorRule.Where(x => x.Code == rMaster.SendCode && x.Branch.Contains(mbranchcode) && x.EmailReq == true && x.Type == mType).ToList();
                foreach (var item in ConsigneeSMSRule)
                {
                    //string mEmail = (ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                    //EmialLogPersonName = "Consignee Name : " + ctxTFAT.Consigner.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                    //EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);

                    var Consigner = ctxTFAT.Consigner.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Acitve == true).FirstOrDefault();
                    if (Consigner != null)
                    {
                        EmialLogPersonName = "Consignee Name : " + Consigner.Name;

                        var ConsigerList = ctxTFAT.ConsignerAddress.Where(x => x.Code == item.Code.Trim()).ToList();
                        if (ConsigerList != null)
                        {
                            var EmailListC = "";
                            foreach (var Con in ConsigerList)
                            {
                                if (Con.AllSendEmail)
                                {
                                    if (!(String.IsNullOrEmpty(Con.Email)))
                                    {
                                        EmailListC += Con.Email + ",";
                                    }
                                }
                            }
                            if (!String.IsNullOrEmpty(EmailListC))
                            {
                                EmailListC = EmailListC.Substring(0, EmailListC.Length - 1);
                                EmailList.Add(EmailListC.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                            }
                        }
                    }
                }
            }

            #endregion

            #endregion

            #region Check MSG 

            #region User Rule
            MEssegeRule = ctxTFAT.MessageRules.Where(x => x.MsgBranch.Contains(mbranchcode) && ((x.MsgAdd == true && mMode == "Add") || (x.MsgEdit == true && mMode == "Edit") || (x.MsgDelete == true && mMode == "Delete") || (x.MsgPrint == true)) && x.Type == mType).ToList();
            foreach (var item in MEssegeRule)
            {
                MSGList.Add(item.Code.Trim());
            }
            #endregion

            #region Party Rule
            var SMSRuleD = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserMsg == true && x.Type == mType).ToList();
            foreach (var item in SMSRuleD)
            {
                var UserList2 = item.UsersList.Split(',');

                foreach (var item1 in UserList2)
                {
                    MSGList.Add(item1.Trim());
                }
            }

            #endregion

            #endregion

            var GetSMSList = SendSMSList.Distinct().ToList();
            var GetEmailList = EmailList.Distinct().ToList();
            var GetMSGList = MSGList.Distinct().ToList();


            if (GetMSGList.Count() > 0)
            {
                foreach (var item in GetMSGList)
                {
                    MessageLog mMsg = new MessageLog();
                    mMsg.MessageID = GetMessageId();
                    mMsg.mDate = DateTime.Now;
                    mMsg.mTime = DateTime.Now;
                    //Convert.ToDateTime(DateTime.Now.ToString("HH:mm"));
                    mMsg.Code = item;
                    mMsg.Type = mType;
                    mMsg.Category = 100001;
                    mMsg.Prefix = mParentKey.Substring(11, 2);
                    mMsg.Srl = mParentKey.Substring(13, mParentKey.Length - 13);
                    mMsg.FromIDs = muserid;
                    mMsg.Message = mStr;
                    mMsg.ENTEREDBY = muserid;
                    mMsg.AUTHIDS = muserid;
                    mMsg.AUTHORISE = "A00";
                    mMsg.LASTUPDATEDATE = DateTime.Now;
                    mMsg.TableKey = mParentKey.Substring(6, mParentKey.Length - 6);
                    ctxTFAT.MessageLog.Add(mMsg);
                    ctxTFAT.SaveChanges();
                }
            }
            if (GetEmailList.Count() > 0)
            {
                var MailGlobal = ctxTFAT.TfatComp.Select(x => x.GlobalMail).FirstOrDefault();

                var RemoveDuplicate = new List<string>();
                EmialLogHeader = "Auto Email Booking Time. ";
                EmialLogAutoRemark = "Auto Email Rule Through. ";
                foreach (var item in GetEmailList)
                {
                    var SplitData = item.Split('^');
                    if (!RemoveDuplicate.Contains(SplitData[0].Trim().ToLower()))
                    {
                        RemoveDuplicate.Add(SplitData[0].Trim().ToLower());
                        EmialLogPersonName = SplitData[2];
                        if (mType == "LR000")
                        {
                            string mParty = SplitData[1];
                            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();

                            bool AttachmentReq = false;
                            var PrintFormats = "";

                            PrintFormats = ctxTFAT.SMSRules.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmailAttachments).FirstOrDefault();
                            if (String.IsNullOrEmpty(PrintFormats))
                            {
                                PrintFormats = ctxTFAT.SMSRules.Where(x => x.UsersList.Contains(mParty) && x.Type == mType).Select(x => x.UserEmailAttachments).FirstOrDefault();
                            }
                            if (!String.IsNullOrEmpty(PrintFormats))
                            {
                                if (lRMaster != null)
                                {
                                    AttachmentReq = true;
                                }
                            }
                            #region Consignor Rule
                            if (String.IsNullOrEmpty(PrintFormats))
                            {
                                PrintFormats = ctxTFAT.ConsignorRule.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmail).FirstOrDefault();
                                if (!String.IsNullOrEmpty(PrintFormats))
                                {
                                    if (lRMaster != null)
                                    {
                                        AttachmentReq = true;
                                    }
                                }
                            }

                            #endregion


                            EmailmStr = "<html>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            EmailmStr += "<br/>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">LR No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            EmailmStr += "</html>";
                            var mstream = BaseGetStream(PrintFormats, lRMaster.TableKey, lRMaster.Branch);
                            string CheckEmail = SplitData[0];
                            if (CheckEmail.Contains("@"))
                            {
                                ShruhamSendEMail(SplitData[0], "Consignmnet Booking Details", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal, AttachmentReq, mstream);
                            }
                        }
                        else if (mType == "DELV0")
                        {
                            string mParty = SplitData[1];

                            DeliveryMaster delivery = ctxTFAT.DeliveryMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();
                            LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.TableKey == delivery.ParentKey).FirstOrDefault();

                            bool AttachmentReq = false;
                            var PrintFormats = "";

                            PrintFormats = ctxTFAT.SMSRules.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmailAttachments).FirstOrDefault();
                            if (String.IsNullOrEmpty(PrintFormats))
                            {
                                PrintFormats = ctxTFAT.SMSRules.Where(x => x.UsersList.Contains(mParty) && x.Type == mType).Select(x => x.UserEmailAttachments).FirstOrDefault();
                            }
                            if (!String.IsNullOrEmpty(PrintFormats))
                            {
                                if (lRMaster != null)
                                {
                                    AttachmentReq = true;
                                }
                            }
                            #region Consignor Rule
                            PrintFormats = ctxTFAT.ConsignorRule.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmail).FirstOrDefault();
                            if (!String.IsNullOrEmpty(PrintFormats))
                            {
                                if (lRMaster != null)
                                {
                                    AttachmentReq = true;
                                }
                            }
                            #endregion


                            EmailmStr = "<html>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            EmailmStr += "<br/>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Docket No: <b>" + lRMaster.LrNo + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                            EmailmStr += "</html>";
                            var mstream = BaseGetStream(PrintFormats, lRMaster.TableKey, lRMaster.Branch);
                            string CheckEmail = SplitData[0];
                            if (CheckEmail.Contains("@"))
                            {
                                ShruhamSendEMail(SplitData[0], "Consignmnet Delivery Details", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal, AttachmentReq, mstream);
                            }
                        }
                        else if (mType == "FM000" || mType == "FMH00")
                        {
                            string mParty = SplitData[1];
                            FMMaster fMMaster = ctxTFAT.FMMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();

                            bool AttachmentReq = false;
                            var PrintFormats = "";

                            PrintFormats = ctxTFAT.SMSRules.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmailAttachments).FirstOrDefault();
                            if (String.IsNullOrEmpty(PrintFormats))
                            {
                                PrintFormats = ctxTFAT.SMSRules.Where(x => x.UsersList.Contains(mParty) && x.Type == mType).Select(x => x.UserEmailAttachments).FirstOrDefault();
                            }
                            if (!String.IsNullOrEmpty(PrintFormats))
                            {
                                if (fMMaster != null)
                                {
                                    AttachmentReq = true;
                                }
                            }

                            EmailmStr = "<html>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                            EmailmStr += "<br/>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">FM No: <b>" + fMMaster.FmNo + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + fMMaster.Date.ToShortDateString() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Broker: <b>" + (ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Freight: <b>" + fMMaster.Freight + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Advance: <b>" + fMMaster.Adv + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Balance: <b>" + fMMaster.Balance + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Vehicle NO: <b>" + ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Vehicle Category: <b>" + ctxTFAT.VehicleCategory.Where(x => x.Code == fMMaster.VehicleCategory).Select(x => x.VehicleCategory1).FirstOrDefault() + "</b></span></p>";
                            EmailmStr += "</html>";
                            var mstream = BaseGetStream(PrintFormats, fMMaster.TableKey, fMMaster.Branch);
                            string CheckEmail = SplitData[0];
                            if (CheckEmail.Contains("@"))
                            {
                                ShruhamSendEMail(SplitData[0], mType == "FM000" ? "Freight Memo Details" : "Hire Freight Memo Details", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal, AttachmentReq, mstream);
                            }
                        }
                        else
                        {
                            EmailmStr = "<html>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + (ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                            EmailmStr += "<br/>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Mode: <b>" + mMode + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Branch: <b>" + (mParentKey.Substring(0, 6) + " - " + ctxTFAT.TfatBranch.Where(z => z.Code == mParentKey.Substring(0, 6)).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Type: <b>" + (mType + " - " + ctxTFAT.DocTypes.Where(z => z.Code == mType).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Serial: <b>" + mParentKey.Substring(13, mParentKey.Length - 13) + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">UserID: <b>" + muserid + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Doc.Date: <b>" + mDate.Date + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Amount: <b>" + mAmt + "</b></span></p>";
                            EmailmStr += "<p><span style=\"font-family:Tahoma\">Party: <b>" + NameofAccount(mAccount, mtable) + "</b></span></p>";
                            EmailmStr += "</html>";
                            string CheckEmail = SplitData[0];
                            if (CheckEmail.Contains("@"))
                            {
                                ShruhamSendEMail(SplitData[0], "ALT.AIR Transaction Alerts", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal);
                            }
                        }
                    }


                }
            }
            if (GetSMSList.Count() > 0)
            {
                var RemoveDuplicate = new List<string>();
                EmialLogHeader = "Auto SMS At Booking Time. ";
                EmialLogAutoRemark = "Auto SMS Rule Through. ";
                foreach (var item in GetSMSList)
                {
                    var SplitData = item.Split('^');
                    if (!RemoveDuplicate.Contains(SplitData[1].Trim()))
                    {
                        EmialLogPersonName = SplitData[3];
                        Send_Sms_Insign(SplitData[0], SplitData[1], SplitData[2], mParentKey, mDate);
                    }
                }

                //SSendSMS(GetSMSList, mParentKey, mDate);
            }

        }
        public void SendSMS_MSG_EmailOfMaster(string mMode, decimal mAmt, string mParentKey, DateTime mDate, string mAccount, string mtable = "A")
        {

            string EmailmStr = "";
            string mType = "";
            mType = mParentKey.Substring(6, 5);
            string mStr = "Mode of Input: " + mMode;
            mStr += "\n       Branch: " + mParentKey.Substring(0, 6);
            mStr += "\n         Type: " + mType;
            mStr += "\n       Prefix: " + mParentKey.Substring(11, 2);
            mStr += "\n       Serial: " + mParentKey.Substring(13, mParentKey.Length - 13);
            mStr += "\n       UserID: " + muserid;
            mStr += "\n     Doc.Date: " + mDate;
            mStr += "\n       Amount: " + mAmt;
            mStr += "\n        Party: " + NameofAccount(mAccount, mtable);

            var EmailList = new List<string>();
            var MSGList = new List<string>();

            #region Check Email

            #region User Rule
            var MEssegeRule = ctxTFAT.MasterMessageRules.Where(x => x.EmailBranch.Contains(mbranchcode) && ((x.EmailAdd == true && mMode == "Add") || (x.EmaiEdit == true && mMode == "Edit") || (x.EmaiDelete == true && mMode == "Delete") || (x.EmaiPrint == true)) && x.Type == mType).ToList();
            foreach (var item in MEssegeRule)
            {
                string mEmail = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower() && z.Locked == false).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                //Match match = Emailregex.Match(mEmail);
                //if (match.Success)
                {
                    EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                    EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                }
            }
            #endregion

            #region Check Party Rule--> Email
            var SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.PartyBranch.Contains(mbranchcode) && x.PartyEmail == true && x.Type == mType).ToList();
            foreach (var item in SMSRule)
            {
                var ActiveCustomerCheck = ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Hide).FirstOrDefault();
                if (ActiveCustomerCheck == false)
                {
                    string mEmail = (ctxTFAT.Caddress.Where(z => z.Code.Trim().ToLower() == item.Code.Trim().ToLower()).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                    //Match match = Emailregex.Match(mEmail);
                    //if (match.Success)
                    {
                        EmialLogPersonName = "Customer Name : " + ctxTFAT.CustomerMaster.Where(x => x.Code == item.Code).Select(x => x.Name).FirstOrDefault();
                        EmailList.Add(mEmail.Trim() + "^" + item.Code.Trim().ToLower() + "^" + EmialLogPersonName);
                    }
                }
            }

            SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserEmail == true && x.Type == mType).ToList();
            foreach (var item in SMSRule)
            {
                var Userli = item.UsersList.Split(',');
                foreach (var item1 in Userli)
                {
                    string mEmail = (ctxTFAT.TfatPass.Where(z => z.Code.Trim().ToLower() == item1.Trim().ToLower() && z.Locked == false).Select(x => x.Email).FirstOrDefault() ?? "").Trim();
                    //Match match = Emailregex.Match(mEmail);
                    //if (match.Success)
                    {
                        EmialLogPersonName = "User Name : " + ctxTFAT.TfatPass.Where(x => x.Code == item1).Select(x => x.Name).FirstOrDefault();
                        EmailList.Add(mEmail.Trim() + "^" + item1.Trim().ToLower() + "^" + EmialLogPersonName);
                    }
                }

            }

            #endregion

            #endregion

            #region Check MSG 

            #region User Rule
            MEssegeRule = ctxTFAT.MasterMessageRules.Where(x => x.MsgBranch.Contains(mbranchcode) && ((x.MsgAdd == true && mMode == "Add") || (x.MsgEdit == true && mMode == "Edit") || (x.MsgDelete == true && mMode == "Delete") || (x.MsgPrint == true)) && x.Type == mType).ToList();
            foreach (var item in MEssegeRule)
            {
                MSGList.Add(item.Code.Trim());
            }
            #endregion

            #region Party Rule
            SMSRule = ctxTFAT.SMSRules.Where(x => x.Code == mAccount && x.UserBranch.Contains(mbranchcode) && x.UserMsg == true && x.Type == mType).ToList();
            foreach (var item in SMSRule)
            {
                var UserList2 = item.UsersList.Split(',');

                foreach (var item1 in UserList2)
                {
                    MSGList.Add(item1.Trim());
                }

            }

            #endregion

            #endregion

            var GetEmailList = EmailList.Distinct().ToList();
            var GetMSGList = MSGList.Distinct().ToList();


            if (GetMSGList.Count() > 0)
            {
                foreach (var item in GetMSGList)
                {
                    MessageLog mMsg = new MessageLog();
                    mMsg.MessageID = GetMessageId();
                    mMsg.mDate = DateTime.Now;
                    mMsg.mTime = DateTime.Now;
                    //Convert.ToDateTime(DateTime.Now.ToString("HH:mm"));
                    mMsg.Code = item;
                    mMsg.Type = mType;
                    mMsg.Category = 100001;
                    mMsg.Prefix = mParentKey.Substring(11, 2);
                    mMsg.Srl = mParentKey.Substring(13, mParentKey.Length - 13);
                    mMsg.FromIDs = muserid;
                    mMsg.Message = mStr;
                    mMsg.ENTEREDBY = muserid;
                    mMsg.AUTHIDS = muserid;
                    mMsg.AUTHORISE = "A00";
                    mMsg.LASTUPDATEDATE = DateTime.Now;
                    mMsg.TableKey = mParentKey.Substring(6, mParentKey.Length - 6);
                    ctxTFAT.MessageLog.Add(mMsg);
                    ctxTFAT.SaveChanges();
                }
            }
            if (GetEmailList.Count() > 0)
            {
                var MailGlobal = ctxTFAT.TfatComp.Select(x => x.GlobalMail).FirstOrDefault();
                EmialLogHeader = "Auto Email Add Master Time. ";
                EmialLogAutoRemark = "Auto Email Master Rule Through. ";
                foreach (var item in GetEmailList)
                {
                    var SplitData = item.Split('^');
                    EmialLogPersonName = SplitData[2];
                    if (mType == "LR000")
                    {
                        string mParty = SplitData[1];
                        LRMaster lRMaster = ctxTFAT.LRMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();

                        bool AttachmentReq = false;
                        var PrintFormats = "";

                        PrintFormats = ctxTFAT.SMSRules.Where(x => x.Code == mParty && x.Type == mType).Select(x => x.PartyEmailAttachments).FirstOrDefault();
                        if (String.IsNullOrEmpty(PrintFormats))
                        {
                            PrintFormats = ctxTFAT.SMSRules.Where(x => x.UsersList.Contains(mParty) && x.Type == mType).Select(x => x.UserEmailAttachments).FirstOrDefault();
                        }
                        if (!String.IsNullOrEmpty(PrintFormats))
                        {
                            if (lRMaster != null)
                            {
                                AttachmentReq = true;
                            }
                        }
                        EmailmStr = "<html>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:17pt;\"><b>" + ctxTFAT.TfatComp.Select(x => x.Name.ToUpper()).FirstOrDefault() + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + "Document Detail" + "</b></span></p>";
                        EmailmStr += "<br/>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Docket No: <b>" + lRMaster.LrNo + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Book Date: <b>" + lRMaster.BookDate.ToShortDateString() + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">From: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Source).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">To: <b>" + (ctxTFAT.TfatBranch.Where(x => x.Code == lRMaster.Dest).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignor: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.RecCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Consignee: <b>" + (ctxTFAT.Consigner.Where(x => x.Code == lRMaster.SendCode).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Bill Party: <b>" + (ctxTFAT.CustomerMaster.Where(x => x.Code == lRMaster.BillParty).Select(x => x.Name.ToUpper()).FirstOrDefault()) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Qty: <b>" + lRMaster.TotQty + " - " + ctxTFAT.UnitMaster.Where(x => x.Code == lRMaster.UnitCode).Select(x => x.Name).FirstOrDefault() + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Description: <b>" + ctxTFAT.DescriptionMaster.Where(x => x.Code == lRMaster.DescrType).Select(x => x.Description).FirstOrDefault() + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Weight: <b>" + lRMaster.ChgWt + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Invoice No: <b>" + lRMaster.PartyInvoice + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">PONumber: <b>" + lRMaster.PONumber + "</b></span></p>";
                        EmailmStr += "</html>";
                        var mstream = BaseGetStream(PrintFormats, lRMaster.TableKey, lRMaster.Branch);
                        string CheckEmail = SplitData[0];
                        if (CheckEmail.Contains("@"))
                        {
                            //ShruhamSendEMail(SplitData[0], "Consignmnet Booking Details", EmailmStr + "\n\n\n\n:Generated from ALT.AIR.3 on Cloud, info@Shruhamsoftware.com", false, "", "", mParentKey.Substring(6), SplitData[1], true, AttachmentReq, mstream);
                            ShruhamSendEMail(SplitData[0], "Consignmnet Booking Details", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal, AttachmentReq, mstream);
                        }
                    }
                    else
                    {
                        EmailmStr = "<html>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma;font-size:16pt;\"><b>" + (ctxTFAT.TfatBranch.Where(z => z.Code == mbranchcode).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                        EmailmStr += "<br/>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Mode: <b>" + mMode + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Branch: <b>" + (mParentKey.Substring(0, 6) + " - " + ctxTFAT.TfatBranch.Where(z => z.Code == mParentKey.Substring(0, 6)).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Type: <b>" + (mType + " - " + ctxTFAT.DocTypes.Where(z => z.Code == mType).Select(x => x.Name).FirstOrDefault() ?? "") + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Serial: <b>" + mParentKey.Substring(13, mParentKey.Length - 13) + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">UserID: <b>" + muserid + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Doc.Date: <b>" + mDate.Date + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Amount: <b>" + mAmt + "</b></span></p>";
                        EmailmStr += "<p><span style=\"font-family:Tahoma\">Party: <b>" + NameofAccount(mAccount, mtable) + "</b></span></p>";
                        EmailmStr += "</html>";
                        string CheckEmail = SplitData[0];
                        if (CheckEmail.Contains("@"))
                        {
                            ShruhamSendEMail(SplitData[0], "ALT.AIR Transaction Alerts", EmailmStr + " ", false, "", "", mParentKey.Substring(6), SplitData[1], MailGlobal);
                        }
                    }

                }


            }
        }

        #region Send Mail Common Function
        public void ShruhamSendEMail(string mEmail, string mSubject, string mMsg, bool UseSuchanURL = false, string mCC = "", string mBCC = "", string mParentKey = "", string mParty = "", bool GlbalMail = false, bool AttachmentReq = false, byte[] bytes = null)
        {
            int mid = 0;
            try
            {
                bool SendMail = false;
                GlbalMail = true;
                if (GlbalMail)
                {
                    GlbalMail = ctxTFAT.TfatComp.Select(x => x.GlobalMail).FirstOrDefault();
                    string msmtppassword = "";
                    string msmtphost = "";
                    int msmtpport = 25;
                    string msmtpuser = "";
                    string mFromEmail = "";
                    mEmail = mEmail.Trim();
                    mCC = mCC.Trim();
                    mBCC = mBCC.Trim();
                    if (GlbalMail == false)
                    {
                        var UserBranch = ctxTFAT.TfatBranch.Where(x => x.Code == mbranchcode).FirstOrDefault();
                        if (Convert.ToBoolean(UserBranch.BranchMail))
                        {
                            if (Convert.ToBoolean(UserBranch.LocalMail))
                            {
                                SendMail = true;
                            }
                        }
                        var mEmailInfo = ctxTFAT.TfatPass.Where(z => z.Code == muserid).Select(x => new
                        {
                            x.SMTPUser,
                            x.SMTPServer,
                            x.SMTPPassword,
                            x.SMTPPort,
                            x.CCTo,
                            x.BCCTo,
                            x.Email
                        }).FirstOrDefault();
                        if (mEmailInfo != null)
                        {
                            mCC = (mCC != "" ? mCC + "," : "");
                            mCC += mEmailInfo.CCTo == null ? "" : mEmailInfo.CCTo.Trim();
                            mBCC = (mBCC != "" ? mBCC + "," : "");
                            mBCC += mEmailInfo.BCCTo == null ? "" : mEmailInfo.BCCTo.Trim();
                            msmtpuser = mEmailInfo.SMTPUser == null ? "" : mEmailInfo.SMTPUser.Trim();
                            msmtppassword = mEmailInfo.SMTPPassword == null ? "" : mEmailInfo.SMTPPassword.Trim();
                            msmtphost = mEmailInfo.SMTPServer == null ? "" : mEmailInfo.SMTPServer.Trim();
                            msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                            mFromEmail = (mEmailInfo.SMTPUser ?? "").Trim();
                        }
                    }
                    else
                    {
                        SendMail = true;
                        var mEmailInfo = ctxTFAT.TfatComp.Where(z => z.Code == mcompcode).Select(x => new
                        {
                            x.SMTPUser,
                            x.SMTPServer,
                            x.SMTPPassword,
                            x.SMTPPort,
                            x.CCTo,
                            x.BCCTo,
                            x.Email
                        }).FirstOrDefault();
                        if (mEmailInfo != null)
                        {
                            mCC = (mCC != "" ? mCC + "," : "");
                            mCC += mEmailInfo.CCTo == null ? "" : mEmailInfo.CCTo.Trim();
                            mBCC = (mBCC != "" ? mBCC + "," : "");
                            mBCC += mEmailInfo.BCCTo == null ? "" : mEmailInfo.BCCTo.Trim();
                            msmtpuser = mEmailInfo.SMTPUser == null ? "" : mEmailInfo.SMTPUser.Trim();
                            msmtppassword = mEmailInfo.SMTPPassword == null ? "" : mEmailInfo.SMTPPassword.Trim();
                            msmtphost = mEmailInfo.SMTPServer == null ? "" : mEmailInfo.SMTPServer.Trim();
                            msmtpport = mEmailInfo.SMTPPort == null ? 25 : mEmailInfo.SMTPPort.Value;
                            mFromEmail = (mEmailInfo.Email ?? "").Trim();
                        }
                    }

                    mCC = CutRightString(mCC, 1, ",");
                    mBCC = CutRightString(mBCC, 1, ",");

                    if (UseSuchanURL == true || (msmtphost == null || msmtphost == "") || mFromEmail == "")
                    {
                        //msmtphost = "smtp.hostedemail.com";
                        //msmtpuser = "laqshya@laqshyalogistics.com";
                        //msmtppassword = "04MfRMo22twL";
                        //msmtpport = 587;
                        //mFromEmail = msmtpuser;

                    }
                    if (msmtpport != 587)
                    {
                        msmtpport = 587;
                    }
                    MailMessage message = new MailMessage();


                    if (AttachmentReq)
                    {
                        MemoryStream memoryStream = new MemoryStream(bytes);
                        memoryStream.Seek(0, SeekOrigin.Begin);

                        //MailMessage message = new MailMessage();
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(memoryStream, "Attachment.pdf");
                        message.Attachments.Add(attachment);
                    }

                    message.From = new MailAddress(mFromEmail);
                    mEmail = CutRightString(mEmail, 1, ";");
                    mEmail = CutRightString(mEmail, 1, ",");
                    message.To.Add(mEmail);
                    if (mCC != "")
                    {
                        message.CC.Add(mCC);
                    }

                    if (mBCC != "")
                    {
                        message.Bcc.Add(mBCC);
                    }
                    message.Subject = mSubject;
                    message.IsBodyHtml = true;
                    message.BodyEncoding = System.Text.Encoding.UTF8;
                    mMsg = mMsg.Replace("^~|", "<br>");
                    if (mMsg.Contains("<html>") == false)
                    {
                        mMsg = TextToHtml(mMsg);
                    }
                    message.Body = mMsg;
                    message.Priority = MailPriority.High;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    SmtpClient smtp = new SmtpClient();
                    smtp.Host = msmtphost;
                    smtp.Port = msmtpport;
                    smtp.Credentials = new System.Net.NetworkCredential(msmtpuser, msmtppassword);

                    smtp.EnableSsl = true;
                    if (mParentKey != "" && mParty == "")
                    {
                        string mmain = GetMainType(mParentKey.Substring(0, 5));
                        if ("SL~PR".Contains(mmain))
                        {
                            mParty = Fieldoftable(mmain == "SL" ? "Sales" : "Purchase", "Code", "TableKey='" + mParentKey + "'");
                        }
                    }
                    if (SendMail)
                    {
                        smtp.Send(message);
                        mid = SaveEmailLog(mEmail, mCC, mBCC, mSubject, mMsg, mParentKey, mParty, EmialLogReportName, EmialLogPersonName, EmialLogHeader, EmialLogAutoRemark);
                    }
                }
                //return Json(new { Status = "Success", Message = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update Emaillog Set sentStatus=0 where RecordKey=" + mid);
                //return Json(new { Status = "Error", Message = smtex.InnerException }, JsonRequestBehavior.AllowGet);
            }
        }
        public byte[] BaseGetStream(string PrintDormats, string Parentkey, string Branch)
        {
            Stream streamR;
            Document document = new Document(PageSize.A4, 10, 10, 10, 10);
            var ms = new MemoryStream();
            if (!String.IsNullOrEmpty(PrintDormats))
            {
                {
                    PdfCopy pdf = new PdfCopy(document, ms);
                    document.Open();
                    pdf.Open();
                    List<string> mSrls = PrintDormats.Split(',').ToList();
                    foreach (var msrl in mSrls.OrderByDescending(x => x).ToList())//Model.list)
                    {
                        //mcode = msrl.Code;
                        var mcode = msrl;
                        if (string.IsNullOrEmpty(mcode) == false)
                        {

                            var StoreProcedure = ctxTFAT.DocFormats.Where(x => x.FormatCode == msrl).Select(x => x.StoredProc).FirstOrDefault();
                            DataTable dtreport = new DataTable();
                            SqlConnection tfat_conx = new SqlConnection(GetConnectionString());
                            SqlCommand cmd = new SqlCommand("SPDoc_" + StoreProcedure, tfat_conx); //name of the storedprocedure
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandTimeout = 120;
                            cmd.Parameters.AddWithValue("@mParentKey", Parentkey);
                            cmd.Parameters.AddWithValue("@mBranch", Branch);
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);
                            adp.Fill(dtreport);

                            ReportDocument rd = new ReportDocument();
                            rd.Load(Path.Combine(Server.MapPath("~/Reports"), msrl + ".rpt"));
                            rd.SetDataSource(dtreport);
                            //rd.PrintToPrinter(1, true, 0, 0);
                            try
                            {
                                Stream mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                                var mWhat = "PDF";
                                switch (mWhat)
                                {
                                    case "PDF":
                                        mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                                        break;
                                    case "XLS":
                                        mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.Excel);
                                        break;
                                    case "WORD":
                                        mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.WordForWindows);
                                        break;
                                    case "CSV":
                                        mstream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.CharacterSeparatedValues);
                                        break;
                                }
                                mstream.Seek(0, SeekOrigin.Begin);
                                Warning[] warnings;
                                string[] streamids;
                                string mimeType;
                                string encoding;
                                string extension;
                                MemoryStream memory1 = new MemoryStream();
                                mstream.CopyTo(memory1);
                                byte[] bytes = memory1.ToArray();
                                MemoryStream memoryStream = new MemoryStream(bytes);
                                PdfReader imageDocumentReader = new PdfReader(memoryStream.ToArray());
                                int ab = imageDocumentReader.NumberOfPages;
                                for (int a = 1; a <= ab; a++)
                                {
                                    var page = pdf.GetImportedPage(imageDocumentReader, a);
                                    pdf.AddPage(page);
                                }
                                imageDocumentReader.Close();

                            }
                            catch
                            {
                                rd.Close();
                                rd.Dispose();
                                throw;
                            }
                            finally
                            {
                                rd.Close();
                                rd.Dispose();
                            }


                        }
                    }
                    document.Close();
                }
            }

            return ms.ToArray();
        }
        #endregion

        #endregion


        public void Send_Sms_Insign(string Tepmlate, string MobileNO, string Party, string mParentKey, DateTime mDate)
        {
            var mid = 0;
            try
            {
                WebRequest request = null;
                HttpWebResponse response = null;
                string mUID = "";
                string mPass = "";
                string mCaption = "";
                string mURL = "";
                string mProxy = "";
                bool mSMSPrefix = false;
                var mType = mParentKey.Substring(6, 5);
                var Temp = Tepmlate.ToString();
                var mMsg = (ctxTFAT.MsgTemplate.Where(x => x.Code == Temp).Select(x => x.MsgText).FirstOrDefault() ?? "").Trim();

                if (mMsg.Contains("%"))
                {
                    if (Temp == "Consignment Booked")
                    {
                        var LR = ctxTFAT.LRMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();
                        mMsg = mMsg.Replace("{%DocNo%}", LR.LrNo.ToString());
                        mMsg = mMsg.Replace("{%DocDate%}", mDate.ToShortDateString());
                        mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Source).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Dest).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Consignor%}", ctxTFAT.Consigner.Where(x => x.Code == LR.RecCode).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Consignee%}", ctxTFAT.Consigner.Where(x => x.Code == LR.SendCode).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Qty%}", LR.TotQty.ToString());
                        mMsg = mMsg.Replace("{%QtyDesc%}", ctxTFAT.UnitMaster.Where(x => x.Code == LR.UnitCode).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Weight%}", LR.ActWt.ToString());
                    }
                    else if (Temp == "Consignment Delivered")
                    {
                        var DeliveryMaster = ctxTFAT.DeliveryMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();
                        var LR = ctxTFAT.LRMaster.Where(x => x.TableKey.ToString() == DeliveryMaster.ParentKey.ToString()).FirstOrDefault();

                        mMsg = mMsg.Replace("{%DocNo%}", LR.LrNo.ToString());
                        mMsg = mMsg.Replace("{%DocDate%}", mDate.ToShortDateString());
                        mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Source).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Dest).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%DelDate%}", DeliveryMaster.DeliveryDate.ToShortDateString());
                        mMsg = mMsg.Replace("{%Qty%}", DeliveryMaster.Qty.ToString());
                        mMsg = mMsg.Replace("{%QtyDesc%}", ctxTFAT.UnitMaster.Where(x => x.Code == LR.UnitCode).Select(x => x.Name).FirstOrDefault());
                    }
                    else if (Temp == "Freight Memo Booked")
                    {
                        var fMMaster = ctxTFAT.FMMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();

                        mMsg = mMsg.Replace("{%DocNo%}", fMMaster.FmNo.ToString());
                        mMsg = mMsg.Replace("{%VehicleNo%}", ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Broker%}", ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Driver%}", fMMaster.Driver);
                        mMsg = mMsg.Replace("{%ContactNo%}", fMMaster.ContactNo);
                        mMsg = mMsg.Replace("{%DocDate%}", fMMaster.Date.ToShortDateString());
                        mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Via%}", fMMaster.RouteViaName);
                        mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name).FirstOrDefault());
                        mMsg = mMsg.Replace("{%Freight%}", fMMaster.Freight.ToString());
                        mMsg = mMsg.Replace("{%Advance%}", fMMaster.Adv.ToString());
                        mMsg = mMsg.Replace("{%Balance %}", fMMaster.Balance.ToString());
                    }
                    //update for Pending Value 
                }
                var mMobile = MobileNO.ToString();
                if (mMobile.Length == 10)
                {
                    try
                    {
                        TfatComp tfatComp = ctxTFAT.TfatComp.FirstOrDefault();
                        if (!String.IsNullOrEmpty(tfatComp.SMSURL))
                        {
                            // You can convert a string into a byte array
                            byte[] asciiBytes = Encoding.ASCII.GetBytes(mMsg);

                            // You can convert a byte array into a char array
                            char[] asciiChars = Encoding.ASCII.GetChars(asciiBytes);
                            string asciiString = new string(asciiChars);

                            string GenerateUrl = "";
                            GenerateUrl += tfatComp.SMSURL + "?";
                            if (!String.IsNullOrEmpty(tfatComp.SmsUername))
                            {
                                GenerateUrl += "username=" + tfatComp.SmsUername;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.Smspassword))
                            {
                                GenerateUrl += "&password=" + tfatComp.Smspassword;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsID))
                            {
                                GenerateUrl += "&" + tfatComp.SmsID;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsPara1))
                            {
                                GenerateUrl += "&" + tfatComp.SmsPara1 + asciiString;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsPara2))
                            {
                                GenerateUrl += "&" + tfatComp.SmsPara2 + mMobile;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsPara3))
                            {
                                GenerateUrl += "&" + tfatComp.SmsPara3;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsPara4))
                            {
                                GenerateUrl += "&" + tfatComp.SmsPara4;
                            }
                            if (!String.IsNullOrEmpty(tfatComp.SmsPara5))
                            {
                                GenerateUrl += "&" + tfatComp.SmsPara5;
                            }


                            WebClient client = new WebClient();
                            string jsonstring = client.DownloadString(GenerateUrl);
                            //using (WebClient client = new WebClient())
                            //{
                            //    var GenerateUrl = "https://web.insignsms.com/api/sendsms?username=laqshya&password=laqshya&senderid=LAQSYA&message=" + asciiString + "&numbers=" + mMobile + "&dndrefund=1";
                            //    var content = client.DownloadString(GenerateUrl);
                            //}

                            mid = SaveSMSLog(MobileNO.ToString(), mMsg, mParentKey, Party.ToString(), EmialLogPersonName, EmialLogHeader, EmialLogAutoRemark);
                        }


                    }
                    catch (Exception ex)
                    {
                        ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                        //return Json(new { Status = "Error", Message = ex.InnerException }, JsonRequestBehavior.AllowGet);
                    }
                }


            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                //return "Error!\n" + smtex.InnerException;
            }
        }
        #region Not Required
        public void SSendSMS(List<string> Parameters, string mParentKey, DateTime mDate)
        {
            var mid = 0;
            try
            {
                List<string> Templates = new List<string>();
                List<string> MobileLists = new List<string>();
                List<string> Accounts = new List<string>();

                foreach (var item in Parameters)
                {
                    var SplitParameter = item.Split('^');

                    if (Templates.Contains(SplitParameter[0]) == false)
                    {
                        Templates.Add(SplitParameter[0]);
                        MobileLists.Add(SplitParameter[1]);
                        Accounts.Add(SplitParameter[2]);
                    }
                    else
                    {
                        int i = Templates.IndexOf(SplitParameter[0]);

                        var Mobile = MobileLists[i] + "," + SplitParameter[1];
                        var Accounts1 = Accounts[i] + "," + SplitParameter[2];
                        MobileLists[i] = Mobile;
                        Accounts[i] = Accounts1;
                    }
                }

                for (int i = 0; i < Templates.Count(); i++)
                {
                    WebRequest request = null;
                    HttpWebResponse response = null;
                    string mUID = "";
                    string mPass = "";
                    string mCaption = "";
                    string mURL = "";
                    string mProxy = "";
                    bool mSMSPrefix = false;
                    var mType = mParentKey.Substring(6, 5);
                    var Temp = Templates[i].ToString();
                    var mMsg = (ctxTFAT.MsgTemplate.Where(x => x.Code == Temp).Select(x => x.MsgText).FirstOrDefault() ?? "").Trim();

                    if (mMsg.Contains("%"))
                    {
                        if (Temp == "Consignment Booked")
                        {
                            var LR = ctxTFAT.LRMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();
                            mMsg = mMsg.Replace("{%DocNo%}", LR.LrNo.ToString());
                            mMsg = mMsg.Replace("{%DocDate%}", mDate.ToShortDateString());
                            mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Source).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Dest).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Consignor%}", ctxTFAT.Consigner.Where(x => x.Code == LR.RecCode).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Consignee%}", ctxTFAT.Consigner.Where(x => x.Code == LR.SendCode).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Qty%}", LR.TotQty.ToString());
                            mMsg = mMsg.Replace("{%QtyDesc%}", ctxTFAT.UnitMaster.Where(x => x.Code == LR.UnitCode).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Weight%}", LR.ActWt.ToString());
                        }
                        else if (Temp == "Consignment Delivered")
                        {
                            var DeliveryMaster = ctxTFAT.DeliveryMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();
                            var LR = ctxTFAT.LRMaster.Where(x => x.TableKey.ToString() == DeliveryMaster.ParentKey.ToString()).FirstOrDefault();

                            mMsg = mMsg.Replace("{%DocNo%}", LR.LrNo.ToString());
                            mMsg = mMsg.Replace("{%DocDate%}", mDate.ToShortDateString());
                            mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Source).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == LR.Dest).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%DelDate%}", DeliveryMaster.DeliveryDate.ToShortDateString());
                            mMsg = mMsg.Replace("{%Qty%}", DeliveryMaster.Qty.ToString());
                            mMsg = mMsg.Replace("{%QtyDesc%}", ctxTFAT.UnitMaster.Where(x => x.Code == LR.UnitCode).Select(x => x.Name).FirstOrDefault());
                        }
                        else if (Temp == "Freight Memo Booked")
                        {
                            var fMMaster = ctxTFAT.FMMaster.Where(x => x.Branch + x.ParentKey == mParentKey).FirstOrDefault();

                            mMsg = mMsg.Replace("{%DocNo%}", fMMaster.FmNo.ToString());
                            mMsg = mMsg.Replace("{%VehicleNo%}", ctxTFAT.HireVehicleMaster.Where(x => x.Code == fMMaster.TruckNo).Select(x => x.TruckNo).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Broker%}", ctxTFAT.Master.Where(x => x.Code == fMMaster.BroCode).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Driver%}", fMMaster.Driver);
                            mMsg = mMsg.Replace("{%ContactNo%}", fMMaster.ContactNo);
                            mMsg = mMsg.Replace("{%DocDate%}", fMMaster.Date.ToShortDateString());
                            mMsg = mMsg.Replace("{%From%}", ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.FromBranch).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Via%}", fMMaster.RouteViaName);
                            mMsg = mMsg.Replace("{%TO%}", ctxTFAT.TfatBranch.Where(x => x.Code == fMMaster.ToBranch).Select(x => x.Name).FirstOrDefault());
                            mMsg = mMsg.Replace("{%Freight%}", fMMaster.Freight.ToString());
                            mMsg = mMsg.Replace("{%Advance%}", fMMaster.Adv.ToString());
                            mMsg = mMsg.Replace("{%Balance %}", fMMaster.Balance.ToString());
                        }
                        //update for Pending Value 
                    }
                    var mMobile = MobileLists[i].ToString();
                    if (mMobile.Length == 10)
                    {
                        try
                        {
                            TfatComp tfatComp = ctxTFAT.TfatComp.FirstOrDefault();
                            if (!String.IsNullOrEmpty(tfatComp.SMSURL))
                            {
                                // You can convert a string into a byte array
                                byte[] asciiBytes = Encoding.ASCII.GetBytes(mMsg);

                                // You can convert a byte array into a char array
                                char[] asciiChars = Encoding.ASCII.GetChars(asciiBytes);
                                string asciiString = new string(asciiChars);

                                string GenerateUrl = "";
                                GenerateUrl += tfatComp.SMSURL + "?";
                                if (!String.IsNullOrEmpty(tfatComp.SmsUername))
                                {
                                    GenerateUrl += "username=" + tfatComp.SmsUername;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.Smspassword))
                                {
                                    GenerateUrl += "&password=" + tfatComp.Smspassword;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsID))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsID;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsPara1))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsPara1 + asciiString;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsPara2))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsPara2 + mMobile;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsPara3))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsPara3;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsPara4))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsPara4;
                                }
                                if (!String.IsNullOrEmpty(tfatComp.SmsPara5))
                                {
                                    GenerateUrl += "&" + tfatComp.SmsPara5;
                                }


                                WebClient client = new WebClient();
                                string jsonstring = client.DownloadString(GenerateUrl);
                                //using (WebClient client = new WebClient())
                                //{
                                //    var GenerateUrl = "https://web.insignsms.com/api/sendsms?username=laqshya&password=laqshya&senderid=LAQSYA&message=" + asciiString + "&numbers=" + mMobile + "&dndrefund=1";
                                //    var content = client.DownloadString(GenerateUrl);
                                //}
                                var Acc = Accounts[i].Split(',');
                                var MOb = mMobile.Split(',');
                                for (int j = 0; j < MOb.Length; j++)
                                {
                                    mid = SaveSMSLog(MOb[j].ToString(), mMsg, mParentKey, Acc[j].ToString());

                                }
                            }


                        }
                        catch (Exception ex)
                        {
                            ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                            //return Json(new { Status = "Error", Message = ex.InnerException }, JsonRequestBehavior.AllowGet);
                        }
                    }

                }
            }
            catch (SmtpFailedRecipientException smtex)
            {
                ExecuteStoredProc("Update SMSLog Set sendstatus=0 where Recordkey=" + mid);
                //return "Error!\n" + smtex.InnerException;
            }
        }
        #endregion
        public List<string> GetChildGrp(string Id)
        {
            List<string> Child = new List<string>();

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                string query = "Select Code from SP_GetBranchChild ( '" + Id + "' ) Order by Code";
                using (SqlCommand cmd = new SqlCommand(query))
                {
                    cmd.Connection = con;
                    con.Open();
                    using (SqlDataReader sdr = cmd.ExecuteReader())
                    {
                        while (sdr.Read())
                        {
                            Child.Add(sdr["Code"].ToString());
                        }
                    }
                    con.Close();
                }
            }
            return Child;
        }



        #region EWAY BILL OPERATE

        public void SaveEWB(EwayBillVM Model, string DocType, string EWBNO, string EWBValid, string EWBType, LRMaster lRMaster, string Tablekey = null)
        {
            bool mAdd = false;
            tfatEWB tfatEWB = ctxTFAT.tfatEWB.Where(x => x.DocType == DocType && (x.LrTablekey == Tablekey || x.EWBNO == EWBNO)).FirstOrDefault();
            if (tfatEWB == null)
            {
                tfatEWB = new tfatEWB();
                mAdd = true;
            }
            if (mAdd)
            {
                tfatEWB.GenMode = "Generate";
                tfatEWB.Branch = mbranchcode;
                tfatEWB.DocType = DocType;
                tfatEWB.DocNo = Model.EWBDocument;
                tfatEWB.Consignment = string.IsNullOrEmpty(Model.Document) == true ? null : Model.Document;
                tfatEWB.LrTablekey = string.IsNullOrEmpty(Tablekey) == true ? null : Tablekey;
                tfatEWB.DocDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                tfatEWB.DocTime = DateTime.Now.ToShortTimeString();
                tfatEWB.Prefix = mperiod;
                tfatEWB.EWBNO = EWBNO;
                if (String.IsNullOrEmpty(EWBValid))
                {
                    tfatEWB.EWBValid = null;
                }
                else
                {
                    tfatEWB.EWBValid = ConvertDDMMYYTOYYMMDD(EWBValid);
                }

                if (lRMaster != null)
                {
                    tfatEWB.LREwaybill = lRMaster.EwayBill;
                    tfatEWB.PartyInvoice = lRMaster.PartyInvoice;
                    tfatEWB.BENUMBER = lRMaster.BENumber;
                }
                tfatEWB.EWBType = EWBType;
                tfatEWB.VehicleNo = Model.EWB_LastVehicleNo;
                tfatEWB.AUTHIDS = muserid;
                tfatEWB.AUTHORISE = "A00";
                tfatEWB.ENTEREDBY = muserid;
                tfatEWB.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                tfatEWB.SyncDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                ctxTFAT.tfatEWB.Add(tfatEWB);
                ctxTFAT.SaveChanges();
            }
            else
            {
                if (lRMaster != null)
                {
                    tfatEWB.LREwaybill = lRMaster.EwayBill;
                    tfatEWB.PartyInvoice = lRMaster.PartyInvoice;
                    tfatEWB.BENUMBER = lRMaster.BENumber;
                }
                if (!String.IsNullOrEmpty(EWBValid))
                {
                    tfatEWB.EWBValid = ConvertDDMMYYTOYYMMDD(EWBValid);
                }
                tfatEWB.EWBType = EWBType;

                if (!String.IsNullOrEmpty(Model.EWB_LastVehicleNo))
                {
                    tfatEWB.VehicleNo = Model.EWB_LastVehicleNo;
                }
                tfatEWB.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                ctxTFAT.Entry(tfatEWB).State = EntityState.Modified;
                ctxTFAT.SaveChanges();
            }
        }

        public void SaveEWBLog(string Type, string DocNo, string Description, string Msg, string EWBNO)
        {
            EWBLog eWBLog = new EWBLog();
            eWBLog.DocDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
            eWBLog.Branch = mbranchcode;
            eWBLog.Type = Type;
            eWBLog.DocNo = string.IsNullOrEmpty(DocNo) == true ? null : DocNo;
            eWBLog.Description = Description;
            eWBLog.Msg = Msg;
            eWBLog.EWBNO = EWBNO;
            eWBLog.AUTHIDS = muserid;
            eWBLog.AUTHORISE = "A00";
            eWBLog.ENTEREDBY = muserid;
            eWBLog.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
            ctxTFAT.EWBLog.Add(eWBLog);
            ctxTFAT.SaveChanges();
        }

        public void SaveEWBAuth(string DocType, string EWBNO, DateTime EWBValid, string EWBType)
        {
            bool mAdd = false;
            tfatEWB tfatEWB = ctxTFAT.tfatEWB.Where(x => x.DocType == DocType).FirstOrDefault();
            if (tfatEWB == null)
            {
                tfatEWB = new tfatEWB();
                mAdd = true;
            }
            if (mAdd)
            {
                tfatEWB.DocType = DocType;
                tfatEWB.DocNo = "000000";
                tfatEWB.DocDate = ConvertDDMMYYTOYYMMDD(DateTime.Now.ToShortDateString());
                tfatEWB.DocTime = DateTime.Now.ToShortTimeString();
                tfatEWB.Prefix = mperiod;
                tfatEWB.EWBNO = EWBNO;
                tfatEWB.EWBValid = EWBValid;
                tfatEWB.EWBType = EWBType;
                tfatEWB.VehicleNo = "000000";
                tfatEWB.AUTHIDS = muserid;
                tfatEWB.AUTHORISE = "A00";
                tfatEWB.ENTEREDBY = muserid;
                tfatEWB.LASTUPDATEDATE = ConvertDDMMYYTOYYMMDD(System.DateTime.Now.ToString());
                ctxTFAT.tfatEWB.Add(tfatEWB);
                ctxTFAT.SaveChanges();
            }
            else
            {
                tfatEWB.EWBValid = EWBValid;
                ctxTFAT.Entry(tfatEWB).State = EntityState.Modified;
                ctxTFAT.SaveChanges();
            }
        }

        public void UpdateConsoleEWB(List<string> list, string ConsoleNo, string ConsoleDate)
        {
            foreach (var item in list)
            {
                tfatEWB tfatEWB = ctxTFAT.tfatEWB.Where(x => x.EWBNO.Trim() == item).FirstOrDefault();
                if (tfatEWB != null)
                {
                    if (String.IsNullOrEmpty(tfatEWB.ConsoleEWBList))
                    {
                        tfatEWB.ConsoleEWBList = ConsoleNo + " : " + ConsoleDate;
                    }
                    else
                    {
                        tfatEWB.ConsoleEWBList += " , " + ConsoleNo + " : " + ConsoleDate;
                    }
                    ctxTFAT.Entry(tfatEWB).State = EntityState.Modified;
                }
            }
            ctxTFAT.SaveChanges();
        }

        #endregion


    }
}