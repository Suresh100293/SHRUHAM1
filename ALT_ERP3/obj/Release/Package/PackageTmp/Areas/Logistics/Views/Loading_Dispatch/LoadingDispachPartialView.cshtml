@model ALT_ERP3.Areas.Logistics.Models.LoadingDispachVM
@using Common;
@{
    ViewBag.Title = "FMRelationMumtipleBranch Master";
    Layout = null;
}
<script src="@Url.Content("~/Content/js/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/js/jquery.constrain.js")" type="text/javascript"></script>

<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>

<style>
    .bold {
        font-weight: bold !important;
    }
    .multiselect {
        width: 205px !important;
        text-align: left !important;
    }

    /*.multiselect .dropdown-toggle .btn btn-default .disabled:hover{
        background-color:aqua !important;
    }*/
    .btn-group > .multiselect:hover {
        color: red !important;
    }
    hr {
        border: 1px solid #dec0c0;
    }

    fieldset {
        border: 1px solid #ddd !important;
        margin: 0;
        /*xmin-width: 0;*/
        padding: 10px;
        position: relative;
        border-radius: 4px;
        background-color: #f5f5f5;
        padding-left: 5px !important;
    }


    .legend {
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        /*background-color: #dec0c0;*/
        background-color: white;
        color: red !important;
        width: auto;
        z-index: auto;
        padding: 5px 45px 5px 45px;
        margin-bottom: 0px !important;
    }

    .legend2 {
        position: relative;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        /*background-color: #dec0c0;*/
        background-color: #57c8f1;
        color: white !important;
        width: auto;
        z-index: auto;
        padding: 5px 45px 5px 45px;
        margin-bottom: 0px !important;
        margin-top: -40px;
    }

    .legend3 {
        top: -0.0em;
        color: black;
        position: absolute;
        font-size: 14px;
        font-weight: bold;
        border: 1px solid #ddd;
        border-radius: 15px;
        background-color: #bec3c5;
        width: auto;
        line-height: 0.7em;
        left: 265px;
        margin-top: -15px;
    }

    .toggle {
        border-radius: 15px !important;
        margin-top: -35px !important;
    }
    .example {
        border: 1px solid #ccc;
        border-collapse: collapse;
        width: max-content;
        font-size: 9px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .example th {
            background-color: #F7F7F7;
            font-weight: bold;
        }

        .example th, .example td {
            border: 1px solid #ccc;
            padding: 5px;
            font-size: 12px;
        }

        .example, .example table td {
            border: 0px solid #ccc;
        }
</style>

<script type="text/javascript">

    $(document).ready(function () {
        //LoadFieledSetQty();
        LoadVehicleGroupStatus();
        LoadVehicle("");
        LoadVehicleGroup("");
        LoadFrom();
        LoadTo();
        LoadBroker();
        LoadPayableAt();
        ComboDestination();
        CalculateSummaryOfLCLoading();
        ShowRouteDest();
        $('#FM_Date').datepicker({
            format: 'dd/mm/yyyy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-60:+0",
            autoclose: true,
        });
        if ('@Model.Mode'!='Add') {
            $("#FM_Date").datepicker("setDate", '@Model.FM_Date');
        }

        //

        $('#btnLoad').click(function (event) {
            event.preventDefault();
            var LrList = "";

            var url = '@Url.Action("GetPendingLCList")';

            var DTO = { FmNo: $("#FMNO").val() };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {

                    var LoadDownLoadFiles = $("#ShowLoadingLCList");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    $('#GetLoadLCLIst').modal('show');
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                },
            });
        });

        $('#btnLoadIT').click(function (event) {
            event.preventDefault();
            var LrList = "";
            $("#LcCombo .Ordertable-row").each(function () {
                if ($(this).find('input[type=checkbox]').prop("checked") == true) {
                    var LRValue = $(this).find(".LCValue").text();
                    LrList = LrList + LRValue + ",";
                }
            });
            var url = '@Url.Action("LoadLC")';

            var DTO = { LClist: LrList.substr(0, LrList.length - 1) };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    var LoadDownLoadFiles = $("#SaveLCinFM");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);
                    var wT = 0.00;
                    $("#SaveLcCombo .Ordertable-row").each(function () {
                        var LRValue = $(this).find(".Weight").text();
                        wT += parseFloat(LRValue);
                    });
                    
                    //wT = parseFloat($("#hdnBalLoad").val()) - wT;
                    //$("#AfterLoadPayOut").val(wT);
                    //$("#hdnBalLoad").val(wT);
                    CalculateSummaryOfLCLoading();
                },
            });
        });

        $("#btnNote").click(function (event) {
            event.preventDefault();
            //$("#LockModal").modal("hide");
            if ($("#Document").val()!="")
            {
                var url = '@Url.Action("SaveNote")';
                var ModelData = {};

                ModelData["Document"] = $("#Document").val();
                ModelData["Note"] = $("#Note").val();
                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data)
                    {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            $("#ErrorMessage").hide();
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);                    }
                    },
                    });
            }
        });
        $("#btnPhotoupload").click(function (event) {
            event.preventDefault();
            var size = 0;
            var formData = new FormData();
            var totalFiles = document.getElementById("Attachment_UploadFile").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("Attachment_UploadFile").files[i];
                size += file.size;
                if (file.size < 1048576) {
                    formData.append("UploadFile", file);
                }
                else {
                    alert('File Size Must Not Exceed 1 MB')
                    return;
                }
            }
            if (size > 1048576) {
                alert('File Size Must Not Exceed 1 MB')
                return;
            }
            $.ajax({
                type: "POST",
                url: '@Url.Action("AttachDocument")',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (data) {
                    $('#ShowAllFile').html(data.Html);
                    //hideorshowtable();
                },
                error: function (error) {
                    alert("errror");
                }
            });
        });

        $("#btnAttachSubmit").click(function (event) {
            event.preventDefault();
            //$("#LockModal").modal("hide");
            if ($("#Document").val()!="")
            {
                var url = '@Url.Action("SaveAttachment")';
                var ModelData = {};

                ModelData["Document"] = $("#Document").val();
                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data)
                    {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            $("#ErrorMessage").hide();
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);                    }
                    },
                    });
            }
        });
        $("#SaveLock").click(function (event) {
            event.preventDefault();
            //$("#LockModal").modal("hide");
            if ($("#Document").val()!="")
            {
                var url = '@Url.Action("SaveLock")';
                var ModelData = {};

                if ($("#All").prop("checked") == true) {
                    ModelData["Dispach"] = true;
                    ModelData["Delivery"] = true;
                    ModelData["Billing"] = true;
                    ModelData["All"] = true;
                } else
                {
                    if ($("#Dispach").prop("checked") == true) {
                        ModelData["Dispach"] = true;
                    } else {
                        ModelData["Dispach"] = false;
                    }
                    if ($("#Delivery").prop("checked") == true) {
                        ModelData["Delivery"] = true;
                    } else {
                        ModelData["Delivery"] = false;
                    }
                    if ($("#Billing").prop("checked") == true) {
                        ModelData["Billing"] = true;
                    } else {
                        ModelData["Billing"] = false;
                    }
                }
                ModelData["Document"] = $("#Document").val();
                ModelData["LockRemark"] = $("#LockRemark").val();
                var DTO = { mModel: ModelData };
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    data: JSON.stringify(DTO),
                    cache: false,
                    url: url,
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function () {
                        $('.spinner').show();
                    },
                    success: function (data)
                    {
                        if (data.Status == 'Success') {
                            $('.spinner').hide();
                            $("#ErrorMessage").hide();
                        }
                        else {
                            $('.spinner').hide();
                            alert(data.Message);                    }
                    },
                    });
            }
        });
        $('#All').change(function () {
            if (this.checked) {
                $("#Dispach").prop("checked", true);
                $("#Delivery").prop("checked", true);
                $("#Billing").prop("checked", true);
            } else {
                $("#Dispach").prop("checked", false);
                $("#Delivery").prop("checked", false);
                $("#Billing").prop("checked", false);
            }
        });

        $("#Dispach,#Delivery,#Billing").click(function () {
            $("#All").prop("checked", false);
        });



        $('#SubmitClear').click(function (event) {
            event.preventDefault();
            var LRNOLIST = "", LCNOLIST = "";

            var url = '@Url.Action("SaveData")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Document"] = $("#Document").val();
            ModelData["Note"] = $("#Note").val();
            ModelData["FMNO"] = $("#FMNO").val();
            ModelData["UpdateFmStatus"] = true;
            ModelData["AfterLoadPayOut"] = $("#AfterLoadPayOut").val();
            ModelData["Loaded"] = $("#Loaded").val();
            //SaveLcCombo
            var LcList = "";
            $("#SaveLcCombo .Ordertable-row").each(function () {
                var LCValue = $(this).find(".SaveLcComboLC").text();
                    LcList = LcList + LCValue + ",";
            });
            ModelData["LcNo"] = LcList.substr(0, LcList.length - 1)

            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        window.location.href = "/Logistics/Loading_Dispatch/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType";
                        $("#ErrorMessage").hide();
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);                    }
                },
            });
        });

        $('#Submit').click(function (event) {
            event.preventDefault();
            var LRNOLIST = "", LCNOLIST = "";

            var url = '@Url.Action("SaveData")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Document"] = $("#Document").val();
            ModelData["Note"] = $("#Note").val();
            ModelData["FMNO"] = $("#FMNO").val();
            ModelData["AfterLoadPayOut"] = $("#AfterLoadPayOut").val();
            ModelData["Loaded"] = $("#Loaded").val();

            //SaveLcCombo
            var LcList = "";
            $("#SaveLcCombo .Ordertable-row").each(function () {
                var LCValue = $(this).find(".SaveLcComboLC").text();
                    LcList = LcList + LCValue + ",";
            });
            ModelData["LcNo"] = LcList.substr(0, LcList.length - 1)

            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        window.location.href = "/Logistics/Loading_Dispatch/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType";
                        $("#ErrorMessage").hide();
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);                    }
                },
            });
        });
    });

    function LoadFieledSetQty() {

        var loadQty;
        if ('@ViewBag.Qty'=='') {
            loadQty = 0;
        } else {
            loadQty= parseFloat('@ViewBag.Qty');
        }

        var LWeight;
        if ('@ViewBag.Weight'=='') {
            LWeight = 0;
        } else {
            LWeight= parseFloat('@ViewBag.Weight');
        }
        
        $("#CWght").val('@Model.Loaded');

        $("#LQty").val(loadQty);
        $("#LWght").val(LWeight);
        
        var BalWeight = parseFloat('@ViewBag.BeforePayLoadBal') - parseFloat(LWeight);
        $("#BWght").val(BalWeight);
    }

    function CalculateSummaryOfLCLoading() {
        var TotalWeight = 0;
        
        //Defalut Execute Below Script
        var check = $('#SaveLcCombo').find('.Ordertable-row').length;
        $("#SaveLcComboTotalLC").html(check);
        $("#SaveLcCombo .Ordertable-row").each(function () {
            var col2_value = $(this).find(".Weight").text();
            TotalWeight = parseInt(TotalWeight) + parseInt(col2_value);
        });
        //$("#SaveLcComboTotalWeight").html(TotalWeight);
        //$("#SaveLcComboTotalQty").html(TotalQty);

        $("#Loaded").val(TotalWeight);

        var BalWeight = parseInt($("#AvailablePayload").val()) - parseInt(TotalWeight);
        $("#AvailablePayload").val(BalWeight);

        if ($('#SaveLcCombo').find('.Ordertable-row').length == 0) {
            $("#SaveLCinFM").hide();
        } else {
            $("#SaveLCinFM").show();
        }
    }
    function LoadVehicleGroupStatus() {

            var url = '@Url.Action("GetVehicleGroupStatus")'
            $('#VehicleGroup').select2({
                minimumInputLength: 0,
                placeholder: 'Search',
                ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

                initSelection: function (element, callback) {
                    var data = { id: '@Model.VehicleGroup', text: '@Model.VehicleGroup_Name' };
                    callback(data);
                },

                formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

                formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            })
    };

    function ShowRouteDest() {
        var url = '@Url.Action("ShowListBox")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@

        var DTO = {  };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    
                    var LoadDownLoadFiles = $("#ListBoxDiv");
                    $("#ErrorMessage").hide();
                    $('.spinner').hide();
                    //$('#GETDestMODAL').modal('show');
                    LoadDownLoadFiles.html('');
                    LoadDownLoadFiles.html(data.Html);

                    $(".listbox").prop('disabled', 'disabled');
                },
            });
    }
    //LoadVehicleGroup
    {
        function LoadVehicleGroup(value) {

            var url = '@Url.Action("GetVehicleGroup")'
            $('#VehicleCategory').select2({
                minimumInputLength: 0,
                placeholder: 'Search',
                ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        VehicleCategoryGroupCode: value
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

                initSelection: function (element, callback) {
                    var data = { id: '@Model.VehicleCategory', text: '@Model.VehicleCategory_Name' };
                    callback(data);
                },

                formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

                formatSelection: function (exercise) {

                    //LoadVehicle($("#TruckStatus option:selected").text(), $("#VehicleGroup").val());
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            })
        };

    }

    function LoadVehicle(value) {


        var url = '@Url.Action("GetVehicle")'
        $('#VehicleNo').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        TruckStatus: value,
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.VehicleNo', text: '@Model.VehicleNo' };
                callback(data);
            },
            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

    function LoadFrom() {

        var flag = false;
        @*if ('@Model.LRSetup.Branch_Area'== 'True') {
            flag = true;
        }*@

        var url = '@Url.Action("From")'
        $('#From').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        Flag: true
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.From', text: '@Model.From_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };


    function LoadTo() {
        var url = '@Url.Action("To")'
        $('#To').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        From: $('#From').val()
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.To', text: '@Model.To_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

    function ComboDestination() {
        var url = '@Url.Action("AddDestination")'
        $('#DestCombo').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term,
                        From: $('#From').val(),
                        To: $('#To').val(),
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.DestCombo', text: '@Model.DestCombo_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                AddViaRoute();
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

    function LoadBroker() {
        var url = '@Url.Action("GetBroker")'
        $('#Broker').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },
            initSelection: function (element, callback) {
                var data = { id: '@Model.Broker', text: '@Model.Broker_Name' };
                callback(data);
            },
            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };



    function LoadPayableAt() {
        var url = '@Url.Action("PayableAt")'
        $('#PayableAt').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.PayableAt', text: '@Model.PayableAt_Name' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
</script>

<header class="header fixed-top" style="position:fixed;background-color:lightgray;padding:6px;width:100%;margin-top:5px;">
    <div class="fixhead">
        <b class="CodeSt">@Model.Header</b>

        <span class="tools pull-right">
            <a href="~/Logistics/Loading_Dispatch/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="color:white;font-weight:bolder;font-size:13px;padding:3px 10px;" id="Cancel2">X</a>
        </span>

        <span class="tools pull-right">
            <b class="CodeSt">Loading Mode</b>
        </span>
        <span class="tools pull-right" style="    margin-right: 15px;">
            @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                    Select Branch
                </button>*@
        </span>
    </div>
</header>

<section class="panel" style="margin-bottom:0px;">
    <div class="panel-body">
        <div class="form-horizontal " id="FreightMemo" role="form" style="margin-top:30px;">
            <div id="ErrorMessage" name="ErrorMessage" class="alert alert-danger" style="display: none;margin-top:0px;"></div>

            <fieldset class=" col-sm-12" style="margin-top:0%;">
                <legend class="legend" style="color: black;">Freight Memo</legend>

                <div class="panel panel-default" style="margin-bottom: 0px !important;">
                    <div class="panel-body " style="padding-left: 20px;padding: 1px !important;">
                        <div class="col-sm-9">
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">F.M No:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.FMNO, new { @class = "form-control", @style = "width:100px;", @Value = Model.FMNO, @readonly = "readonly" })
                                </div>
                                <div class="col-sm-2">
                                    <label class=" bold   col-sm-3  control-label">Time:</label>
                                    <div class="col-sm-1 ">
                                        @Html.TextBoxFor(x => x.FM_Time, new { @class = "form-control", @type = "time", @style = "width:140px;", @Value = Model.FM_Time, @readonly = "readonly" })
                                    </div>
                                </div>
                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;">Date:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.FM_Date, new { @class = "form-control", @style = "width:236px;", @Value = Model.FM_Date, @readonly = "readonly" })
                                </div>
                                <label class=" bold  col-sm-1 control-label">Vehicle Status:</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(x => x.VehicleGroup, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleGroup, @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="form-group ">
                                <label class=" bold   col-sm-1  control-label">VehicleNo:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.VehicleNo, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleNo, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Broker:</label>
                                <div class="col-sm-3 " style="">
                                    @Html.TextBoxFor(x => x.Broker, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.Broker, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">KM:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.KM, new { @class = "form-control", @style = "width:110px;", @Value = Model.KM, @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="form-group ">
                                <label class=" bold   col-sm-1  control-label">From:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.From, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.From, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Add-Dest.:</label>
                                <div class="col-sm-3 ">
                                    <div class="col-sm-2" style="padding-left:0px;">
                                        <button class="btn btn-primary" style="font-size: 13px;padding:3px 12px;" id="AddDest" disabled><i class="glyphicon glyphicon-plus"></i></button>
                                    </div>
                                    <div class="col-sm-10" style="padding-left:0px;">
                                        @Html.TextBoxFor(x => x.DestCombo, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.DestCombo, @readonly = "readonly" })
                                    </div>
                                </div>
                                <label class=" bold   col-sm-1  control-label">To:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.To, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.To, @readonly = "readonly" })
                                </div>


                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Vehicle Cate.:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.VehicleCategory, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.VehicleCategory, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1 control-label">View-Dest:</label>
                                <div class="col-sm-3 ">
                                    <div class="col-sm-2" style="padding-left:0px;">
                                        <button class="btn btn-primary" style="font-size: 13px;padding:5px 12px;" data-toggle="modal" data-target="#GETDestMODAL"><i class="glyphicon glyphicon-eye-open"></i></button>
                                    </div>
                                    <div class="col-sm-10" style="padding-left:0px;" id="ListBoxDiv">
                                        @*@Html.ListBoxFor(x => x.PayLoadL, Model.Branches, new { @class = "listbox",@style="width:200px;" ,@id = "AppBranch" })*@
                                    </div>
                                </div>
                                <label class=" bold   col-sm-1  control-label">Receipt No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ReceiptNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ReceiptNo, @readonly = "readonly" })
                                </div>
                            </div>
                            @*<div class="form-group">
                <label class=" bold   col-sm-1 control-label">Pay-Load:</label>
                <div class="col-sm-3 ">
                    @Html.TextBoxFor(x => x.PayLoad, new { @class = "form-control", @style = "width:100%;", @Value = Model.PayLoad, @disabled = "disabled" })
                </div>
            </div>*@
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Driver-Name:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.DriverName, new { @class = "form-control", @style = "width:100%;", @Value = Model.DriverName, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1 control-label">Licence-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.LicenceNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.LicenceNo, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Lic.Exp-Date:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.LicenceExpDate, new { @class = "form-control", @style = "width:236px;", @Value = Model.LicenceExpDate, @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Owner-Name:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Owner, new { @class = "form-control", @style = "width:100%;", @Value = Model.Owner, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Challan-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ChallanNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ChallanNo, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Contact-No:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.ContactNo, new { @class = "form-control", @style = "width:236px;", @Value = Model.ContactNo, @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Freight:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Freight, new { @class = "form-control", @style = "width:100%;", @Value = String.Format("{0:0.00}", Model.Freight), @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Advance:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.Advance, new { @class = "form-control", @style = "width:236px;", @Value = String.Format("{0:0.00}", Model.Advance), @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label">Payable-At:</label>
                                <div class="col-sm-3 ">
                                    @Html.TextBoxFor(x => x.PayableAt, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.PayableAt, @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">Remark:</label>
                                <div class="col-sm-11 ">
                                    @Html.TextAreaFor(x => x.Remark, new { @class = "form-control", @style = "width:100%;", @rows = "1", @maxlength = "100", @Value = Model.Freight, @readonly = "readonly" })
                                </div>
                                
                            </div>
                            <div class="form-group">
                                <label class=" bold   col-sm-1  control-label">PayLoad:</label>
                                <div class="col-sm-1 " style="">
                                    @Html.TextBoxFor(x => x.PayLoad, new { @class = "form-control", @Value = Model.PayLoad, @readonly = "readonly" })
                                </div>

                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;width:auto;">Loaded :</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.Loaded, new { @class = "form-control", @style = "", @Value = Model.Loaded, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-2  control-label" style="margin-left: 0px;width: auto;">Available PayLoad:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.AvailablePayload, new { @class = "form-control", @style = "", @Value = Model.AvailablePayload, @readonly = "readonly" })
                                </div>
                                <label class=" bold   col-sm-1  control-label" style="margin-left: 0px;width: auto;">Over Load:</label>
                                <div class="col-sm-1 ">
                                    @Html.TextBoxFor(x => x.OverLoadLoad, new { @class = "form-control", @style = "", @Value = Model.OverLoadLoad, @readonly = "readonly" })
                                </div>
                                <div class="col-sm-3" style="display:flex;">
                                    <label class=" bold  col-sm-6  control-label">Schedule:</label>
                                    <label class=" bold     control-label">&nbsp;&nbsp;Date:&nbsp;&nbsp;</label>
                                    @Html.TextBoxFor(x => x.SC_Date, new { @class = "form-control", @style = "width:150px;", @Value = Model.SC_Date, @readonly = "readonly" })
                                    <label class=" bold     control-label">&nbsp;&nbsp;Time:&nbsp;&nbsp;</label>
                                    @Html.TextBoxFor(x => x.SC_Time, new { @class = "form-control", @style = "width:150px;", @Value = Model.SC_Time, @readonly = "readonly" })

                                    <label class=" bold     control-label">&nbsp;&nbsp;KM:&nbsp;&nbsp;</label>
                                    @Html.TextBoxFor(x => x.SC_KM, new { @class = "form-control", @style = "width:150px;", @Value = Model.SC_KM, @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3" style="max-height:288px;min-height:288px; overflow: scroll;">
                            <div style="border: 2px solid #d3d3d3;height:325px;">
                                <div class="form-group ">
                                    <label class=" bold   col-sm-12  control-label" style="text-align: center;font-size: 15px;color: red;text-decoration: underline;">Other Charges</label>
                                </div>
                                <div class="form-group ">
                                    <label class=" bold  col-sm-offset-1 col-sm-11 control-label">Partial View:</label>
                                </div>
                                <div class="form-group ">
                                    <label class=" bold   col-sm-offset-1  col-sm-3 control-label">Balance:</label>
                                    <div class="col-sm-5">
                                        @Html.TextBoxFor(x => x.Balance, new { @class = "form-control", @style = "width:100%;", @Value = Model.Balance.ToString("0.00") })
                                    </div>
                                </div>
                                <br />
                            </div>
                        </div>
                        @*<div class="col-sm-12 ">
                            <hr />
                            <div class="form-group col-sm-9" style="padding-left:0px;">
                                <label class=" bold   col-sm-1 control-label">Schedule:</label>
                                <div class="col-sm-3">
                                    <label class=" bold   col-sm-2  control-label">Date:</label>
                                    <div class="col-sm-10 ">
                                        @Html.TextBoxFor(x => x.SC_Date, new { @class = "form-control", @style = "width:100%;", @Value = Model.SC_Date, @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <label class=" bold   col-sm-2  control-label">Time:</label>
                                    <div class="col-sm-10 ">
                                        @Html.TextBoxFor(x => x.SC_Time, new { @class = "form-control", @style = "width:100%;", @Value = Model.SC_Time, @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <label class=" bold   col-sm-2  control-label">KM:</label>
                                    <div class="col-sm-10 ">
                                        @Html.TextBoxFor(x => x.SC_KM, new { @class = "form-control", @style = "width:100%;", @Value = Model.SC_KM, @readonly = "readonly" })
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    </div>
                </div>
            </fieldset>
        </div>

    </div>
</section>

<section class="panel" style="margin-top: 20px;">
    <div class="panel-body" style="margin-top:-30px;">
        <div class="form-horizontal " role="form" style="">
            <fieldset class=" col-sm-12" style="">
                @*<legend class="legend" style="color: black;"></legend>*@
                <button class="btn btn-info legend2" id="btnLoad">Attach LC</button>
                @*<div class="" style="margin-top:-45px;margin-left:12%;">
                    <div class=" Ordertable table-bordered table-info table-responsive-md">
                        <div class="Ordertable-row ">
                            <div class="Ordertable-cell" style="background-color: aquamarine;text-align: center;font-weight: bold;color: #ad225c;width:auto;">Current Available Load:-&nbsp;&nbsp;Weight:<input type="text" value="0" id="CWght" style="width: 80px;" /></div>
                            <div class="Ordertable-cell" style="background-color: aquamarine;text-align: center;font-weight: bold;color: #ad225c;width:auto;">&nbsp;&nbsp;&nbsp;&nbsp;Loaded:-&nbsp;&nbsp;Qty:<input type="text" id="LQty" value="0" style="width: 80px;" />&nbsp;&nbsp;Weight:<input type="text" id="LWght" value="0" style="width: 80px;" /></div>
                            <div class="Ordertable-cell" style="background-color: aquamarine;text-align: center;font-weight: bold;color: #ad225c;width:auto;">&nbsp;&nbsp;&nbsp;&nbsp;Balance:-&nbsp;&nbsp;Weight:<input type="text" id="BWght" value="0" style="width: 80px;" /></div>
                        </div>
                    </div>
                </div>*@
                <div class="panel panel-default" style="margin-bottom: 0px !important;">
                    <div class="panel-body " style="max-height:700px;min-height:700px;padding-left: 20px;padding: 1px !important;">
                        <div class="grid" id="SaveLCinFM" style="max-height:383px;min-height:383px; width:100%;">
                            @Html.Partial("_LoadLCGridView", Model.LClist)
                        </div>
                        @*<div class="col-sm-12" style="max-height:350px;min-height:350px; width:auto;padding-left:80px;">
                    <div class="tab">
                        <button class="tablinks" onclick="openCity(event, 'divLedgerTable')" id="LoadingTab">Loading</button>
                        <button class="tablinks" onclick="openCity(event, 'divLedgerTable3')">Dispatch</button>
                    </div>
                    <div id="divLedgerTable" style="height:315px;width:1700px;" class="tabcontent">
                        @Html.Partial("Loading", Model)
                    </div>
                    <div id="divLedgerTable3" style="height:315px;width:1700px;" class="tabcontent">
                        @Html.Partial("Dispatch", Model)
                    </div>
                    <script>
                        function openCity(evt, cityName) {
                            var i, tabcontent, tablinks;
                            tabcontent = document.getElementsByClassName("tabcontent");
                            for (i = 0; i < tabcontent.length; i++) {
                                tabcontent[i].style.display = "none";
                            }
                            tablinks = document.getElementsByClassName("tablinks");
                            for (i = 0; i < tablinks.length; i++) {
                                tablinks[i].className = tablinks[i].className.replace(" active", "");
                            }
                            document.getElementById(cityName).style.display = "block";
                            evt.currentTarget.className += " active";
                        }
                        document.getElementById("LoadingTab").click();
                    </script>
                </div>*@
                    </div>
                    @*<div class="panel-footer">
                <div class="form-group" style="margin-bottom:2px!important;">
                    <div class="col-sm-1" style="width: 110px;">
                        <button class="btn btn-primary" style="font-size: 15px;width: 100px;padding:3px 12px;" id="btnLoad">Load LC</button>
                    </div>
                    <div class="col-sm-1">
                        <button class="btn btn-primary" style="font-size: 15px;width: 100px;padding:3px 12px;" id="Submit">Submit</button>
                    </div>

                </div>
            </div>*@
                </div>
            </fieldset>
        </div>
    </div>


</section>

<footer class="footer-section" style="height:60px;position:fixed;background-color:#4B4A4A;padding:3px;color:white;">
    <div class="row">
        <div class="col-sm-5">
            <div class="pull-left">

                @*<button class="btn btn-danger" data-toggle="modal" data-target="#LockModal" style="font-size: 13px;padding:3px 12px;" id="btnBlock"><i class="glyphicon glyphicon-ban-circle" style="font-size: 2em;"></i><br />Lock</button>*@
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="btnListPrint"><i class="glyphicon glyphicon-print" style="font-size: 2em;"></i><br />List Print</button>
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="btnShare"><i class="glyphicon glyphicon-share" style="font-size: 2em;"></i><br />Share</button>
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="btnDownload"><i class="glyphicon glyphicon-download" style="font-size: 2em;"></i><br />Download</button>
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="btnAttachment" data-toggle="modal" data-target="#Attachmentmodal"><i class="glyphicon glyphicon-paperclip" style="font-size: 2em;"></i><br />Attachment</button>
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="btnPrint"><i class="glyphicon glyphicon-print" style="font-size: 2em;"></i><br />Print</button>
                @*<button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="SaveDraft"><i class="glyphicon glyphicon-floppy-saved" style="font-size: 2em;"></i><br />Save Draft</button>*@
                <button class="btn btn-info" style="font-size: 13px;padding:3px 12px;" id="" data-toggle="modal" data-target="#Notemodal"><i class="glyphicon glyphicon-file" style="font-size: 2em;"></i><br />Save Note</button>
            </div>
        </div>
        <div class="col-sm-offset-1 col-sm-2" style="">
            <div class="pull-left">

            </div>
        </div>
        <div class="col-sm-4">
            <div class="pull-right">
                <button class="btn btn-primary" style="font-size: 13px;padding:3px 12px;" id="Submit"><i class="glyphicon glyphicon-floppy-saved" style="font-size: 2em;"></i><br />Save</button>
                <button class="btn btn-primary" style="font-size: 13px;padding:3px 12px;" id="SubmitClear"><i class="glyphicon glyphicon-floppy-saved" style="font-size: 2em;"></i>&nbsp;&nbsp;&nbsp;<i class="glyphicon glyphicon-print" style="font-size: 2em;"></i><br />Save And Clear</button>
                @*<button class="btn btn-primary" style="font-size: 13px;padding:3px 12px;" id="Edit" onclick="EditEntry();"><i class="glyphicon glyphicon-edit" style="font-size: 2em;"></i><br /> Edit</button>*@
                @*<button class="btn btn-danger" style="font-size: 13px;padding:3px 12px;" id="btnDelete"><i class="glyphicon glyphicon-trash" style="font-size: 2em;"></i><br />Delete</button>*@
                <a href="~/Logistics/Loading_Dispatch/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="font-size: 13px;padding:3px 12px;" id="Cancel"><i class="glyphicon glyphicon-remove" style="font-size: 2em;"></i><br />Cancel</a>
            </div>
        </div>
    </div>
</footer>

<!--Attachment Modal -->
<div class="example-modal">
    <div id="Attachmentmodal" class="modal modal-default">
        <div class="modal-dialog " style="width:1080px;">
            <div id="AttachmentmodalDiv">
                <div class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title"><b>Attachment</b></h4>
                        </div>
                        <div class="modal-body">
                            <div class="grid" id="FormatTable" style="max-height:600px;min-height:600px; width:100%; overflow: scroll;">
                                <div id="" class="" style="width:100%;">
                                    <div class="form-group">
                                        <div class="col-sm-3" style="padding-top: 5px;">
                                            <label class="col-sm-12 control-label" style="font-weight:bold;color:black;">Upload File:</label>
                                        </div>
                                        <div class="col-sm-5">
                                            @Html.TextBoxFor(x => x.Attachment.UploadFile, new { @type = "file", @class = "form-control"@*, @style = "font-size:12pt;font-weight:bolder;"*@})
                                        </div>
                                        <div class="col-sm-4">

                                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnPhotoupload">Upload</button>
                                        </div>
                                    </div>
                                    <div class="form-group col-sm-12" id="ShowAllFile">
                                        <hr />
                                        @Html.Partial("Loading_DispatchAtachmentView", Model)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;">
                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnAttachSubmit" data-dismiss="modal">Save</button>
                            <button data-dismiss="modal" class="btn btn-danger" type="button">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Note Modal -->
<div class="example-modal">
    <div id="Notemodal" class="modal modal-default">
        <div class="modal-dialog " style="width:1080px;">
            <div id="NotemodalDiv">
                <div class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <h4 class="modal-title"><b>Note</b></h4>
                        </div>
                        <div class="modal-body">
                            <div class="grid" id="FormatTable" style="max-height:600px;min-height:600px; width:100%; overflow: scroll;">
                                <div id="" class="" style="width:100%;">
                                    <div class="form-group">
                                        <div class="col-sm-1" style="padding-top: 5px;">
                                            <label class="col-sm-12 control-label" style="font-weight:bold;color:black;">Note:</label>
                                        </div>
                                        <div class="col-sm-10">
                                            @Html.TextAreaFor(x => x.Note, new { @class = "form-control", @style = "", @maxlength = 100, @rows = "1", @Value = Model.Note })
                                        </div>

                                    </div>
                                    <div class="form-group col-sm-12" id="ShowAllFile" style="padding-top:5px;">
                                        <div class="col-sm-2" style="float:right;">
                                            <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="btnNote" data-dismiss="modal">Submit</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer" style="background-color:#cccccc;height:42px;padding-bottom:5px;padding-top:5px;border-radius: 0px 0px 5px 5px;">
                            <button data-dismiss="modal" class="btn btn-danger" type="button">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--View Modal -->
<div class="example-modal">
    <div id="updTfatsearch1" class="modal modal-default">
        <div class="modal-dialog" style="width:1080px;">
            <div id="updTfatsearchDiv1">
            </div>
        </div>
    </div>
</div>
<!--Lock Modal -->
<div class="modal" id="LockModal" style="margin-top: 8%;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title" style="font-weight:bold;text-align:center;">Lock System</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <div class="form-group">
                    <label class=" bold  col-sm-1 control-label" style="color:black;">ALL </label>
                    <div class="col-sm-1" style="">
                        @Html.CheckBoxFor(x => x.All, new { @class = "form-control", @style = "margin-top: -1px;height: 18px;width: 20px;", @Value = Model.All })
                    </div>
                    <label class=" bold  col-sm-1 control-label" style="color:black;">Dispach </label>
                    <div class="col-sm-1" style="">
                        @Html.CheckBoxFor(x => x.Dispach, new { @class = "form-control", @style = "margin-top: -1px;height: 18px;width: 20px;", @Value = Model.Dispach })
                    </div>
                    <label class=" bold  col-sm-1 control-label" style="color:black;">Delivery </label>
                    <div class="col-sm-1" style="">
                        @Html.CheckBoxFor(x => x.Delivery, new { @class = "form-control", @style = "margin-top: -1px;height: 18px;width: 20px;", @Value = Model.Delivery })
                    </div>
                    <label class=" bold  col-sm-1 control-label" style="color:black;">Billing </label>
                    <div class="col-sm-1" style="">
                        @Html.CheckBoxFor(x => x.Billing, new { @class = "form-control", @style = "margin-top: -1px;height: 18px;width: 20px;", @Value = Model.Billing })
                    </div>
                </div>
            </div>
            <br />
            <div class="form-group">
                <label class=" bold  col-sm-1 control-label" style="color:black;">Remark </label>
                <div class="col-sm-11" style="margin-left: -15px;">
                    @Html.TextAreaFor(x => x.LockRemark, new { @class = "form-control", @style = "", @maxlength = 100, @rows = "2", @Value = Model.LockRemark })
                </div>
            </div>
            <br />
            <br />
            <br />
            <br />

            <!-- Modal footer -->
            <div class="modal-footer">
                <div class="form-group">
                    <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="SaveLock" data-dismiss="modal">Save</button>
                </div>
            </div>

        </div>
    </div>
</div>
<!--All Destination Modal -->
<div class="modal fade" id="GETDestMODAL" style="overflow:scroll;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" @*style="margin-top: 60px;"*@>
    <div class="modal-dialog modal-lg modal-sm modal-xl" role="document" style="width: fit-content;margin: auto;margin-top: 5%;">
        <div class="modal-content">
            <div class="modal-body">
                <div id="GetDestView">
                    @Html.Partial("_Get_Destination_List", Model)
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@Html.HiddenFor(x => x.Document)
@*@Html.HiddenFor(x => x.BeforeLoadPayOut, new { id = "hdnBalLoad" })*@

<!--All LC Modal -->

<div class="modal fade" id="GetLoadLCLIst">
    <div class="modal-dialog modal-lg modal-sm modal-xl" role="document" style="width: auto;margin: auto;margin-top: 3%;">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <div class="form-group">
                    <div class="col-md-2"><h4 class="modal-title"><b>Lorry Challan List</b></h4></div>

                    <div class="col-md-4" style="float:right;">

                    </div>

                </div>
            </div>
            <div class="modal-body" style="padding: 0px !important;height:500px!important;">
                <div class="grid" id="FormatTable">
                    <div class="form-group col-sm-12" id="ShowLoadingLCList" style="overflow: auto;width: 100%;display: block;">

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnLoadIT">Load</button>
            </div>
        </div>
    </div>
</div>

<!--Show Lr OF LC Modal -->
@*<div class="modal fade" id="GetLoadLRLIst" style="" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" >
    <div class="modal-dialog modal-lg modal-sm modal-xl" role="document" style="width: fit-content;margin: auto;margin-top: 5%;">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#cccccc;padding-top:5px;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <div class="form-group" >
                    <div class="col-sm-offset-5 col-sm-3"><h4 class="modal-title"><b>Pending Lorry Challan</b></h4></div>

                </div>


            </div>
            <div class="modal-body">
                <div class="grid" id="FormatTable" style="max-height:350px;min-height:350px; width:100%;">
                    <div id="" class="" style="width:100%;">
                        <div class="form-group col-sm-12" id="ShowLoadingLRList">

                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>*@