@model ALT_ERP3.Areas.Logistics.Models.ConsignorRulesforSMSEmailVM
@using Common;
@{
    ViewBag.Title = "Transaction Authorisation Rules";
    Layout = null;
}
<style>
    .multiselect {
        background-color: #ab4f4f !important;
    }
</style>
<link href="~/Content/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Content/bootstrap-multiselect.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        GetMyFavorites('@Model.ViewDataId');
        if ('@Model.Mode' == "View" || '@Model.Mode' == "Delete") {
            $('.form-group :input').prop("disabled", true);
        }
        @* iX9: Load List for Autocomplete Inputs i.e. ControlType='A' *@
        LoadType();
        if ('@Model.Mode' != "Add") {
            LoadUserID();
        }

        LoadSMSTemplate();
        LoadEmailTemplate();

        $('#AppBranch').val('');
        var CommonValue = "";
        if ('@Model.AppBranch' != "") {
            $.each('@Model.AppBranch'.split(','), function (idx, val) {
                $(".AppBranchL option[value='" + val + "']").attr("selected", true);
                CommonValue += "" + val + ",";0
            });
            CommonValue = CommonValue.toString().substring(0, CommonValue.length - 1);
            $('#AppBranch').val(CommonValue);
        }

        @*$('#EmailFormat').val('');
        var CommonValue = "";
        if ('@Model.EmailFormat' != "") {
            $.each('@Model.EmailFormat'.split(','), function (idx, val) {
                $(".EmailFormatL option[value='" + val + "']").attr("selected", true);
                CommonValue += "" + val + ",";
            });
            CommonValue = CommonValue.toString().substring(0, CommonValue.length - 1);
            $('#EmailFormat').val(CommonValue);
        }*@

        $(".CodeL").change(function () {
            debugger;
            $('#Code').val('');
            var selected = "";
            $(".CodeL :selected").each(function () {
                selected += ("" + $(this).val() + ",");
            });
            selected = selected.toString().substring(0, selected.length - 1);
            $('#Code').val(selected)
            return false;
        });
        $(".AppBranchL").change(function () {
            debugger;
            $('#AppBranch').val('');
            var selected = "";
            $(".AppBranchL :selected").each(function () {
                selected += ("" + $(this).val() + ",");
            });
            selected = selected.toString().substring(0, selected.length - 1);
            $('#AppBranch').val(selected)
            return false;
        });
        $(".EmailFormatL").change(function () {
            debugger;
            $('#EmailFormat').val('');
            var selected = "";
            $(".EmailFormatL :selected").each(function () {
                selected += ("" + $(this).val() + ",");
            });
            selected = selected.toString().substring(0, selected.length - 1);
            $('#EmailFormat').val(selected)
            return false;
        });

        @* iX9: Executed when Save/Submit button is Pressed *@
        $('#Submit').click(function (event) {
            event.preventDefault();
            //if ($("#TransactionAuthorisationRules").validate().form() == false)
            //    return;
            if ('@Model.Mode'!="Delete") {
                if ($("#Type").val() == null || $("#Type").val() == '') {
                    $("#ErrorMessage").show();
                    $("#ErrorMessage").text('Type is Required..');
                    return;
                }
                if ($("#Code").val() == null || $("#Code").val() == '') {
                    $("#ErrorMessage").show();
                    $("#ErrorMessage").text('Consignor is Required..');
                    return;
                }
                if ($("#AppBranch").val() == null || $("#AppBranch").val() == '') {
                    $("#ErrorMessage").show();
                    $("#ErrorMessage").text('Branch is Required..');
                    return;
                }

                //if ($("#SendEmail").prop("checked") == false && $("#SendSMS").prop("checked") == false) {
                //    $("#ErrorMessage").show();
                //    $("#ErrorMessage").text('Send Email / SMS is Required..');
                //    return;
                //}
                if ($("#SendEmail").prop("checked") == true) {
                    if ($("#EmailFormat").val() == null || $("#EmailFormat").val() == '') {
                        $("#ErrorMessage").show();
                        $("#ErrorMessage").text('Email Attach is Required..');
                        return;
                    }
                }
                if ($("#SendSMS").prop("checked") == true) {
                    if ($("#SMSTemplate").val() == null || $("#SMSTemplate").val() == '') {
                        $("#ErrorMessage").show();
                        $("#ErrorMessage").text('SMS Template is Required..');
                        return;
                    }
                }

            }
            

            var url = '@Url.Action("SaveData")';
            @* iX9: Data from individual field is passed on to the Model and then to Controller for Saving *@
            var ModelData = {};
            ModelData["Document"] = $("#Document").val();
            ModelData["Type"] = $("#Type").val();
            ModelData["Type"] = $("#Type").val();
            ModelData["Code"] = $("#Code").val();
            ModelData["AppBranch"] = $("#AppBranch").val();
            ModelData["EmailFormat"] = $("#EmailFormat").val();
            ModelData["SMSTemplate"] = $("#SMSTemplate").val();
            ModelData["SendSMS"] = $("#SendSMS").prop("checked");
            ModelData["SendEmail"] = $("#SendEmail").prop("checked");

            ModelData["Mode"] = '@Model.Mode';
            ModelData["Header"] = '@Model.Header';
            var DTO = { mModel: ModelData };
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    if (data.Status == 'Success') {
                        $('.spinner').hide();
                        window.location.href = "/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType";
                        $("#ErrorMessage").hide();
                    }
                    else {
                        $('.spinner').hide();
                        alert(data.Message);
                    }
                },
            });
        });
        $('.CodeL,.AppBranchL,.EmailFormatL').multiselect({
            includeSelectAllOption: true,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            filterPlaceholder: 'Search for something...',
            buttonWidth: '235',
            numberDisplayed: 1,
            nonSelectedText: 'Select Item',
        })
    });
    @* iX9: Autocomplete Code i.e. ControlType='A' and vDepend<>'' *@
    function LoadType() {
        var url = '@Url.Action("AutoCompleteType")'
        $('#Type').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.Type', text: '@Model.TypeName' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };

    function LoadUserID() {
        var url = '@Url.Action("AutoCompleteUserID")'
        $('#Code').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.Code', text: '@Model.CodeName' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        })
    };
    function LoadSMSTemplate() {
        var url = '@Url.Action("GetSMSTemplates")'
        $('#SMSTemplate').select2({
            minimumInputLength: 0,
            placeholder: 'Search',
            ajax: {
                url: url,
                dataType: 'json',
                quietMillis: 100,
                enableFiltering: true,
                allowClear: true,
                minimumInputLength: 0,
                multiple: true,
                width: 300,
                data: function (term, page) {
                    return {
                        types: ["exercise"],
                        limit: -1,
                        term: term
                    };
                },
                results: function (data, page) {
                    clientObj = JSON.stringify(data);
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.Name,
                                id: item.Code
                            }
                        })
                    };
                }
            },

            initSelection: function (element, callback) {
                var data = { id: '@Model.SMSTemplate', text: '@Model.SMSTemplateName' };
                callback(data);
            },

            formatResult: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },

            formatSelection: function (exercise) {
                return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                    "</div></span></div></div>";
            },
        });
    }
    function LoadEmailTemplate() {
        var url = '@Url.Action("GetEmailAttachment")'
            $('#EmailFormat').select2({
                minimumInputLength: 0,
                placeholder: 'Search',
                ajax: {
                    url: url,
                    dataType: 'json',
                    quietMillis: 100,
                    enableFiltering: true,
                    allowClear: true,
                    minimumInputLength: 0,
                    multiple: true,
                    width: 300,
                    data: function (term, page) {
                        return {
                            types: ["exercise"],
                            limit: -1,
                            term: term
                        };
                    },
                    results: function (data, page) {
                        clientObj = JSON.stringify(data);
                        return {
                            results: $.map(data, function (item) {
                                return {
                                    text: item.Name,
                                    id: item.Code
                                }
                            })
                        };
                    }
                },

                initSelection: function (element, callback) {
                    var data = { id: '@Model.EmailFormat', text: '@Model.EmailFormatL' };
                    callback(data);
                },

                formatResult: function (exercise) {
                    return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                        "</div></span></div></div>";
                },

                formatSelection: function (exercise) {
                    return "<div class='row-fluid'><div class=''><span class='span1'><div style='color:" + exercise.alias + "'>" + exercise.text +
                        "</div></span></div></div>";
                },
            });
    };
</script>

@* iX9: Form Design *@
<header class="header fixed-top" style="position:fixed;background-color:lightgray;padding:6px;width:100%;margin-top:0%;">
    <div class="fixhead">
        <b class="CodeSt">@Model.Header</b>
        <span class="tools pull-right">
            <a href="~/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="color:white;font-weight:bolder;font-size:13px;padding:3px 10px;" id="Cancel2">X</a>
        </span>
        <span class="tools pull-right">
            <b class="CodeSt">@Model.Mode Mode</b>
        </span>
        <button class="fa fa-heart pull-right" type="submit" onclick="AddToFavorite('@Model.ViewDataId','@Model.OptionCode')" title="Add/Remove from My Favorites" id="MyFavorites" style="color: rgb(145,142,142); background-color: transparent; border: none; font-size: 20px; height: 27px; margin-right: 5px;margin-top:5px;" name="MyFavorites"></button>

    </div>
</header>

<section class="panel" style="margin-bottom:0px;">
    <div class="panel-body">
        <div class="form-horizontal " id="TransactionAuthorisationRules" role="form" style="margin-top:2%;">
            <div id="ErrorMessage" name="ErrorMessage" class="alert alert-danger" style="display: none"></div>
            <br />
            @* iX9: -- Code for Header Starts -- *@
            @* iX9: Tab Body Panels *@
            <div class="form-group hidden">
                <label class="col-sm-1 control-label">Type:</label>
                <div class="col-sm-3">
                    @if (Model.Mode != "Add")
                    {
                        @Html.TextBoxFor(x => x.Type, new { @class = "input-large-query", @readonly = "readonly", @style = "width:100%;margin-top:2px;", @id = "Type", @Value = Model.Type, @Name = "Type" })
                    }
                    else
                    {
                        @Html.TextBoxFor(x => x.Type, new { @class = "input-large-query", @style = "width:100%;margin-top:2px;", @id = "Type", @Value = Model.Type, @Name = "Type" })
                    }
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-1 control-label">Consignor/Consignee:</label>
                <div class="col-sm-3">
                    @if (Model.Mode == "Add")
                    {
                        @Html.ListBoxFor(x => x.CodeL, Model.Consignors, new { @class = "CodeL", @id = "CodeL" })
                    }
                    else
                    {
                        @Html.TextBoxFor(x => x.Code, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.Code,@disabled="disabled" })
                    }
                </div>
                <label class="col-sm-1 control-label">Branch:</label>
                <div class="col-sm-3">
                    @Html.ListBoxFor(x => x.AppBranchL, Model.Branches, new { @class = "AppBranchL", @id = "AppBranchL" })
                </div>
            </div>
            <hr />
            <div class="form-group">
                <label class="col-sm-1 control-label">Send Email:</label>
                <div class="col-sm-3">
                    @Html.CheckBoxFor(x => x.SendEmail, new { @value = Model.SendEmail, @id = "SendEmail", @name = "SendEmail", @style = "height:16px;width:16px;" })
                </div>
                <label class="col-sm-1 control-label">Email Attach:</label>
                <div class="col-sm-3">
                    @*@Html.ListBoxFor(x => x.EmailFormatL, Model.EmailFormats, new { @class = "EmailFormatL", @id = "EmailFormatL" })*@
                    @Html.TextBoxFor(x => x.EmailFormat, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.EmailFormat })
                </div>
            </div>
            <hr />
            <div class="form-group">
                <label class="col-sm-1 control-label">Send SMS:</label>
                <div class="col-sm-3">
                    @Html.CheckBoxFor(x => x.SendSMS, new { @value = Model.SendSMS, @id = "SendSMS", @name = "SendSMS", @style = "height:16px;width:16px;" })
                </div>
                <label class="col-sm-1 control-label">SMS Template:</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.SMSTemplate, new { @class = "input-large-query", @style = "width:100%;", @Value = Model.SMSTemplate })
                </div>
            </div>
        </div>
    </div>
</section>

<footer class="footer-section" style="height:33px;position:fixed;background-color:#4B4A4A;padding:3px;color:white;">
    <div class="row">
        <div class="col-sm-5">
        </div>
        <div class="col-sm-3" style="margin-top:4px;color:white;font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            ALT AIR-3.0, Shruham Software
        </div>
        <div class="col-sm-4">
            <div class="pull-right">
                @if (Model.Mode != "View")
                {
                    if (Model.Mode == "Delete")
                    {
                        <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="Submit">Delete</button>
                    }
                    else
                    {
                        <button class="btn btn-success" style="font-size: 13px;padding:3px 12px;" id="Submit">Save</button>
                    }
                }
                <a href="~/Logistics/MasterGrid/Index?ViewDataId=@Model.ViewDataId&Module=@Model.Module&TableName=@Model.TableName&OptionType=@Model.OptionType&OptionCode=@Model.OptionCode&Header=@Model.Header&Controller2=@Model.Controller2&MainType=@Model.MainType" class="btn btn-danger" style="font-size: 13px;padding:3px 12px;" id="Cancel">Cancel</a>
            </div>
        </div>
    </div>
</footer>

<input type="hidden" id="controllername" />
@Html.HiddenFor(x => x.Document)
@Html.HiddenFor(x => x.AppBranch)
@Html.HiddenFor(x => x.EmailFormat)
@Html.HiddenFor(x => x.Code)

@*
    Code Auto Generated on Mon 22-Apr-2019 04:49 PM
    Engine: iX9Generator, ver: 3.7 Revision: 32
    by Team Shruham Software *@
