
@model AdvancePayModel
@using Common

<div class="modal-content">
    <div class="modal-header" style="background-color:#cccccc">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"></span></button>
        <h4 class="modal-title">@Model.SessionFlag Record</h4>
    </div>
    <div class="modal-body" style="height:470px;padding-left:0px;">
        <div class="form-horizontal" id="ledgerupdate" style="margin-left:30px;">
            <div id="ErrorMessage1" name="ErrorMessage1" class="alert alert-danger" style="display: none; padding:3px;"></div>
            <div class="form-group">
                <div class="col-sm-1 control-label">FM No:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.FMNo, new { @class = "form-control", @id = "addFMNo", @Name = "addFMNo", @style = "width:80%;", @Value = Model.FMNo, @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">Type :</div>
                <div class="col-sm-2">
                    @Html.DropDownListFor(x => x.AdvType, DropdownHelper.EmptyList(), new { @class = "form-control", @id = "addAdvType", @Name = "addAdvType", @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">FM Date:</div>
                <div class="col-sm-4">
                    @Html.TextBoxFor(x => x.FMDateStr, new { @class = "form-control", @id = "addFMDateStr", @Name = "addFMDateStr", @style = "width:80%;", @Value = Model.FMDate.ToString("dd-MM-yyyy") })

                </div>

            </div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Branch:</div>
                <div class="col-sm-2">
                    @Html.DropDownListFor(x => x.Branch, DropdownHelper.EmptyList(), new { @class = "form-control", @id = "addBranch", @Name = "addBranch" })
                </div>

                @if (Model.AdvType == "A")
                {
                    <div class="col-sm-1 control-label">Adv Pending:</div>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(x => x.AdvPending, new { @class = "form-control", @id = "addAdvPending", @Name = "addAdvPending", @style = "width:80%;", @Value = Model.AdvPending, @disabled = "disabled" })
                    </div>
                    <div class="col-sm-1 control-label">Curr Balance Amt:</div>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(x => x.AdvPending, new { @class = "form-control", @id = "CurrBalAmt", @Name = "CurrBalAmt", @style = "width:80%;", @Value = Model.AdvPending, @disabled = "disabled" })
                    </div>
                }
                else
                {
                    <div class="col-sm-1 control-label">Bal Pending:</div>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(x => x.BalPending, new { @class = "form-control", @id = "addBalPending", @Name = "addBalPending", @Value = Model.BalPending, @disabled = "disabled" })
                    </div>
                    <div class="col-sm-1 control-label">Curr Balance Amt:</div>
                    <div class="col-sm-3">
                        @Html.TextBoxFor(x => x.AdvPending, new { @class = "form-control", @id = "CurrBalAmt", @Name = "CurrBalAmt", @style = "width:80%;", @Value = Model.BalPending, @disabled = "disabled" })
                    </div>
                }


            </div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Party:</div>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.Party, new { @class = "form-control", @id = "addParty", @Name = "addParty", @Value = Model.Party, @disabled = "disabled" })
                </div>
                <div class="col-sm-1 control-label">Related Charges:</div>
                <div class="col-sm-3">
                    @Html.TextBoxFor(x => x.RelatedTo, new { @class = "form-control", @id = "addRelatedTo", @Name = "addRelatedTo", @Value = Model.RelatedTo, @disabled = "disabled" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Amount:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.Amt, new { @class = "form-control", @id = "addAmt", @Name = "addAmt", @Value = Model.Amt })
                </div> 
                <div class="col-sm-1 control-label">TDS Amt:</div>
                <div class="col-sm-2">
                    @Html.TextBoxFor(x => x.BillTDS, new { @class = "form-control", @id = "BillTDS", @Name = "BillTDS", @Value = Model.BillTDS })
                </div>
                @*<div class="col-sm-1 control-label">Remark:</div>
                <div class="col-sm-6">
                    @Html.TextAreaFor(x => x.Remark, new { @class = "form-control", @id = "addRemark", @Name = "addRemark", @Value = Model.Remark, @cols = 20, @rows = 2, @maxlength = 100 })
                </div>*@


            </div>
            <div class="form-group">
                <div class="col-sm-1 control-label">Remark:</div>
                <div class="col-sm-6">
                    @Html.TextAreaFor(x => x.Remark, new { @class = "form-control", @id = "addRemark", @Name = "addRemark", @Value = Model.Remark, @cols = 20, @rows = 2, @maxlength = 100 })
                </div>
            </div>

            <div class="form-group">
                <div id="divAddchargesList" style="min-height:200px;max-height:200px;overflow: scroll;">
                    <table id="addChargestbl" class="zui-table" style="width:100%;">
                        <thead>
                            <tr>
                                <th>Charges</th>
                                <th>+/-</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ChargesList != null)
                            {
                                foreach (var item in @Model.ChargesList.ToList())
                                {
                                    <tr id="datacharge" style="font-family:Tahoma;font-size:9pt;border: solid 1px lightgray;">
                                        <td style="vertical-align:inherit;">@item.Header</td>
                                        <td style="vertical-align:inherit;">@item.AddLess</td>
                                        <td><input type="text" id="txtf_@item.Fld" alt="@item.Fld" value="@item.Amt" class="txtfvalue" style="text-align:right" /></td>
                                        <td hidden="hidden">@item.PostCode</td>
                                        <td hidden="hidden">@item.Fld</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer" style="background-color:#cccccc">
        <div class="col-sm-2 control-label">Net Value:</div>
        <div class="col-sm-2">
            @Html.TextBoxFor(x => x.NetAmt, new { @class = "form-control", @id = "addNetAmt", @Name = "addNetAmt", @Value = Model.NetAmt })
        </div>
        <button type="button" class="btn btn-success" id="pushrecord">Save</button>
        <button type="button" class="btn btn-success" id="btnAddAdvanceList">Save</button>

        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
    </div>
</div>
@Html.HiddenFor(x => x.tempid, new { @id = "hdntempid" })
@Html.HiddenFor(x => x.SessionFlag, new { @id = "hdnSessionFlag" })

@Html.HiddenFor(x => x.AdvAmt, new { @id = "hdnAdvAmt" })
@Html.HiddenFor(x => x.BalAmt, new { @id = "hdnBalAmt" })
@Html.HiddenFor(x => x.Freight, new { @id = "hdnFreight" })
@Html.HiddenFor(x => x.AdvType, new { @id = "hdnuAdvType" })
<script>
    $(document).ready(function () {

        loadAdvanceTypeList();
        loadBranchList();
        //loadFMNoList();


        $('#addFMDateStr').datepicker({
            format: 'dd-mm-yyyy',
            autoclose: true,
        });

        $("#btnAddAdvanceList").click(function (event) {
            event.preventDefault();

            var mChargeList = [];
            var chgs1 = {
                Header: "",
                AddLess: "",
                Amt: $("#addAmt").val(),
                PostCode: "",
                Fld: "Amt"
            }
            mChargeList.push(chgs1);
            var chgs2 = {
                Header: "",
                AddLess: "",
                Amt: $("#BillTDS").val(),
                PostCode: "",
                Fld: "TDS"
            }
            mChargeList.push(chgs2);
            $('#addChargestbl tbody tr').each(function () {
                debugger;
                var tds = $(this).find('td');
                var chgs = {
                    Header: tds.eq(0).text(),
                    AddLess: tds.eq(1).text(),
                    Amt: tds.find("input[class='txtfvalue']").val(),
                    PostCode: tds.eq(3).text(),
                    Fld: tds.eq(4).text()
                }
                mChargeList.push(chgs);
            });

            if ($('#addFMNo').val() == '' || $('#addFMNo').val() == null || $('#addFMNo').val() == '0') {
                alert('Please Select FM No.')
                return;
            }
            //if ($('#addAdvType').val() == "A" && (parseFloat($('#addAmt').val()) > parseFloat($('#addAdvPending').val()))) {
            //    alert('Amount cant be greater than Advance Pending Amount ')
            //    return;
            //}

            //if ($('#addAdvType').val() == "B" && (parseFloat($('#addAmt').val()) > parseFloat($('#addBalPending').val()))) {
            //    alert('Amount cant be greater than Balance Pending Amount ')
            //    return;
            //}

            var accname = $('#addCode').select2('data').text;
            var ModelData = {};
            ModelData["Branch"] = $('#addBranch').val();
            ModelData["ChargesList"] = mChargeList;
            ModelData["tempId"] = $('#hdntempid').val();
            ModelData["SessionFlag"] = $('#hdnSessionFlag').val();
            ModelData["Amt"] = $('#addAmt').val();
            ModelData["FMDateStr"] = $('#addFMDateStr').val();
            ModelData["AdvPending"] = $('#addAdvPending').val();
            ModelData["BalPending"] = $('#addBalPending').val();
            ModelData["FMNo"] = $('#addFMNo').val();
            ModelData["AdvAmt"] = $('#hdnAdvAmt').val();
            ModelData["BalAmt"] = $('#hdnBalAmt').val();
            ModelData["Freight"] = $('#hdnFreight').val();
            ModelData["AdvType"] = $('#hdnuAdvType').val();
            ModelData["Remark"] = $('#addRemark').val();

            ModelData["TDSFlag"] = $("#addTDSFlag").prop('checked');
            ModelData["GSTFlag"] = $("#addGSTNoItc").prop('checked');
            ModelData["TDSRate"] = $("#addTDSRate").val();
            ModelData["IGSTRate"] = $("#addIGSTRate").val();
            ModelData["CGSTRate"] = $("#addCGSTRate").val();
            ModelData["SGSTRate"] = $("#addSGSTRate").val();




            var DTO = { Model: ModelData };
            var url = '@Url.Action("AddEditSelectedAdvance")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforesend: function () {
                    $('.spinner').show();
                },
                success: function (data) {
                    $('.spinner').hide();
                    $('#ErrorMessage1').hide();
                    $('#addcashbank').modal('hide');
                    $('#divLedgerTable').html('');
                    $('#divLedgerTable').html(data.Html);

                    $('#NetAmt').val(data.SumAmt);
                    //$('#addTaxable').val(data.Taxable);
                    //$('#txttottxable').val(data.Taxable);

                    //$('#TDSAmt').val(data.TdsAmt.toFixed(2));
                    //$('#addTDSAmt').val(data.TdsAmt.toFixed(2));

                    //$('#txttotigst').val(data.IGST.toFixed(2));
                    //$('#addIGSTAmt').val(data.IGST.toFixed(2));

                    //$('#txttotsgst').val(data.SGST.toFixed(2));
                    //$('#addSGSTAmt').val(data.SGST.toFixed(2));

                    //$('#txttotcgst').val(data.CGST.toFixed(2));
                    //$('#addCGSTAmt').val(data.CGST.toFixed(2));

                    //$('#txtinvamt').val(data.InvAmt.toFixed(2));



                },
                error: function () {
                    $('.spinner').hide();
                    alert("error occured while processing your request.");
                }
            });
        });

        $(".txtfvalue,#addAmt,#BillTDS").focusin(function () {
            $("#PrevsValue").val(this.value);
        });

        $("#addAmt").blur(function () {
            var CurrAmt = parseFloat($("#addAmt").val());
            var PreviousAmt = parseFloat($("#PrevsValue").val());
            var BillBal = parseFloat($("#CurrBalAmt").val());

            var ExtendUpto = BillBal + PreviousAmt;
            if (CurrAmt != PreviousAmt)
            {
                
            }



        });


        $("#addAmt").blur(function () {
            debugger;
            var CurrAmt = parseFloat($("#addAmt").val());
            var PreviousAmt = parseFloat($("#PrevsValue").val());
            var BillBal = parseFloat($("#CurrBalAmt").val());

            var TdsFlag = $('#addTDSFlag').is(":checked");
            var TdsRate = (parseFloat($("#addTDSRate").val()));
            var TdsBillFlag = $("#hdnTDSBillWiseCut").val();
            var TdsRound = parseInt($("#hdnRoundOff").val());
            var TdsAmt = 0;
            var CalculateTds = false;
            if (TdsFlag == true && TdsBillFlag == "True") {
                CalculateTds = true;
            }

            var ExtendUpto = BillBal + PreviousAmt;

            var ExtraAmt = 0,ClaimAmt=0;
            $('#addChargestbl tbody tr').each(function () {
                var tds2 = $(this).find('td');
                if (tds2.eq(1).text() == "+") {
                    ExtraAmt += parseFloat(tds2.find("input[class='txtfvalue']").val());
                }
                if (tds2.eq(1).text() == "-") {
                    ClaimAmt += parseFloat(tds2.find("input[class='txtfvalue']").val());
                }
            });

            if (CurrAmt != PreviousAmt)
            {
                if (CurrAmt >= ExtendUpto) {
                    $("#addAmt").val(parseFloat(ExtendUpto).toFixed(2));
                    $("#CurrBalAmt").val("0.00");
                    if (CalculateTds) {
                        var TotalPrincipalAmt = parseFloat(ExtendUpto) + ExtraAmt;
                        if (TdsRound != 0) {
                            TdsAmt = ((TdsRate * TotalPrincipalAmt) / 100);
                            TdsAmt = parseFloat(TdsAmt).toFixed(TdsRound);
                        }
                        else {
                            TdsAmt = Math.round((TdsRate * TotalPrincipalAmt) / 100);
                            TdsAmt = parseFloat(TdsAmt).toFixed(2);
                        }
                        $("#BillTDS").val(TdsAmt);
                    }
                }
                else
                {
                    if (CurrAmt > PreviousAmt)
                    {
                        var IncreaseAmt = CurrAmt - PreviousAmt;
                        $("#addAmt").val(parseFloat(CurrAmt).toFixed(2));
                        BillBal = parseFloat(BillBal) - parseFloat(IncreaseAmt);
                        $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                        if (CalculateTds) {
                            var TotalPrincipalAmt = parseFloat(CurrAmt) + ExtraAmt;
                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(TdsRound);
                            }
                            else {
                                TdsAmt = Math.round((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(2);
                            }
                            $("#BillTDS").val(TdsAmt);
                        }


                    }
                    else
                    {
                        var DecreaseAmt = PreviousAmt - CurrAmt;
                        $("#addAmt").val(parseFloat(CurrAmt).toFixed(2));
                        BillBal = parseFloat(BillBal) + parseFloat(DecreaseAmt);
                        $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                        if (CalculateTds) {
                            var TotalPrincipalAmt = parseFloat(CurrAmt) + ExtraAmt;
                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(TdsRound);
                            }
                            else {
                                TdsAmt = Math.round((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(2);
                            }
                            $("#BillTDS").val(TdsAmt);
                        }
                    }
                }
            }
            
            var ExtraAmt = 0;
            $('#addChargestbl tbody tr').each(function () {
                var tds2 = $(this).find('td');
                if (tds2.eq(1).text() == "+") {
                    ExtraAmt += parseFloat(tds2.find("input[class='txtfvalue']").val());
                }
            });

            var TotalAmt = parseFloat(ExtraAmt)+ parseFloat($("#addAmt").val());

            $("#addNetAmt").val(parseFloat(TotalAmt).toFixed(2));

            
        });

        $("#BillTDS1").blur(function () {
            debugger;
            var CurrAmt = parseFloat($("#BillTDS").val());
            var PreviousAmt = parseFloat($("#PrevsValue").val());
            var BillBal = parseFloat($("#CurrBalAmt").val());

            var ExtendUpto = BillBal + PreviousAmt;

            if (CurrAmt != PreviousAmt)
            {
                if (CurrAmt >= ExtendUpto) {
                    $("#BillTDS").val(parseFloat(ExtendUpto).toFixed(2));
                    $("#CurrBalAmt").val("0.00");
                }
                else
                {
                    if (CurrAmt > PreviousAmt)
                    {
                        var IncreaseAmt = CurrAmt - PreviousAmt;
                        $("#BillTDS").val(parseFloat(CurrAmt).toFixed(2));
                        BillBal = parseFloat(BillBal) - parseFloat(IncreaseAmt);
                        $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                    }
                    else
                    {
                        var DecreaseAmt = PreviousAmt - CurrAmt;
                        $("#BillTDS").val(parseFloat(CurrAmt).toFixed(2));
                        BillBal = parseFloat(BillBal) + parseFloat(DecreaseAmt);
                        $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                    }
                }
            }
            
            

        });


        $(".txtfvalue").blur(function () {
            debugger;
            var CurrentRow = $(this).closest("tr");
            var CurrAmt = parseFloat(this.value);
            var tds = CurrentRow.find('td');
            var GetAlt = tds.eq(1).text();

            var BillBal = parseFloat($("#CurrBalAmt").val());
            var PreviousAmt = parseFloat($("#PrevsValue").val());
            var ExtendUpto = BillBal + PreviousAmt;

            var TdsFlag = $('#addTDSFlag').is(":checked");
            var TdsRate = (parseFloat($("#addTDSRate").val()));
            var TdsBillFlag = $("#hdnTDSBillWiseCut").val();
            var TdsRound = parseInt($("#hdnRoundOff").val());
            var TdsAmt = 0;
            var CalculateTds = false;
            if (TdsFlag == true && TdsBillFlag == "True") {
                CalculateTds = true;
            }

            var ExtraAmt = 0, ClaimAmt = 0;
            $('#addChargestbl tbody tr').each(function () {
                var tds2 = $(this).find('td');
                if (tds2.eq(1).text() == "+") {
                    ExtraAmt += parseFloat(tds2.find("input[class='txtfvalue']").val());
                }
                if (tds2.eq(1).text() == "-") {
                    ClaimAmt += parseFloat(tds2.find("input[class='txtfvalue']").val());
                }
            });

            if (CurrAmt != PreviousAmt)
            {
                if (GetAlt == "+")
                {
                    if (CurrAmt > PreviousAmt)
                    {
                        var IncreaseAmt = CurrAmt - PreviousAmt;
                        tds.find("input[class='txtfvalue']").val(parseFloat(CurrAmt).toFixed(2));
                        var TotalAmt = parseFloat(IncreaseAmt) + parseFloat($("#addNetAmt").val());
                        $("#addNetAmt").val(parseFloat(TotalAmt).toFixed(2));
                        if (CalculateTds) {
                            var TotalPrincipalAmt = parseFloat($("#addAmt").val()) + ExtraAmt;// parseFloat($(this).closest('tr').find("td:eq(22) input").val()) + parseFloat($(this).closest('tr').find("td:eq(23) input").val()) + parseFloat($(this).closest('tr').find("td:eq(24) input").val());
                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(TdsRound);
                            }
                            else {
                                TdsAmt = Math.round((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(2);
                            }
                            $("#BillTDS").val(TdsAmt);
                        }
                    }
                    else
                    {
                        var DecreaseAmt = PreviousAmt - CurrAmt;
                        tds.find("input[class='txtfvalue']").val(parseFloat(CurrAmt).toFixed(2));
                        var TotalAmt = parseFloat($("#addNetAmt").val()) - parseFloat(DecreaseAmt) ;
                        $("#addNetAmt").val(parseFloat(TotalAmt).toFixed(2));
                        if (CalculateTds) {
                            var TotalPrincipalAmt = parseFloat($("#addAmt").val()) + ExtraAmt;// parseFloat($(this).closest('tr').find("td:eq(22) input").val()) + parseFloat($(this).closest('tr').find("td:eq(23) input").val()) + parseFloat($(this).closest('tr').find("td:eq(24) input").val());
                            if (TdsRound != 0) {
                                TdsAmt = ((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(TdsRound);
                            }
                            else {
                                TdsAmt = Math.round((TdsRate * TotalPrincipalAmt) / 100);
                                TdsAmt = parseFloat(TdsAmt).toFixed(2);
                            }
                            $("#BillTDS").val(TdsAmt);
                        }
                    }
                }
                else if (GetAlt == "-")
                {
                    if (CurrAmt >= ExtendUpto) {
                        tds.find("input[class='txtfvalue']").val(parseFloat(ExtendUpto).toFixed(2));
                        $("#CurrBalAmt").val("0.00");
                    }
                    else {
                        if (CurrAmt > PreviousAmt) {
                            var IncreaseAmt = CurrAmt - PreviousAmt;
                            tds.find("input[class='txtfvalue']").val(parseFloat(CurrAmt).toFixed(2));
                            BillBal = parseFloat(BillBal) - parseFloat(IncreaseAmt);
                            $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                        }
                        else {
                            var DecreaseAmt = PreviousAmt - CurrAmt;
                            tds.find("input[class='txtfvalue']").val(parseFloat(CurrAmt).toFixed(2));
                            BillBal = parseFloat(BillBal) + parseFloat(DecreaseAmt);
                            $("#CurrBalAmt").val(parseFloat(BillBal).toFixed(2));
                        }
                    }


                }
            }
        });


        //$("#addChargestbwwwl tbody").on('focusout', '.txtfvalue', function () {
        //    debugger;
        //    var Amount = 0;
        //    var NetAmount = 0;
        //    $('#addChargestbl tbody tr').each(function () {
        //        debugger;
        //        var tds = $(this).find('td');
        //        var TotalAmtAdjUpto = parseInt($("#addAdvPending").val()) + parseInt($("#addAmt").val());

        //        if (tds.eq(1).text() != "+")
        //        {
        //            if (tds.eq(4).text() == "F001")
        //            {
        //                var Amt = parseInt(tds.find("input[class='txtfvalue']").val());
        //                if (!(TotalAmtAdjUpto >= Amt)) {
        //                    alert("Your Amount Not Greater Than " + TotalAmtAdjUpto);
        //                    Amount += parseInt(TotalAmtAdjUpto);
        //                    NetAmount += parseInt(TotalAmtAdjUpto);
        //                    tds.find("input[class='txtfvalue']").val(TotalAmtAdjUpto);
        //                }
        //                else {
        //                    Amount += parseInt(tds.find("input[class='txtfvalue']").val());
        //                    NetAmount += parseInt(tds.find("input[class='txtfvalue']").val());
        //                }
        //            }
        //            else
        //            {
        //                NetAmount += parseInt(tds.find("input[class='txtfvalue']").val());
        //            }
        //        }
        //        else
        //        {
        //            NetAmount -= parseInt(tds.find("input[class='txtfvalue']").val());
        //        }
        //    });

        //    $("#addAmt").val(parseFloat(Amount).toFixed(2));
        //    $("#addNetAmt").val(parseFloat(NetAmount).toFixed(2));


        //});

          $("#pushrecord").click(function (event) {
            event.preventDefault();
              var mChargeList = [];

              $('#addChargestbl tbody tr').each(function () {
                  var tds = $(this).find('td');
                  var chgs = {
                      Header: tds.eq(0).text(),
                      AddLess: tds.eq(1).text(),
                      Amt: tds.find("input[class='txtfvalue']").val(),
                      PostCode: tds.eq(3).text(),
                      Fld: tds.eq(4).text()
                  }
                  mChargeList.push(chgs);
              });
            var ModelData = {};
            ModelData["Code"] = $('#addFMNo').val();
            ModelData["AdvType"] = $('#addAdvType').val();
            ModelData["ChargesList"] = mChargeList;
            ModelData["Remark"] = $('#addRemark').val();
            ModelData["RefTableKey"] = $('#hdnpopupRefTableKey').val();
              ModelData["AccAmt"] = $("#UpAccAmt").val();
            var DTO = { Model: ModelData };
            var url = '@Url.Action("PushPickupChargeList")';
            $.ajax({
                type: "POST",
                dataType: "json",
                data: JSON.stringify(DTO),
                cache: false,
                url: url,
                contentType: "application/json;charset=utf-8",
                beforeSend: function () {
                    $('.spinner').show();
               },
                success: function (data) {
                    $('#ErrorMessage').hide();
                    $('#addcashbank').modal('hide');
                    var abcCount = parseInt($('#hdnuCount').val());
                    var narrCount =parseInt(17) + parseInt($('#hdnuCount').val());
                    var mARRAY = Array.from(data.ChargesListSelect);

                    $('#tabledatapick tr:not(:first)').each(function () {
                        var tds = $(this).find('td');
                        if (tds.find("input[class='rolemaster_AccessType']").is(':checked')) {
                            if (tds.eq(12).text() == data.RefTableKey) {
                                if (parseFloat(tds.eq(10).text()) < parseFloat($('#addAmt').val())) {
                                    $('#addcashbank').modal('show');
                                    alert('Entered Amount greater than Pending Amount Cant Save..')
                                    return;
                                }
                                else {
                                    tds.eq(11).html($('#addAmt').val())
                                }
                                for (i = 0; i < abcCount; i++) {
                                    var ai = 17;
                                    ai = ai + i;
                                    tds.eq(ai).find('input[class="enttxtcls"]').val(mARRAY[i]);
                                }
                                tds.find('input[class="remrkcls"]').val(data.Remark);



                            }
                        }
                    })

                    $('.spinner').hide();
                },
                error: function () {
                    $('.spinner').hide();
                    alert("error occured while processing your request.");
                }
            });
        });
    });

    function loadFMNoList() {
        var url = '@Url.Action("GetFMList")?AccountCode=' + $('#Account').val();
        $.ajax({
            type: "POST",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#addFMNo").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                @*$('#addFMNo').val('@Model.FMNo').attr("selected", "selected");*@
                $('.spinner').hide();
            },

            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };

    function loadBranchList() {
        var url = '@Url.Action("GetBranchList")'
        $.ajax({
            type: "GET",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#addBranch").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('#addBranch').val('@Model.Branch').attr("selected", "selected");
                $('.spinner').hide();
            },

            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };

    function loadAdvanceTypeList() {
        var url = '@Url.Action("GetAdvanceTypeList")'
        $.ajax({
            type: "GET",
            dataType: "json",
            cache: false,
            url: url,
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                $('.spinner').show();
            },
            success: function (result) {
                $.each(result, function (i, item) {
                    $("#addAdvType").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                });
                $('#addAdvType').val('@Model.AdvType').attr("selected", "selected");
                $('.spinner').hide();
            },

            error: function () {
                $('.spinner').hide();
                alert("An error occurred while processing the request.");
            }
        });
    };



</script>

@Html.HiddenFor(x => x.RefTableKey, new { @id = "hdnpopupRefTableKey", @name = "hdnpopupRefTableKey" })
<input type="hidden" id="PrevsValue" />