//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntitiModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ALT_ERP21Entities : DbContext
    {
        public ALT_ERP21Entities()
            : base("name=ALT_ERP21Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accessory> Accessory { get; set; }
        public virtual DbSet<Accidents> Accidents { get; set; }
        public virtual DbSet<ActiveObjects> ActiveObjects { get; set; }
        public virtual DbSet<ActiveSideBarObjects> ActiveSideBarObjects { get; set; }
        public virtual DbSet<Activities> Activities { get; set; }
        public virtual DbSet<ActivityGroup> ActivityGroup { get; set; }
        public virtual DbSet<ActivityProposed> ActivityProposed { get; set; }
        public virtual DbSet<ActivityStatus> ActivityStatus { get; set; }
        public virtual DbSet<ActivityType> ActivityType { get; set; }
        public virtual DbSet<AddonDocCB> AddonDocCB { get; set; }
        public virtual DbSet<AddonDocIV> AddonDocIV { get; set; }
        public virtual DbSet<AddonDocJB> AddonDocJB { get; set; }
        public virtual DbSet<AddonDocMFG> AddonDocMFG { get; set; }
        public virtual DbSet<AddonDocOthers> AddonDocOthers { get; set; }
        public virtual DbSet<AddonDocPR> AddonDocPR { get; set; }
        public virtual DbSet<AddonDocSL> AddonDocSL { get; set; }
        public virtual DbSet<AddonItemIV> AddonItemIV { get; set; }
        public virtual DbSet<AddonItemMas> AddonItemMas { get; set; }
        public virtual DbSet<AddonItemMFG> AddonItemMFG { get; set; }
        public virtual DbSet<AddonItemPR> AddonItemPR { get; set; }
        public virtual DbSet<AddonItemSL> AddonItemSL { get; set; }
        public virtual DbSet<AddonMas> AddonMas { get; set; }
        public virtual DbSet<AddonPartyItem> AddonPartyItem { get; set; }
        public virtual DbSet<AddOns> AddOns { get; set; }
        public virtual DbSet<AddonValues> AddonValues { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<AdvBalSetup> AdvBalSetup { get; set; }
        public virtual DbSet<Advertisement> Advertisement { get; set; }
        public virtual DbSet<AgentMaster> AgentMaster { get; set; }
        public virtual DbSet<AlertNoteMaster> AlertNoteMaster { get; set; }
        public virtual DbSet<AllMasters> AllMasters { get; set; }
        public virtual DbSet<AllowMaster> AllowMaster { get; set; }
        public virtual DbSet<ARAPVoucher> ARAPVoucher { get; set; }
        public virtual DbSet<AreaMaster> AreaMaster { get; set; }
        public virtual DbSet<AssetCategory> AssetCategory { get; set; }
        public virtual DbSet<AssetPolicy> AssetPolicy { get; set; }
        public virtual DbSet<AssetQuantity> AssetQuantity { get; set; }
        public virtual DbSet<Assets> Assets { get; set; }
        public virtual DbSet<AssetTracking> AssetTracking { get; set; }
        public virtual DbSet<AssetType> AssetType { get; set; }
        public virtual DbSet<AssetUsage> AssetUsage { get; set; }
        public virtual DbSet<AssetVerified> AssetVerified { get; set; }
        public virtual DbSet<AssignCall> AssignCall { get; set; }
        public virtual DbSet<Attachment> Attachment { get; set; }
        public virtual DbSet<AttachmentSetup> AttachmentSetup { get; set; }
        public virtual DbSet<Attendance> Attendance { get; set; }
        public virtual DbSet<AttendanceOnly> AttendanceOnly { get; set; }
        public virtual DbSet<AuditTrail> AuditTrail { get; set; }
        public virtual DbSet<Authorisation> Authorisation { get; set; }
        public virtual DbSet<BankMaster> BankMaster { get; set; }
        public virtual DbSet<BankReco> BankReco { get; set; }
        public virtual DbSet<BarCodePrint> BarCodePrint { get; set; }
        public virtual DbSet<BarcodeStruct> BarcodeStruct { get; set; }
        public virtual DbSet<BatchOpen> BatchOpen { get; set; }
        public virtual DbSet<BillSubmission> BillSubmission { get; set; }
        public virtual DbSet<BillSubmissionSetup> BillSubmissionSetup { get; set; }
        public virtual DbSet<BillSubRef> BillSubRef { get; set; }
        public virtual DbSet<BranchChild> BranchChild { get; set; }
        public virtual DbSet<BranchStockReportSetup> BranchStockReportSetup { get; set; }
        public virtual DbSet<BranchUNBillLorryReceiptSetup> BranchUNBillLorryReceiptSetup { get; set; }
        public virtual DbSet<BroadCastMaster> BroadCastMaster { get; set; }
        public virtual DbSet<Broker> Broker { get; set; }
        public virtual DbSet<Budgets> Budgets { get; set; }
        public virtual DbSet<CAddonMas> CAddonMas { get; set; }
        public virtual DbSet<Caddress> Caddress { get; set; }
        public virtual DbSet<Campaigns> Campaigns { get; set; }
        public virtual DbSet<CampaignTypes> CampaignTypes { get; set; }
        public virtual DbSet<CashSaleSetup> CashSaleSetup { get; set; }
        public virtual DbSet<Charges> Charges { get; set; }
        public virtual DbSet<ChargeTypeMaster> ChargeTypeMaster { get; set; }
        public virtual DbSet<Cheques> Cheques { get; set; }
        public virtual DbSet<CHoldTransactions> CHoldTransactions { get; set; }
        public virtual DbSet<ClosingStock> ClosingStock { get; set; }
        public virtual DbSet<CMasterInfo> CMasterInfo { get; set; }
        public virtual DbSet<CommissionTypes> CommissionTypes { get; set; }
        public virtual DbSet<Communication> Communication { get; set; }
        public virtual DbSet<CommunicationDetail> CommunicationDetail { get; set; }
        public virtual DbSet<CommunicationMas> CommunicationMas { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyAccTypes> CompanyAccTypes { get; set; }
        public virtual DbSet<CompanyBussTypes> CompanyBussTypes { get; set; }
        public virtual DbSet<CompanyMajor> CompanyMajor { get; set; }
        public virtual DbSet<ConDetail> ConDetail { get; set; }
        public virtual DbSet<ConMaster> ConMaster { get; set; }
        public virtual DbSet<ConMasterRel> ConMasterRel { get; set; }
        public virtual DbSet<Consigner> Consigner { get; set; }
        public virtual DbSet<ConsignerAddress> ConsignerAddress { get; set; }
        public virtual DbSet<ConsignmentRegisterSetup> ConsignmentRegisterSetup { get; set; }
        public virtual DbSet<ConsignorRule> ConsignorRule { get; set; }
        public virtual DbSet<ContactBook> ContactBook { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<ContactSources> ContactSources { get; set; }
        public virtual DbSet<Container> Container { get; set; }
        public virtual DbSet<CorrespondenceType> CorrespondenceType { get; set; }
        public virtual DbSet<CostCentre> CostCentre { get; set; }
        public virtual DbSet<CostLedger> CostLedger { get; set; }
        public virtual DbSet<CreditCard> CreditCard { get; set; }
        public virtual DbSet<CreditDebitNoteSetup> CreditDebitNoteSetup { get; set; }
        public virtual DbSet<CreditorPaymentSetup> CreditorPaymentSetup { get; set; }
        public virtual DbSet<CreditorRecVouDetail> CreditorRecVouDetail { get; set; }
        public virtual DbSet<CreditPurchaseSetup> CreditPurchaseSetup { get; set; }
        public virtual DbSet<CTaxDetails> CTaxDetails { get; set; }
        public virtual DbSet<CurrencyMaster> CurrencyMaster { get; set; }
        public virtual DbSet<CurrRate> CurrRate { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMaster { get; set; }
        public virtual DbSet<DailyAtten> DailyAtten { get; set; }
        public virtual DbSet<DailyLeave> DailyLeave { get; set; }
        public virtual DbSet<DailyOT> DailyOT { get; set; }
        public virtual DbSet<DailyTime> DailyTime { get; set; }
        public virtual DbSet<DebtorReceiptSetup> DebtorReceiptSetup { get; set; }
        public virtual DbSet<DebtorRecVouDetail> DebtorRecVouDetail { get; set; }
        public virtual DbSet<DefectCode> DefectCode { get; set; }
        public virtual DbSet<DelChallan> DelChallan { get; set; }
        public virtual DbSet<DeliveryMaster> DeliveryMaster { get; set; }
        public virtual DbSet<DeliverySetup> DeliverySetup { get; set; }
        public virtual DbSet<DelRelation> DelRelation { get; set; }
        public virtual DbSet<Dept> Dept { get; set; }
        public virtual DbSet<DescriptionMaster> DescriptionMaster { get; set; }
        public virtual DbSet<Designations> Designations { get; set; }
        public virtual DbSet<DiscountMaster> DiscountMaster { get; set; }
        public virtual DbSet<Divisions> Divisions { get; set; }
        public virtual DbSet<DocFormats> DocFormats { get; set; }
        public virtual DbSet<DocTypes> DocTypes { get; set; }
        public virtual DbSet<DriverMaster> DriverMaster { get; set; }
        public virtual DbSet<EmailLog> EmailLog { get; set; }
        public virtual DbSet<EmpAdvance> EmpAdvance { get; set; }
        public virtual DbSet<EmpAllowDeduct> EmpAllowDeduct { get; set; }
        public virtual DbSet<EmpCategory> EmpCategory { get; set; }
        public virtual DbSet<EmpGradeRates> EmpGradeRates { get; set; }
        public virtual DbSet<EmpHoursSetup> EmpHoursSetup { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeeHistory> EmployeeHistory { get; set; }
        public virtual DbSet<EmployeeLeave> EmployeeLeave { get; set; }
        public virtual DbSet<EmployeeWork> EmployeeWork { get; set; }
        public virtual DbSet<EmpPostData> EmpPostData { get; set; }
        public virtual DbSet<EmpTraveldet> EmpTraveldet { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<EWBLog> EWBLog { get; set; }
        public virtual DbSet<ExpDet> ExpDet { get; set; }
        public virtual DbSet<Expenses> Expenses { get; set; }
        public virtual DbSet<ExpenseTypes> ExpenseTypes { get; set; }
        public virtual DbSet<ExtraItemStock> ExtraItemStock { get; set; }
        public virtual DbSet<FixedAsset> FixedAsset { get; set; }
        public virtual DbSet<FmCatchChargesInfo> FmCatchChargesInfo { get; set; }
        public virtual DbSet<FMMaster> FMMaster { get; set; }
        public virtual DbSet<FMMasterDraft> FMMasterDraft { get; set; }
        public virtual DbSet<FMROUTETable> FMROUTETable { get; set; }
        public virtual DbSet<FMSetup> FMSetup { get; set; }
        public virtual DbSet<FMVouRel> FMVouRel { get; set; }
        public virtual DbSet<FollowUp> FollowUp { get; set; }
        public virtual DbSet<FormatData> FormatData { get; set; }
        public virtual DbSet<Formats> Formats { get; set; }
        public virtual DbSet<Freight_Trip_Adv> Freight_Trip_Adv { get; set; }
        public virtual DbSet<Freight_Trip_AdvRef> Freight_Trip_AdvRef { get; set; }
        public virtual DbSet<FreightChargeMa> FreightChargeMa { get; set; }
        public virtual DbSet<FreightChargeMaRef> FreightChargeMaRef { get; set; }
        public virtual DbSet<FreightLocalChargesMa> FreightLocalChargesMa { get; set; }
        public virtual DbSet<FreightLocalChargesMaRef> FreightLocalChargesMaRef { get; set; }
        public virtual DbSet<Grade> Grade { get; set; }
        public virtual DbSet<GSTLog> GSTLog { get; set; }
        public virtual DbSet<Hazard> Hazard { get; set; }
        public virtual DbSet<HireFMSetup> HireFMSetup { get; set; }
        public virtual DbSet<HireVehicleMaster> HireVehicleMaster { get; set; }
        public virtual DbSet<HoldTransactions> HoldTransactions { get; set; }
        public virtual DbSet<HSNCategory> HSNCategory { get; set; }
        public virtual DbSet<HSNMaster> HSNMaster { get; set; }
        public virtual DbSet<HSNRates> HSNRates { get; set; }
        public virtual DbSet<ImageDepot> ImageDepot { get; set; }
        public virtual DbSet<IncoTerms> IncoTerms { get; set; }
        public virtual DbSet<Insurance> Insurance { get; set; }
        public virtual DbSet<IssueQC> IssueQC { get; set; }
        public virtual DbSet<ItemBarcode> ItemBarcode { get; set; }
        public virtual DbSet<ItemCategory> ItemCategory { get; set; }
        public virtual DbSet<ItemGroups> ItemGroups { get; set; }
        public virtual DbSet<ItemMaster> ItemMaster { get; set; }
        public virtual DbSet<ItemMore> ItemMore { get; set; }
        public virtual DbSet<ItemStock> ItemStock { get; set; }
        public virtual DbSet<ItemWarranty> ItemWarranty { get; set; }
        public virtual DbSet<KilometerMaster> KilometerMaster { get; set; }
        public virtual DbSet<KilometerMasterRef> KilometerMasterRef { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<LCDetail> LCDetail { get; set; }
        public virtual DbSet<LCMaster> LCMaster { get; set; }
        public virtual DbSet<LCSetup> LCSetup { get; set; }
        public virtual DbSet<LDSsetup> LDSsetup { get; set; }
        public virtual DbSet<LeaveApplication> LeaveApplication { get; set; }
        public virtual DbSet<Ledger> Ledger { get; set; }
        public virtual DbSet<LedgerPrintData> LedgerPrintData { get; set; }
        public virtual DbSet<LedgerSL> LedgerSL { get; set; }
        public virtual DbSet<LoadingConsignment> LoadingConsignment { get; set; }
        public virtual DbSet<Loan> Loan { get; set; }
        public virtual DbSet<LoanApplication> LoanApplication { get; set; }
        public virtual DbSet<LoanDet> LoanDet { get; set; }
        public virtual DbSet<LoanRecover> LoanRecover { get; set; }
        public virtual DbSet<LocalChargesMa> LocalChargesMa { get; set; }
        public virtual DbSet<LocalChargesMaRef> LocalChargesMaRef { get; set; }
        public virtual DbSet<LocalDeliveryRel> LocalDeliveryRel { get; set; }
        public virtual DbSet<LocalDeliverySheet> LocalDeliverySheet { get; set; }
        public virtual DbSet<LocalKMandTimeMa> LocalKMandTimeMa { get; set; }
        public virtual DbSet<LocalKMandTimeMaRef> LocalKMandTimeMaRef { get; set; }
        public virtual DbSet<LocalPickUpSheet> LocalPickUpSheet { get; set; }
        public virtual DbSet<LogisticsFlow> LogisticsFlow { get; set; }
        public virtual DbSet<LR_FM_Expenses> LR_FM_Expenses { get; set; }
        public virtual DbSet<LRBill> LRBill { get; set; }
        public virtual DbSet<LRBillSetup> LRBillSetup { get; set; }
        public virtual DbSet<LRMaster> LRMaster { get; set; }
        public virtual DbSet<LRMasterDraft> LRMasterDraft { get; set; }
        public virtual DbSet<LrRelatedExp> LrRelatedExp { get; set; }
        public virtual DbSet<LRSetup> LRSetup { get; set; }
        public virtual DbSet<LRStock> LRStock { get; set; }
        public virtual DbSet<LRTypeMaster> LRTypeMaster { get; set; }
        public virtual DbSet<LWFMaster> LWFMaster { get; set; }
        public virtual DbSet<MailingCategory> MailingCategory { get; set; }
        public virtual DbSet<MainTypes> MainTypes { get; set; }
        public virtual DbSet<Master> Master { get; set; }
        public virtual DbSet<MasterAlerts> MasterAlerts { get; set; }
        public virtual DbSet<MasterCrLimit> MasterCrLimit { get; set; }
        public virtual DbSet<MasterGroups> MasterGroups { get; set; }
        public virtual DbSet<MasterHead> MasterHead { get; set; }
        public virtual DbSet<MasterInfo> MasterInfo { get; set; }
        public virtual DbSet<MasterInfoDC> MasterInfoDC { get; set; }
        public virtual DbSet<MasterMessageRules> MasterMessageRules { get; set; }
        public virtual DbSet<MasterSubLedger> MasterSubLedger { get; set; }
        public virtual DbSet<MessageLog> MessageLog { get; set; }
        public virtual DbSet<MessageRules> MessageRules { get; set; }
        public virtual DbSet<Monthly> Monthly { get; set; }
        public virtual DbSet<MonthlyHourly> MonthlyHourly { get; set; }
        public virtual DbSet<MonthlyLeave> MonthlyLeave { get; set; }
        public virtual DbSet<MonthlyLoan> MonthlyLoan { get; set; }
        public virtual DbSet<MsgTempCategory> MsgTempCategory { get; set; }
        public virtual DbSet<MsgTemplate> MsgTemplate { get; set; }
        public virtual DbSet<MultiRates> MultiRates { get; set; }
        public virtual DbSet<Narration> Narration { get; set; }
        public virtual DbSet<OpeningLrMaster> OpeningLrMaster { get; set; }
        public virtual DbSet<OptionInfo> OptionInfo { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrdersStk> OrdersStk { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<OtherTransactSetup> OtherTransactSetup { get; set; }
        public virtual DbSet<OtherTransactSetupJV> OtherTransactSetupJV { get; set; }
        public virtual DbSet<Outstanding> Outstanding { get; set; }
        public virtual DbSet<PartyCategory> PartyCategory { get; set; }
        public virtual DbSet<PaymentTerms> PaymentTerms { get; set; }
        public virtual DbSet<PeriodLock> PeriodLock { get; set; }
        public virtual DbSet<PickOrder> PickOrder { get; set; }
        public virtual DbSet<PinCodeLoc> PinCodeLoc { get; set; }
        public virtual DbSet<PinCodeMap> PinCodeMap { get; set; }
        public virtual DbSet<PlacementAgency> PlacementAgency { get; set; }
        public virtual DbSet<PODMaster> PODMaster { get; set; }
        public virtual DbSet<PODRel> PODRel { get; set; }
        public virtual DbSet<PODSetup> PODSetup { get; set; }
        public virtual DbSet<Port> Port { get; set; }
        public virtual DbSet<PortContainer> PortContainer { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<PostBudget> PostBudget { get; set; }
        public virtual DbSet<PreCarriageBy> PreCarriageBy { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductCatLink> ProductCatLink { get; set; }
        public virtual DbSet<ProfitRatios> ProfitRatios { get; set; }
        public virtual DbSet<PTHeader> PTHeader { get; set; }
        public virtual DbSet<PTMaster> PTMaster { get; set; }
        public virtual DbSet<Purchase> Purchase { get; set; }
        public virtual DbSet<PurchaseGroup> PurchaseGroup { get; set; }
        public virtual DbSet<PurchaseMore> PurchaseMore { get; set; }
        public virtual DbSet<RateHistory> RateHistory { get; set; }
        public virtual DbSet<ReasonCategory> ReasonCategory { get; set; }
        public virtual DbSet<ReasonMaster> ReasonMaster { get; set; }
        public virtual DbSet<RelateData> RelateData { get; set; }
        public virtual DbSet<RelateDataItem> RelateDataItem { get; set; }
        public virtual DbSet<RelFm> RelFm { get; set; }
        public virtual DbSet<Religion> Religion { get; set; }
        public virtual DbSet<RelLr> RelLr { get; set; }
        public virtual DbSet<ReportGroups> ReportGroups { get; set; }
        public virtual DbSet<ReportHeader> ReportHeader { get; set; }
        public virtual DbSet<ReportParameters> ReportParameters { get; set; }
        public virtual DbSet<ReportQuery> ReportQuery { get; set; }
        public virtual DbSet<ReportScheduleDate> ReportScheduleDate { get; set; }
        public virtual DbSet<ReportTags> ReportTags { get; set; }
        public virtual DbSet<RequestOTP> RequestOTP { get; set; }
        public virtual DbSet<RequisitionTypes> RequisitionTypes { get; set; }
        public virtual DbSet<ResourceCategory> ResourceCategory { get; set; }
        public virtual DbSet<ResourceLedger> ResourceLedger { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<SalesMan> SalesMan { get; set; }
        public virtual DbSet<SalesmanCategory> SalesmanCategory { get; set; }
        public virtual DbSet<SalesMore> SalesMore { get; set; }
        public virtual DbSet<Segments> Segments { get; set; }
        public virtual DbSet<SendReceBill> SendReceBill { get; set; }
        public virtual DbSet<SendReceBillRef> SendReceBillRef { get; set; }
        public virtual DbSet<ServiceTypeMaster> ServiceTypeMaster { get; set; }
        public virtual DbSet<ShareSetup> ShareSetup { get; set; }
        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<ShipingComp> ShipingComp { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<SMSLog> SMSLog { get; set; }
        public virtual DbSet<SMSRules> SMSRules { get; set; }
        public virtual DbSet<SMSRulesDue> SMSRulesDue { get; set; }
        public virtual DbSet<SparePartsMaster> SparePartsMaster { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<StockAgeingDoc> StockAgeingDoc { get; set; }
        public virtual DbSet<StockBatch> StockBatch { get; set; }
        public virtual DbSet<StockBIN> StockBIN { get; set; }
        public virtual DbSet<StockHeader> StockHeader { get; set; }
        public virtual DbSet<StockMCPara> StockMCPara { get; set; }
        public virtual DbSet<StockMore> StockMore { get; set; }
        public virtual DbSet<StockOS> StockOS { get; set; }
        public virtual DbSet<StockQC> StockQC { get; set; }
        public virtual DbSet<StockReserve> StockReserve { get; set; }
        public virtual DbSet<StockRev> StockRev { get; set; }
        public virtual DbSet<StockSerial> StockSerial { get; set; }
        public virtual DbSet<StockTax> StockTax { get; set; }
        public virtual DbSet<StoreMinMax> StoreMinMax { get; set; }
        public virtual DbSet<Stores> Stores { get; set; }
        public virtual DbSet<SubLedger> SubLedger { get; set; }
        public virtual DbSet<SubTypes> SubTypes { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TaskMaster> TaskMaster { get; set; }
        public virtual DbSet<TaxDetails> TaxDetails { get; set; }
        public virtual DbSet<TaxMaster> TaxMaster { get; set; }
        public virtual DbSet<TblBranchAllocation> TblBranchAllocation { get; set; }
        public virtual DbSet<TblLrAllocation> TblLrAllocation { get; set; }
        public virtual DbSet<TDSMaster> TDSMaster { get; set; }
        public virtual DbSet<TDSPayments> TDSPayments { get; set; }
        public virtual DbSet<TDSRates> TDSRates { get; set; }
        public virtual DbSet<TDSSetup> TDSSetup { get; set; }
        public virtual DbSet<Teams> Teams { get; set; }
        public virtual DbSet<TermCondsTemplate> TermCondsTemplate { get; set; }
        public virtual DbSet<TermsConditions> TermsConditions { get; set; }
        public virtual DbSet<TermsDetails> TermsDetails { get; set; }
        public virtual DbSet<TermTemplateHeader> TermTemplateHeader { get; set; }
        public virtual DbSet<Territory> Territory { get; set; }
        public virtual DbSet<tfatAlertNoteSetup> tfatAlertNoteSetup { get; set; }
        public virtual DbSet<tfatAltNotification> tfatAltNotification { get; set; }
        public virtual DbSet<tfatAltTransaction> tfatAltTransaction { get; set; }
        public virtual DbSet<tfatAutoConsignmentMail> tfatAutoConsignmentMail { get; set; }
        public virtual DbSet<tfatAutoOSMail> tfatAutoOSMail { get; set; }
        public virtual DbSet<TfatBranch> TfatBranch { get; set; }
        public virtual DbSet<TfatBranchLocation> TfatBranchLocation { get; set; }
        public virtual DbSet<TfatCity> TfatCity { get; set; }
        public virtual DbSet<TfatComp> TfatComp { get; set; }
        public virtual DbSet<TfatCountry> TfatCountry { get; set; }
        public virtual DbSet<TfatCurrency> TfatCurrency { get; set; }
        public virtual DbSet<TfatDesignHeader> TfatDesignHeader { get; set; }
        public virtual DbSet<TfatDriverStatus> TfatDriverStatus { get; set; }
        public virtual DbSet<tfatEwaySetup> tfatEwaySetup { get; set; }
        public virtual DbSet<tfatEWB> tfatEWB { get; set; }
        public virtual DbSet<TfatMenu> TfatMenu { get; set; }
        public virtual DbSet<TfatNarr> TfatNarr { get; set; }
        public virtual DbSet<tfatNotification> tfatNotification { get; set; }
        public virtual DbSet<tfatNotificationSetup> tfatNotificationSetup { get; set; }
        public virtual DbSet<TfatOtherWareHouseUnload> TfatOtherWareHouseUnload { get; set; }
        public virtual DbSet<TfatPass> TfatPass { get; set; }
        public virtual DbSet<TfatPerd> TfatPerd { get; set; }
        public virtual DbSet<TfatSearch> TfatSearch { get; set; }
        public virtual DbSet<tfatSkipEwayBillDoc> tfatSkipEwayBillDoc { get; set; }
        public virtual DbSet<TfatState> TfatState { get; set; }
        public virtual DbSet<TfatSyncHistory> TfatSyncHistory { get; set; }
        public virtual DbSet<TfatTypes> TfatTypes { get; set; }
        public virtual DbSet<TfatUser> TfatUser { get; set; }
        public virtual DbSet<TfatUserAudit> TfatUserAudit { get; set; }
        public virtual DbSet<TfatUserAuditHeader> TfatUserAuditHeader { get; set; }
        public virtual DbSet<tfatUserFavourite> tfatUserFavourite { get; set; }
        public virtual DbSet<TfatUserTask> TfatUserTask { get; set; }
        public virtual DbSet<TfatVehicleStatus> TfatVehicleStatus { get; set; }
        public virtual DbSet<tfatVehicleStatusHistory> tfatVehicleStatusHistory { get; set; }
        public virtual DbSet<TfatVehicleTrackApiList> TfatVehicleTrackApiList { get; set; }
        public virtual DbSet<TfatVehicleTrackingSetup> TfatVehicleTrackingSetup { get; set; }
        public virtual DbSet<TripChargesMa> TripChargesMa { get; set; }
        public virtual DbSet<TripChargesMaRef> TripChargesMaRef { get; set; }
        public virtual DbSet<TripExpensesMaster> TripExpensesMaster { get; set; }
        public virtual DbSet<TripFmList> TripFmList { get; set; }
        public virtual DbSet<TripSheetMaster> TripSheetMaster { get; set; }
        public virtual DbSet<TripSheetSetup> TripSheetSetup { get; set; }
        public virtual DbSet<TruckInstallmentMa> TruckInstallmentMa { get; set; }
        public virtual DbSet<TypeAccountGroups> TypeAccountGroups { get; set; }
        public virtual DbSet<TypeItemGroups> TypeItemGroups { get; set; }
        public virtual DbSet<TypePartyCategory> TypePartyCategory { get; set; }
        public virtual DbSet<TyreMaster> TyreMaster { get; set; }
        public virtual DbSet<TyreStockSerial> TyreStockSerial { get; set; }
        public virtual DbSet<TyreStockTransfer> TyreStockTransfer { get; set; }
        public virtual DbSet<UnitConversion> UnitConversion { get; set; }
        public virtual DbSet<UnitMaster> UnitMaster { get; set; }
        public virtual DbSet<UnLoadDetails> UnLoadDetails { get; set; }
        public virtual DbSet<UnLoadSetup> UnLoadSetup { get; set; }
        public virtual DbSet<UseItemStockDetail> UseItemStockDetail { get; set; }
        public virtual DbSet<UserAllowedBranch> UserAllowedBranch { get; set; }
        public virtual DbSet<UserAllowedCategory> UserAllowedCategory { get; set; }
        public virtual DbSet<UserAllowedItemGroup> UserAllowedItemGroup { get; set; }
        public virtual DbSet<UserAllwedAreas> UserAllwedAreas { get; set; }
        public virtual DbSet<UserDashBoard> UserDashBoard { get; set; }
        public virtual DbSet<UserRights> UserRights { get; set; }
        public virtual DbSet<UserRightsTrx> UserRightsTrx { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleCategory> VehicleCategory { get; set; }
        public virtual DbSet<VehicleCategoryRates> VehicleCategoryRates { get; set; }
        public virtual DbSet<VehicleDri_Hist> VehicleDri_Hist { get; set; }
        public virtual DbSet<VehicleDriver_History> VehicleDriver_History { get; set; }
        public virtual DbSet<VehicleGrpStatusMas> VehicleGrpStatusMas { get; set; }
        public virtual DbSet<VehicleKmMaintainMa> VehicleKmMaintainMa { get; set; }
        public virtual DbSet<VehicleMaster> VehicleMaster { get; set; }
        public virtual DbSet<VehicleRates> VehicleRates { get; set; }
        public virtual DbSet<ViaAndLocalExpMas> ViaAndLocalExpMas { get; set; }
        public virtual DbSet<ViaAndLocalExpMasRef> ViaAndLocalExpMasRef { get; set; }
        public virtual DbSet<ViaChargesMa> ViaChargesMa { get; set; }
        public virtual DbSet<ViaChargesMaRef> ViaChargesMaRef { get; set; }
        public virtual DbSet<ViaFreightMa> ViaFreightMa { get; set; }
        public virtual DbSet<ViaFreightMaRef> ViaFreightMaRef { get; set; }
        public virtual DbSet<VoucherDetail> VoucherDetail { get; set; }
        public virtual DbSet<VoucherMaster> VoucherMaster { get; set; }
        public virtual DbSet<WalkinCustomer> WalkinCustomer { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
        public virtual DbSet<WithoutLRBillSetup> WithoutLRBillSetup { get; set; }
        public virtual DbSet<AccountBalance> AccountBalance { get; set; }
        public virtual DbSet<AddCharges> AddCharges { get; set; }
        public virtual DbSet<AddOnGrid> AddOnGrid { get; set; }
        public virtual DbSet<AssetBudget> AssetBudget { get; set; }
        public virtual DbSet<AssetDisposal> AssetDisposal { get; set; }
        public virtual DbSet<AssetEmp> AssetEmp { get; set; }
        public virtual DbSet<AssetToEmp> AssetToEmp { get; set; }
        public virtual DbSet<AssociatedBranch> AssociatedBranch { get; set; }
        public virtual DbSet<BankFD> BankFD { get; set; }
        public virtual DbSet<BankRecoMapping> BankRecoMapping { get; set; }
        public virtual DbSet<BankRules> BankRules { get; set; }
        public virtual DbSet<BudgetsRev> BudgetsRev { get; set; }
        public virtual DbSet<ChequeBooks> ChequeBooks { get; set; }
        public virtual DbSet<ColourScheme> ColourScheme { get; set; }
        public virtual DbSet<ControlPara> ControlPara { get; set; }
        public virtual DbSet<CostMaster> CostMaster { get; set; }
        public virtual DbSet<Demo> Demo { get; set; }
        public virtual DbSet<DepricRate> DepricRate { get; set; }
        public virtual DbSet<DlySchedule> DlySchedule { get; set; }
        public virtual DbSet<DocPrint> DocPrint { get; set; }
        public virtual DbSet<DrCrCharge> DrCrCharge { get; set; }
        public virtual DbSet<DriverDet> DriverDet { get; set; }
        public virtual DbSet<DriverMas> DriverMas { get; set; }
        public virtual DbSet<Dztmp_zBookLR> Dztmp_zBookLR { get; set; }
        public virtual DbSet<Dztmp_zOS> Dztmp_zOS { get; set; }
        public virtual DbSet<Dztmp_zStockLR> Dztmp_zStockLR { get; set; }
        public virtual DbSet<Dztmp_zStockLRTRN> Dztmp_zStockLRTRN { get; set; }
        public virtual DbSet<Dztmp_zUnBillLR> Dztmp_zUnBillLR { get; set; }
        public virtual DbSet<EmpAddress> EmpAddress { get; set; }
        public virtual DbSet<EmpFamily> EmpFamily { get; set; }
        public virtual DbSet<EmpTravel> EmpTravel { get; set; }
        public virtual DbSet<FindCode> FindCode { get; set; }
        public virtual DbSet<Holidays> Holidays { get; set; }
        public virtual DbSet<HourlyAtten> HourlyAtten { get; set; }
        public virtual DbSet<HoursDetails> HoursDetails { get; set; }
        public virtual DbSet<HoursFromMapping> HoursFromMapping { get; set; }
        public virtual DbSet<InBoxFolders> InBoxFolders { get; set; }
        public virtual DbSet<IndentStk> IndentStk { get; set; }
        public virtual DbSet<InternalAudit> InternalAudit { get; set; }
        public virtual DbSet<ItemDetail> ItemDetail { get; set; }
        public virtual DbSet<KMMas> KMMas { get; set; }
        public virtual DbSet<LastAccount> LastAccount { get; set; }
        public virtual DbSet<LastSerial> LastSerial { get; set; }
        public virtual DbSet<Leave> Leave { get; set; }
        public virtual DbSet<LedgerWithTripsheet> LedgerWithTripsheet { get; set; }
        public virtual DbSet<LorryReceiptExpenses> LorryReceiptExpenses { get; set; }
        public virtual DbSet<MailInfo> MailInfo { get; set; }
        public virtual DbSet<MessageCategory> MessageCategory { get; set; }
        public virtual DbSet<MyOwnReports> MyOwnReports { get; set; }
        public virtual DbSet<OctroiDet> OctroiDet { get; set; }
        public virtual DbSet<OctroiMas> OctroiMas { get; set; }
        public virtual DbSet<OrdersRev> OrdersRev { get; set; }
        public virtual DbSet<OrdersStkRev> OrdersStkRev { get; set; }
        public virtual DbSet<PartyChgs> PartyChgs { get; set; }
        public virtual DbSet<PartySegment> PartySegment { get; set; }
        public virtual DbSet<PayDztmp_zOS> PayDztmp_zOS { get; set; }
        public virtual DbSet<PFESIC> PFESIC { get; set; }
        public virtual DbSet<PInvoice> PInvoice { get; set; }
        public virtual DbSet<PInvoiceRev> PInvoiceRev { get; set; }
        public virtual DbSet<PInvoiceStk> PInvoiceStk { get; set; }
        public virtual DbSet<PInvoiceStkRev> PInvoiceStkRev { get; set; }
        public virtual DbSet<Place> Place { get; set; }
        public virtual DbSet<PostRequisition> PostRequisition { get; set; }
        public virtual DbSet<PrintFormats> PrintFormats { get; set; }
        public virtual DbSet<PrintInfo> PrintInfo { get; set; }
        public virtual DbSet<RelateDataTrip> RelateDataTrip { get; set; }
        public virtual DbSet<RelateTruck> RelateTruck { get; set; }
        public virtual DbSet<RelTripAddLess> RelTripAddLess { get; set; }
        public virtual DbSet<ReportMailSchedule> ReportMailSchedule { get; set; }
        public virtual DbSet<ReportSchedule> ReportSchedule { get; set; }
        public virtual DbSet<ReqLangProf> ReqLangProf { get; set; }
        public virtual DbSet<s> s { get; set; }
        public virtual DbSet<SalesTaxDetails> SalesTaxDetails { get; set; }
        public virtual DbSet<SeasonMaster> SeasonMaster { get; set; }
        public virtual DbSet<ServiceTaxMaster> ServiceTaxMaster { get; set; }
        public virtual DbSet<ServiceTaxRates> ServiceTaxRates { get; set; }
        public virtual DbSet<suresh> suresh { get; set; }
        public virtual DbSet<SureshV> SureshV { get; set; }
        public virtual DbSet<TaxForms> TaxForms { get; set; }
        public virtual DbSet<TDSBank> TDSBank { get; set; }
        public virtual DbSet<TDSChallan> TDSChallan { get; set; }
        public virtual DbSet<TDSForm16> TDSForm16 { get; set; }
        public virtual DbSet<TDSReg> TDSReg { get; set; }
        public virtual DbSet<TDSTax> TDSTax { get; set; }
        public virtual DbSet<TDSTaxIT> TDSTaxIT { get; set; }
        public virtual DbSet<TDSTaxSD> TDSTaxSD { get; set; }
        public virtual DbSet<TDSTrans> TDSTrans { get; set; }
        public virtual DbSet<Temp_TblBranchAllocation> Temp_TblBranchAllocation { get; set; }
        public virtual DbSet<temp_TblLrAllocation> temp_TblLrAllocation { get; set; }
        public virtual DbSet<tempAllGodownMultiStock> tempAllGodownMultiStock { get; set; }
        public virtual DbSet<tempDelivery> tempDelivery { get; set; }
        public virtual DbSet<tempDelivery1> tempDelivery1 { get; set; }
        public virtual DbSet<tempDelivery2> tempDelivery2 { get; set; }
        public virtual DbSet<tempEmergencyMail> tempEmergencyMail { get; set; }
        public virtual DbSet<TempExtEwayBillList> TempExtEwayBillList { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<TempLRPODTable> TempLRPODTable { get; set; }
        public virtual DbSet<tempPODReceivedLR> tempPODReceivedLR { get; set; }
        public virtual DbSet<TempTrip> TempTrip { get; set; }
        public virtual DbSet<TfatCustomerReg> TfatCustomerReg { get; set; }
        public virtual DbSet<TfatForm> TfatForm { get; set; }
        public virtual DbSet<TfatFormats> TfatFormats { get; set; }
        public virtual DbSet<TfatFrmFields> TfatFrmFields { get; set; }
        public virtual DbSet<TfatPeriods> TfatPeriods { get; set; }
        public virtual DbSet<TfatUserBranch> TfatUserBranch { get; set; }
        public virtual DbSet<TfatUserLevel> TfatUserLevel { get; set; }
        public virtual DbSet<TfatUserOpt> TfatUserOpt { get; set; }
        public virtual DbSet<TfatUserRoles> TfatUserRoles { get; set; }
        public virtual DbSet<Top10Customer> Top10Customer { get; set; }
        public virtual DbSet<TripDetail> TripDetail { get; set; }
        public virtual DbSet<TripMas> TripMas { get; set; }
        public virtual DbSet<TURDetail> TURDetail { get; set; }
        public virtual DbSet<UnadjustLedgerDriver> UnadjustLedgerDriver { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UnitRates> UnitRates { get; set; }
        public virtual DbSet<UserOTPLogin> UserOTPLogin { get; set; }
        public virtual DbSet<Verified> Verified { get; set; }
        public virtual DbSet<Ztemp_PODReceivedFromBranch> Ztemp_PODReceivedFromBranch { get; set; }
        public virtual DbSet<Ztemp_PODReceivedSendBranch> Ztemp_PODReceivedSendBranch { get; set; }
        public virtual DbSet<ztmp_AccountOpening> ztmp_AccountOpening { get; set; }
        public virtual DbSet<ztmp_AuditReportsReport> ztmp_AuditReportsReport { get; set; }
        public virtual DbSet<ztmp_AutoMailData> ztmp_AutoMailData { get; set; }
        public virtual DbSet<ztmp_BillReport> ztmp_BillReport { get; set; }
        public virtual DbSet<ztmp_BillReportWithLR> ztmp_BillReportWithLR { get; set; }
        public virtual DbSet<ztmp_CashMemoReport> ztmp_CashMemoReport { get; set; }
        public virtual DbSet<ztmp_ConsignmentReport> ztmp_ConsignmentReport { get; set; }
        public virtual DbSet<ztmp_DriverLedgerBalDetails> ztmp_DriverLedgerBalDetails { get; set; }
        public virtual DbSet<Ztmp_DriverTripBalance> Ztmp_DriverTripBalance { get; set; }
        public virtual DbSet<Ztmp_EwayBillDetails1> Ztmp_EwayBillDetails1 { get; set; }
        public virtual DbSet<Ztmp_EwayBillDetails2> Ztmp_EwayBillDetails2 { get; set; }
        public virtual DbSet<Ztmp_EwayBillDetails3> Ztmp_EwayBillDetails3 { get; set; }
        public virtual DbSet<ztmp_EWBLogReports> ztmp_EWBLogReports { get; set; }
        public virtual DbSet<ztmp_FreightMemoReports> ztmp_FreightMemoReports { get; set; }
        public virtual DbSet<ztmp_LoadingDetails> ztmp_LoadingDetails { get; set; }
        public virtual DbSet<ztmp_LorryChallanReports> ztmp_LorryChallanReports { get; set; }
        public virtual DbSet<ztmp_MailReports> ztmp_MailReports { get; set; }
        public virtual DbSet<ztmp_PickOrderReportDetails> ztmp_PickOrderReportDetails { get; set; }
        public virtual DbSet<ztmp_temp> ztmp_temp { get; set; }
        public virtual DbSet<ztmp_TempLCMErgeTbl> ztmp_TempLCMErgeTbl { get; set; }
        public virtual DbSet<ztmp_TempLCMErgeTbl1> ztmp_TempLCMErgeTbl1 { get; set; }
        public virtual DbSet<ztmp_Tempx> ztmp_Tempx { get; set; }
        public virtual DbSet<ztmp_TfatDriverHistory> ztmp_TfatDriverHistory { get; set; }
        public virtual DbSet<ztmp_tfatEWB> ztmp_tfatEWB { get; set; }
        public virtual DbSet<ztmp_tfatEWB1> ztmp_tfatEWB1 { get; set; }
        public virtual DbSet<ztmp_TfatVehicleHistory> ztmp_TfatVehicleHistory { get; set; }
        public virtual DbSet<ztmp_TripsheetReport> ztmp_TripsheetReport { get; set; }
        public virtual DbSet<ztmp_TruckExpensesDueReports> ztmp_TruckExpensesDueReports { get; set; }
        public virtual DbSet<ztmp_TruckExpensesDueReports1> ztmp_TruckExpensesDueReports1 { get; set; }
        public virtual DbSet<ztmp_TyreStockReport> ztmp_TyreStockReport { get; set; }
        public virtual DbSet<ztmp_TyreStockReportHistory> ztmp_TyreStockReportHistory { get; set; }
        public virtual DbSet<ztmp_UNLoadingDetails> ztmp_UNLoadingDetails { get; set; }
        public virtual DbSet<ztmp_VehicleDetails> ztmp_VehicleDetails { get; set; }
        public virtual DbSet<ztmp_VehicleDetails1> ztmp_VehicleDetails1 { get; set; }
        public virtual DbSet<Ztmp_VehicleExpDue1> Ztmp_VehicleExpDue1 { get; set; }
        public virtual DbSet<Ztmp_VehicleExpDue2> Ztmp_VehicleExpDue2 { get; set; }
        public virtual DbSet<ztmp_VehicleLedgerBalDetails> ztmp_VehicleLedgerBalDetails { get; set; }
        public virtual DbSet<ztmp_VehicleTripsheetReport> ztmp_VehicleTripsheetReport { get; set; }
        public virtual DbSet<ztmp_xTable> ztmp_xTable { get; set; }
        public virtual DbSet<ztmp_zOS> ztmp_zOS { get; set; }
        public virtual DbSet<ztmpAccountsBalancesS> ztmpAccountsBalancesS { get; set; }
        public virtual DbSet<ztmpMonthlyBillReport_zOS> ztmpMonthlyBillReport_zOS { get; set; }
        public virtual DbSet<ztmpmothlyLR_zOS> ztmpmothlyLR_zOS { get; set; }
        public virtual DbSet<ztmpmothlyUnbillLR_zOSAge> ztmpmothlyUnbillLR_zOSAge { get; set; }
        public virtual DbSet<ztmpmothlyUnbillLRStock_zOS1> ztmpmothlyUnbillLRStock_zOS1 { get; set; }
    
        public virtual int ExecuteReport(string mFormatCode, string mAlias, Nullable<byte> mCurrDec, string mBranch, string mUserID, string mReportStartDate, string mReportEndDate, Nullable<bool> mIsRunBalance, Nullable<double> mRunBalance, string mInsertIntoTable, string mOrderBy, Nullable<int> mStartIndex, Nullable<int> mEndIndex, string mPara, string mFilter, string mDocString, ObjectParameter mSumString, ObjectParameter mReturnQuery)
        {
            var mFormatCodeParameter = mFormatCode != null ?
                new ObjectParameter("mFormatCode", mFormatCode) :
                new ObjectParameter("mFormatCode", typeof(string));
    
            var mAliasParameter = mAlias != null ?
                new ObjectParameter("mAlias", mAlias) :
                new ObjectParameter("mAlias", typeof(string));
    
            var mCurrDecParameter = mCurrDec.HasValue ?
                new ObjectParameter("mCurrDec", mCurrDec) :
                new ObjectParameter("mCurrDec", typeof(byte));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mUserIDParameter = mUserID != null ?
                new ObjectParameter("mUserID", mUserID) :
                new ObjectParameter("mUserID", typeof(string));
    
            var mReportStartDateParameter = mReportStartDate != null ?
                new ObjectParameter("mReportStartDate", mReportStartDate) :
                new ObjectParameter("mReportStartDate", typeof(string));
    
            var mReportEndDateParameter = mReportEndDate != null ?
                new ObjectParameter("mReportEndDate", mReportEndDate) :
                new ObjectParameter("mReportEndDate", typeof(string));
    
            var mIsRunBalanceParameter = mIsRunBalance.HasValue ?
                new ObjectParameter("mIsRunBalance", mIsRunBalance) :
                new ObjectParameter("mIsRunBalance", typeof(bool));
    
            var mRunBalanceParameter = mRunBalance.HasValue ?
                new ObjectParameter("mRunBalance", mRunBalance) :
                new ObjectParameter("mRunBalance", typeof(double));
    
            var mInsertIntoTableParameter = mInsertIntoTable != null ?
                new ObjectParameter("mInsertIntoTable", mInsertIntoTable) :
                new ObjectParameter("mInsertIntoTable", typeof(string));
    
            var mOrderByParameter = mOrderBy != null ?
                new ObjectParameter("mOrderBy", mOrderBy) :
                new ObjectParameter("mOrderBy", typeof(string));
    
            var mStartIndexParameter = mStartIndex.HasValue ?
                new ObjectParameter("mStartIndex", mStartIndex) :
                new ObjectParameter("mStartIndex", typeof(int));
    
            var mEndIndexParameter = mEndIndex.HasValue ?
                new ObjectParameter("mEndIndex", mEndIndex) :
                new ObjectParameter("mEndIndex", typeof(int));
    
            var mParaParameter = mPara != null ?
                new ObjectParameter("mPara", mPara) :
                new ObjectParameter("mPara", typeof(string));
    
            var mFilterParameter = mFilter != null ?
                new ObjectParameter("mFilter", mFilter) :
                new ObjectParameter("mFilter", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExecuteReport", mFormatCodeParameter, mAliasParameter, mCurrDecParameter, mBranchParameter, mUserIDParameter, mReportStartDateParameter, mReportEndDateParameter, mIsRunBalanceParameter, mRunBalanceParameter, mInsertIntoTableParameter, mOrderByParameter, mStartIndexParameter, mEndIndexParameter, mParaParameter, mFilterParameter, mDocStringParameter, mSumString, mReturnQuery);
        }
    
        public virtual int ExecuteReportQuery(string mFormatCode, string mAlias, Nullable<byte> mCurrDec, string mBranch, string mUserID, string mReportStartDate, string mReportEndDate, Nullable<bool> mIsRunBalance, Nullable<double> mRunBalance, string mInsertIntoTable, string mOrderBy, Nullable<int> mStartIndex, Nullable<int> mEndIndex, string mPara, string mFilter, string mSumString, string mDocString)
        {
            var mFormatCodeParameter = mFormatCode != null ?
                new ObjectParameter("mFormatCode", mFormatCode) :
                new ObjectParameter("mFormatCode", typeof(string));
    
            var mAliasParameter = mAlias != null ?
                new ObjectParameter("mAlias", mAlias) :
                new ObjectParameter("mAlias", typeof(string));
    
            var mCurrDecParameter = mCurrDec.HasValue ?
                new ObjectParameter("mCurrDec", mCurrDec) :
                new ObjectParameter("mCurrDec", typeof(byte));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mUserIDParameter = mUserID != null ?
                new ObjectParameter("mUserID", mUserID) :
                new ObjectParameter("mUserID", typeof(string));
    
            var mReportStartDateParameter = mReportStartDate != null ?
                new ObjectParameter("mReportStartDate", mReportStartDate) :
                new ObjectParameter("mReportStartDate", typeof(string));
    
            var mReportEndDateParameter = mReportEndDate != null ?
                new ObjectParameter("mReportEndDate", mReportEndDate) :
                new ObjectParameter("mReportEndDate", typeof(string));
    
            var mIsRunBalanceParameter = mIsRunBalance.HasValue ?
                new ObjectParameter("mIsRunBalance", mIsRunBalance) :
                new ObjectParameter("mIsRunBalance", typeof(bool));
    
            var mRunBalanceParameter = mRunBalance.HasValue ?
                new ObjectParameter("mRunBalance", mRunBalance) :
                new ObjectParameter("mRunBalance", typeof(double));
    
            var mInsertIntoTableParameter = mInsertIntoTable != null ?
                new ObjectParameter("mInsertIntoTable", mInsertIntoTable) :
                new ObjectParameter("mInsertIntoTable", typeof(string));
    
            var mOrderByParameter = mOrderBy != null ?
                new ObjectParameter("mOrderBy", mOrderBy) :
                new ObjectParameter("mOrderBy", typeof(string));
    
            var mStartIndexParameter = mStartIndex.HasValue ?
                new ObjectParameter("mStartIndex", mStartIndex) :
                new ObjectParameter("mStartIndex", typeof(int));
    
            var mEndIndexParameter = mEndIndex.HasValue ?
                new ObjectParameter("mEndIndex", mEndIndex) :
                new ObjectParameter("mEndIndex", typeof(int));
    
            var mParaParameter = mPara != null ?
                new ObjectParameter("mPara", mPara) :
                new ObjectParameter("mPara", typeof(string));
    
            var mFilterParameter = mFilter != null ?
                new ObjectParameter("mFilter", mFilter) :
                new ObjectParameter("mFilter", typeof(string));
    
            var mSumStringParameter = mSumString != null ?
                new ObjectParameter("mSumString", mSumString) :
                new ObjectParameter("mSumString", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExecuteReportQuery", mFormatCodeParameter, mAliasParameter, mCurrDecParameter, mBranchParameter, mUserIDParameter, mReportStartDateParameter, mReportEndDateParameter, mIsRunBalanceParameter, mRunBalanceParameter, mInsertIntoTableParameter, mOrderByParameter, mStartIndexParameter, mEndIndexParameter, mParaParameter, mFilterParameter, mSumStringParameter, mDocStringParameter);
        }
    
        public virtual ObjectResult<GetItemDetail_Result> GetItemDetail(string branch, string grp)
        {
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var grpParameter = grp != null ?
                new ObjectParameter("Grp", grp) :
                new ObjectParameter("Grp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDetail_Result>("GetItemDetail", branchParameter, grpParameter);
        }
    
        public virtual int GetOutstandingData(string mBaseGr, string mBranch, Nullable<System.DateTime> mDate)
        {
            var mBaseGrParameter = mBaseGr != null ?
                new ObjectParameter("mBaseGr", mBaseGr) :
                new ObjectParameter("mBaseGr", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOutstandingData", mBaseGrParameter, mBranchParameter, mDateParameter);
        }
    
        public virtual int GetRowCount(string mFormatCode, string mBranch, string mUserID, string mReportStartDate, string mReportEndDate, string mPara, string mFilter, string mDocString, ObjectParameter mRowCount)
        {
            var mFormatCodeParameter = mFormatCode != null ?
                new ObjectParameter("mFormatCode", mFormatCode) :
                new ObjectParameter("mFormatCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mUserIDParameter = mUserID != null ?
                new ObjectParameter("mUserID", mUserID) :
                new ObjectParameter("mUserID", typeof(string));
    
            var mReportStartDateParameter = mReportStartDate != null ?
                new ObjectParameter("mReportStartDate", mReportStartDate) :
                new ObjectParameter("mReportStartDate", typeof(string));
    
            var mReportEndDateParameter = mReportEndDate != null ?
                new ObjectParameter("mReportEndDate", mReportEndDate) :
                new ObjectParameter("mReportEndDate", typeof(string));
    
            var mParaParameter = mPara != null ?
                new ObjectParameter("mPara", mPara) :
                new ObjectParameter("mPara", typeof(string));
    
            var mFilterParameter = mFilter != null ?
                new ObjectParameter("mFilter", mFilter) :
                new ObjectParameter("mFilter", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRowCount", mFormatCodeParameter, mBranchParameter, mUserIDParameter, mReportStartDateParameter, mReportEndDateParameter, mParaParameter, mFilterParameter, mDocStringParameter, mRowCount);
        }
    
        public virtual int SPDoc_ProformaInvoice(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_ProformaInvoice", mTableKeyParameter);
        }
    
        public virtual int SPDoc_PurchaseBills(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_PurchaseBills", mTableKeyParameter);
        }
    
        public virtual int SPDoc_PurchaseEnquiry(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_PurchaseEnquiry", mTableKeyParameter);
        }
    
        public virtual int SPDoc_PurchaseIndents(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_PurchaseIndents", mTableKeyParameter);
        }
    
        public virtual int SPDoc_PurchaseOrders(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_PurchaseOrders", mTableKeyParameter);
        }
    
        public virtual int SPDoc_PurchaseQuotes(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_PurchaseQuotes", mTableKeyParameter);
        }
    
        public virtual int SPDoc_SalesEnquiry(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_SalesEnquiry", mTableKeyParameter);
        }
    
        public virtual int SPDoc_SalesInvoice(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_SalesInvoice", mTableKeyParameter);
        }
    
        public virtual int SPDoc_SalesOrders(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_SalesOrders", mTableKeyParameter);
        }
    
        public virtual int SPDoc_SalesQuotes(string mTableKey)
        {
            var mTableKeyParameter = mTableKey != null ?
                new ObjectParameter("mTableKey", mTableKey) :
                new ObjectParameter("mTableKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDoc_SalesQuotes", mTableKeyParameter);
        }
    
        public virtual ObjectResult<SPREP_AccountLedgerPrintData_Result> SPREP_AccountLedgerPrintData(string mCode, string mBranch, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2, Nullable<int> mLocationCode)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            var mLocationCodeParameter = mLocationCode.HasValue ?
                new ObjectParameter("mLocationCode", mLocationCode) :
                new ObjectParameter("mLocationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPREP_AccountLedgerPrintData_Result>("SPREP_AccountLedgerPrintData", mCodeParameter, mBranchParameter, mDate1Parameter, mDate2Parameter, mLocationCodeParameter);
        }
    
        public virtual ObjectResult<SPREP_PaymentReminder_Result> SPREP_PaymentReminder(string mCode, string mBranch, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2, Nullable<int> mLocationCode)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            var mLocationCodeParameter = mLocationCode.HasValue ?
                new ObjectParameter("mLocationCode", mLocationCode) :
                new ObjectParameter("mLocationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPREP_PaymentReminder_Result>("SPREP_PaymentReminder", mCodeParameter, mBranchParameter, mDate1Parameter, mDate2Parameter, mLocationCodeParameter);
        }
    
        public virtual int SPTFAT_AccountLedgerPrintMulti(string mCode, string mBranch, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2, Nullable<int> mLocationCode)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            var mLocationCodeParameter = mLocationCode.HasValue ?
                new ObjectParameter("mLocationCode", mLocationCode) :
                new ObjectParameter("mLocationCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_AccountLedgerPrintMulti", mCodeParameter, mBranchParameter, mDate1Parameter, mDate2Parameter, mLocationCodeParameter);
        }
    
        public virtual int SPTFAT_AcLedgerPrint(string mCode, string mBranch, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_AcLedgerPrint", mCodeParameter, mBranchParameter, mDate1Parameter, mDate2Parameter);
        }
    
        public virtual int SPTFAT_BankReconciliation(string mCode, string mBranch, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2, Nullable<double> mClosing, Nullable<double> mbClosing, string mDocString)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            var mClosingParameter = mClosing.HasValue ?
                new ObjectParameter("mClosing", mClosing) :
                new ObjectParameter("mClosing", typeof(double));
    
            var mbClosingParameter = mbClosing.HasValue ?
                new ObjectParameter("mbClosing", mbClosing) :
                new ObjectParameter("mbClosing", typeof(double));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_BankReconciliation", mCodeParameter, mBranchParameter, mDate1Parameter, mDate2Parameter, mClosingParameter, mbClosingParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_CopyAndInsertBack(string mtable, string mparentkey)
        {
            var mtableParameter = mtable != null ?
                new ObjectParameter("mtable", mtable) :
                new ObjectParameter("mtable", typeof(string));
    
            var mparentkeyParameter = mparentkey != null ?
                new ObjectParameter("mparentkey", mparentkey) :
                new ObjectParameter("mparentkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_CopyAndInsertBack", mtableParameter, mparentkeyParameter);
        }
    
        public virtual int SPTFAT_CopyRecord2Self(string mtable, string mwhere, string mupdate)
        {
            var mtableParameter = mtable != null ?
                new ObjectParameter("mtable", mtable) :
                new ObjectParameter("mtable", typeof(string));
    
            var mwhereParameter = mwhere != null ?
                new ObjectParameter("mwhere", mwhere) :
                new ObjectParameter("mwhere", typeof(string));
    
            var mupdateParameter = mupdate != null ?
                new ObjectParameter("mupdate", mupdate) :
                new ObjectParameter("mupdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_CopyRecord2Self", mtableParameter, mwhereParameter, mupdateParameter);
        }
    
        public virtual int SPTFAT_CreateCharges(string mType, string mMainType)
        {
            var mTypeParameter = mType != null ?
                new ObjectParameter("mType", mType) :
                new ObjectParameter("mType", typeof(string));
    
            var mMainTypeParameter = mMainType != null ?
                new ObjectParameter("mMainType", mMainType) :
                new ObjectParameter("mMainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_CreateCharges", mTypeParameter, mMainTypeParameter);
        }
    
        public virtual int SPTFAT_CRM_GenerateTrxData(string mCode, string mBranch, string mShow, string mDocString)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mShowParameter = mShow != null ?
                new ObjectParameter("mShow", mShow) :
                new ObjectParameter("mShow", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_CRM_GenerateTrxData", mCodeParameter, mBranchParameter, mShowParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_DeleteTempOS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_DeleteTempOS");
        }
    
        public virtual int SPTFAT_DeleteTempTable(string mTable)
        {
            var mTableParameter = mTable != null ?
                new ObjectParameter("mTable", mTable) :
                new ObjectParameter("mTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_DeleteTempTable", mTableParameter);
        }
    
        public virtual int SPTFAT_ExecuteSSRSReport(string mFormatCode, string mAlias, string mOrderBy, string mBranch, string mUserID, string mReportStartDate, string mReportEndDate, string mPara, string mFilter, string mDocString)
        {
            var mFormatCodeParameter = mFormatCode != null ?
                new ObjectParameter("mFormatCode", mFormatCode) :
                new ObjectParameter("mFormatCode", typeof(string));
    
            var mAliasParameter = mAlias != null ?
                new ObjectParameter("mAlias", mAlias) :
                new ObjectParameter("mAlias", typeof(string));
    
            var mOrderByParameter = mOrderBy != null ?
                new ObjectParameter("mOrderBy", mOrderBy) :
                new ObjectParameter("mOrderBy", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mUserIDParameter = mUserID != null ?
                new ObjectParameter("mUserID", mUserID) :
                new ObjectParameter("mUserID", typeof(string));
    
            var mReportStartDateParameter = mReportStartDate != null ?
                new ObjectParameter("mReportStartDate", mReportStartDate) :
                new ObjectParameter("mReportStartDate", typeof(string));
    
            var mReportEndDateParameter = mReportEndDate != null ?
                new ObjectParameter("mReportEndDate", mReportEndDate) :
                new ObjectParameter("mReportEndDate", typeof(string));
    
            var mParaParameter = mPara != null ?
                new ObjectParameter("mPara", mPara) :
                new ObjectParameter("mPara", typeof(string));
    
            var mFilterParameter = mFilter != null ?
                new ObjectParameter("mFilter", mFilter) :
                new ObjectParameter("mFilter", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_ExecuteSSRSReport", mFormatCodeParameter, mAliasParameter, mOrderByParameter, mBranchParameter, mUserIDParameter, mReportStartDateParameter, mReportEndDateParameter, mParaParameter, mFilterParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_GenerateGroupsMain()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GenerateGroupsMain");
        }
    
        public virtual int SPTFAT_GenerateGroupStructure(string mGroup, Nullable<int> mCnt, ObjectParameter mCount)
        {
            var mGroupParameter = mGroup != null ?
                new ObjectParameter("mGroup", mGroup) :
                new ObjectParameter("mGroup", typeof(string));
    
            var mCntParameter = mCnt.HasValue ?
                new ObjectParameter("mCnt", mCnt) :
                new ObjectParameter("mCnt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GenerateGroupStructure", mGroupParameter, mCntParameter, mCount);
        }
    
        public virtual int SPTFAT_GenerateTFormatBS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GenerateTFormatBS");
        }
    
        public virtual int SPTFAT_GenerateTFormatPL(string mBranch, Nullable<int> mLocation, Nullable<System.DateTime> mDate1, Nullable<System.DateTime> mDate2)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mLocationParameter = mLocation.HasValue ?
                new ObjectParameter("mLocation", mLocation) :
                new ObjectParameter("mLocation", typeof(int));
    
            var mDate1Parameter = mDate1.HasValue ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(System.DateTime));
    
            var mDate2Parameter = mDate2.HasValue ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GenerateTFormatPL", mBranchParameter, mLocationParameter, mDate1Parameter, mDate2Parameter);
        }
    
        public virtual int SPTFAT_GetAccountSchedule(string mGroup)
        {
            var mGroupParameter = mGroup != null ?
                new ObjectParameter("mGroup", mGroup) :
                new ObjectParameter("mGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GetAccountSchedule", mGroupParameter);
        }
    
        public virtual int SPTFAT_GetBillOfMaterial(string bOMSrl, string itemCode, string mParentQty, string mBranch, Nullable<System.DateTime> mDate, Nullable<bool> mAddParent, Nullable<bool> mmultilevel)
        {
            var bOMSrlParameter = bOMSrl != null ?
                new ObjectParameter("BOMSrl", bOMSrl) :
                new ObjectParameter("BOMSrl", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var mParentQtyParameter = mParentQty != null ?
                new ObjectParameter("mParentQty", mParentQty) :
                new ObjectParameter("mParentQty", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            var mAddParentParameter = mAddParent.HasValue ?
                new ObjectParameter("mAddParent", mAddParent) :
                new ObjectParameter("mAddParent", typeof(bool));
    
            var mmultilevelParameter = mmultilevel.HasValue ?
                new ObjectParameter("mmultilevel", mmultilevel) :
                new ObjectParameter("mmultilevel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GetBillOfMaterial", bOMSrlParameter, itemCodeParameter, mParentQtyParameter, mBranchParameter, mDateParameter, mAddParentParameter, mmultilevelParameter);
        }
    
        public virtual int SPTFAT_GetFIFODocuments(string mBranch, string mCode, Nullable<int> mStore, Nullable<double> mBalance, string mDate2)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mStoreParameter = mStore.HasValue ?
                new ObjectParameter("mStore", mStore) :
                new ObjectParameter("mStore", typeof(int));
    
            var mBalanceParameter = mBalance.HasValue ?
                new ObjectParameter("mBalance", mBalance) :
                new ObjectParameter("mBalance", typeof(double));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_GetFIFODocuments", mBranchParameter, mCodeParameter, mStoreParameter, mBalanceParameter, mDate2Parameter);
        }
    
        public virtual ObjectResult<SPTFAT_GetHSNSummary_Result> SPTFAT_GetHSNSummary(string mParentKey)
        {
            var mParentKeyParameter = mParentKey != null ?
                new ObjectParameter("mParentKey", mParentKey) :
                new ObjectParameter("mParentKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPTFAT_GetHSNSummary_Result>("SPTFAT_GetHSNSummary", mParentKeyParameter);
        }
    
        public virtual int SPTFAT_ItemDayBooks(string mBranch, string mDate1, string mDate2, string mItems, string mLocations)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1 != null ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mItemsParameter = mItems != null ?
                new ObjectParameter("mItems", mItems) :
                new ObjectParameter("mItems", typeof(string));
    
            var mLocationsParameter = mLocations != null ?
                new ObjectParameter("mLocations", mLocations) :
                new ObjectParameter("mLocations", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_ItemDayBooks", mBranchParameter, mDate1Parameter, mDate2Parameter, mItemsParameter, mLocationsParameter);
        }
    
        public virtual int SPTFAT_LedgerDailySummary(string mCode, string mBranch, Nullable<System.DateTime> mStartDate, Nullable<System.DateTime> mEndDate, string mDocString)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mStartDateParameter = mStartDate.HasValue ?
                new ObjectParameter("mStartDate", mStartDate) :
                new ObjectParameter("mStartDate", typeof(System.DateTime));
    
            var mEndDateParameter = mEndDate.HasValue ?
                new ObjectParameter("mEndDate", mEndDate) :
                new ObjectParameter("mEndDate", typeof(System.DateTime));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_LedgerDailySummary", mCodeParameter, mBranchParameter, mStartDateParameter, mEndDateParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_LedgerMthSummary(string mCode, string mBranch, Nullable<System.DateTime> mStartDate, string mDocString)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mStartDateParameter = mStartDate.HasValue ?
                new ObjectParameter("mStartDate", mStartDate) :
                new ObjectParameter("mStartDate", typeof(System.DateTime));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_LedgerMthSummary", mCodeParameter, mBranchParameter, mStartDateParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_LedOSAgeing(string mCode, Nullable<System.DateTime> mDate, string mDocString)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_LedOSAgeing", mCodeParameter, mDateParameter, mDocStringParameter);
        }
    
        public virtual ObjectResult<SPTFAT_MonthlyAccountSummary_Result> SPTFAT_MonthlyAccountSummary(string mGroup, string mBranch, Nullable<System.DateTime> mStartDate, Nullable<System.DateTime> mEndDate)
        {
            var mGroupParameter = mGroup != null ?
                new ObjectParameter("mGroup", mGroup) :
                new ObjectParameter("mGroup", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mStartDateParameter = mStartDate.HasValue ?
                new ObjectParameter("mStartDate", mStartDate) :
                new ObjectParameter("mStartDate", typeof(System.DateTime));
    
            var mEndDateParameter = mEndDate.HasValue ?
                new ObjectParameter("mEndDate", mEndDate) :
                new ObjectParameter("mEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPTFAT_MonthlyAccountSummary_Result>("SPTFAT_MonthlyAccountSummary", mGroupParameter, mBranchParameter, mStartDateParameter, mEndDateParameter);
        }
    
        public virtual int SPTFAT_QuickBalances(string mDate1, string mDate2, string mBranch, string mWhat, Nullable<bool> mWithDetails, Nullable<int> mLocation, string excludetype, string mDocString, Nullable<bool> mSuppress, string muserid, Nullable<double> mclosingstock)
        {
            var mDate1Parameter = mDate1 != null ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mWhatParameter = mWhat != null ?
                new ObjectParameter("mWhat", mWhat) :
                new ObjectParameter("mWhat", typeof(string));
    
            var mWithDetailsParameter = mWithDetails.HasValue ?
                new ObjectParameter("mWithDetails", mWithDetails) :
                new ObjectParameter("mWithDetails", typeof(bool));
    
            var mLocationParameter = mLocation.HasValue ?
                new ObjectParameter("mLocation", mLocation) :
                new ObjectParameter("mLocation", typeof(int));
    
            var excludetypeParameter = excludetype != null ?
                new ObjectParameter("excludetype", excludetype) :
                new ObjectParameter("excludetype", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            var mSuppressParameter = mSuppress.HasValue ?
                new ObjectParameter("mSuppress", mSuppress) :
                new ObjectParameter("mSuppress", typeof(bool));
    
            var museridParameter = muserid != null ?
                new ObjectParameter("muserid", muserid) :
                new ObjectParameter("muserid", typeof(string));
    
            var mclosingstockParameter = mclosingstock.HasValue ?
                new ObjectParameter("mclosingstock", mclosingstock) :
                new ObjectParameter("mclosingstock", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_QuickBalances", mDate1Parameter, mDate2Parameter, mBranchParameter, mWhatParameter, mWithDetailsParameter, mLocationParameter, excludetypeParameter, mDocStringParameter, mSuppressParameter, museridParameter, mclosingstockParameter);
        }
    
        public virtual int SPTFAT_QuickBranchBalances(string mDate1, string mDate2, string mBranch, string mWhat, Nullable<bool> mWithDetails, Nullable<int> mLocation, string excludetype, string mDocString, Nullable<bool> mSuppress, string muserid)
        {
            var mDate1Parameter = mDate1 != null ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mWhatParameter = mWhat != null ?
                new ObjectParameter("mWhat", mWhat) :
                new ObjectParameter("mWhat", typeof(string));
    
            var mWithDetailsParameter = mWithDetails.HasValue ?
                new ObjectParameter("mWithDetails", mWithDetails) :
                new ObjectParameter("mWithDetails", typeof(bool));
    
            var mLocationParameter = mLocation.HasValue ?
                new ObjectParameter("mLocation", mLocation) :
                new ObjectParameter("mLocation", typeof(int));
    
            var excludetypeParameter = excludetype != null ?
                new ObjectParameter("excludetype", excludetype) :
                new ObjectParameter("excludetype", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            var mSuppressParameter = mSuppress.HasValue ?
                new ObjectParameter("mSuppress", mSuppress) :
                new ObjectParameter("mSuppress", typeof(bool));
    
            var museridParameter = muserid != null ?
                new ObjectParameter("muserid", muserid) :
                new ObjectParameter("muserid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_QuickBranchBalances", mDate1Parameter, mDate2Parameter, mBranchParameter, mWhatParameter, mWithDetailsParameter, mLocationParameter, excludetypeParameter, mDocStringParameter, mSuppressParameter, museridParameter);
        }
    
        public virtual int SPTFAT_QuickMonthlyBalances(string mDate1, string mDate2, string mBranch, string mWhat, Nullable<bool> mWithDetails, Nullable<int> mLocation, string excludetype, string mDocString, Nullable<bool> mSuppress, string muserid)
        {
            var mDate1Parameter = mDate1 != null ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mWhatParameter = mWhat != null ?
                new ObjectParameter("mWhat", mWhat) :
                new ObjectParameter("mWhat", typeof(string));
    
            var mWithDetailsParameter = mWithDetails.HasValue ?
                new ObjectParameter("mWithDetails", mWithDetails) :
                new ObjectParameter("mWithDetails", typeof(bool));
    
            var mLocationParameter = mLocation.HasValue ?
                new ObjectParameter("mLocation", mLocation) :
                new ObjectParameter("mLocation", typeof(int));
    
            var excludetypeParameter = excludetype != null ?
                new ObjectParameter("excludetype", excludetype) :
                new ObjectParameter("excludetype", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            var mSuppressParameter = mSuppress.HasValue ?
                new ObjectParameter("mSuppress", mSuppress) :
                new ObjectParameter("mSuppress", typeof(bool));
    
            var museridParameter = muserid != null ?
                new ObjectParameter("muserid", muserid) :
                new ObjectParameter("muserid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_QuickMonthlyBalances", mDate1Parameter, mDate2Parameter, mBranchParameter, mWhatParameter, mWithDetailsParameter, mLocationParameter, excludetypeParameter, mDocStringParameter, mSuppressParameter, museridParameter);
        }
    
        public virtual int SPTFAT_ReceivableAnalysis(string mBaseGr, Nullable<System.DateTime> mDate, string mBranch, string mLocations, Nullable<bool> mConsiderCRPR, Nullable<bool> mSuppressZero, string mArea, string mParties, string mGrps, string mSalesman, string mBroker, string mCategory, Nullable<bool> mRefTillDate, string mDocString, string mCustomer)
        {
            var mBaseGrParameter = mBaseGr != null ?
                new ObjectParameter("mBaseGr", mBaseGr) :
                new ObjectParameter("mBaseGr", typeof(string));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mLocationsParameter = mLocations != null ?
                new ObjectParameter("mLocations", mLocations) :
                new ObjectParameter("mLocations", typeof(string));
    
            var mConsiderCRPRParameter = mConsiderCRPR.HasValue ?
                new ObjectParameter("mConsiderCRPR", mConsiderCRPR) :
                new ObjectParameter("mConsiderCRPR", typeof(bool));
    
            var mSuppressZeroParameter = mSuppressZero.HasValue ?
                new ObjectParameter("mSuppressZero", mSuppressZero) :
                new ObjectParameter("mSuppressZero", typeof(bool));
    
            var mAreaParameter = mArea != null ?
                new ObjectParameter("mArea", mArea) :
                new ObjectParameter("mArea", typeof(string));
    
            var mPartiesParameter = mParties != null ?
                new ObjectParameter("mParties", mParties) :
                new ObjectParameter("mParties", typeof(string));
    
            var mGrpsParameter = mGrps != null ?
                new ObjectParameter("mGrps", mGrps) :
                new ObjectParameter("mGrps", typeof(string));
    
            var mSalesmanParameter = mSalesman != null ?
                new ObjectParameter("mSalesman", mSalesman) :
                new ObjectParameter("mSalesman", typeof(string));
    
            var mBrokerParameter = mBroker != null ?
                new ObjectParameter("mBroker", mBroker) :
                new ObjectParameter("mBroker", typeof(string));
    
            var mCategoryParameter = mCategory != null ?
                new ObjectParameter("mCategory", mCategory) :
                new ObjectParameter("mCategory", typeof(string));
    
            var mRefTillDateParameter = mRefTillDate.HasValue ?
                new ObjectParameter("mRefTillDate", mRefTillDate) :
                new ObjectParameter("mRefTillDate", typeof(bool));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            var mCustomerParameter = mCustomer != null ?
                new ObjectParameter("mCustomer", mCustomer) :
                new ObjectParameter("mCustomer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_ReceivableAnalysis", mBaseGrParameter, mDateParameter, mBranchParameter, mLocationsParameter, mConsiderCRPRParameter, mSuppressZeroParameter, mAreaParameter, mPartiesParameter, mGrpsParameter, mSalesmanParameter, mBrokerParameter, mCategoryParameter, mRefTillDateParameter, mDocStringParameter, mCustomerParameter);
        }
    
        public virtual int SPTFAT_ReceivableWithRefDoc(string mBaseGr, Nullable<System.DateTime> mDate, string mBranch, string mLocations, Nullable<bool> mConsiderCRPR, Nullable<bool> mSuppressZero, string mArea, string mParties, string mGrps, string mSalesman, string mBroker, string mCategory, Nullable<bool> mRefTillDate, string mDocString, string mCustomer)
        {
            var mBaseGrParameter = mBaseGr != null ?
                new ObjectParameter("mBaseGr", mBaseGr) :
                new ObjectParameter("mBaseGr", typeof(string));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mLocationsParameter = mLocations != null ?
                new ObjectParameter("mLocations", mLocations) :
                new ObjectParameter("mLocations", typeof(string));
    
            var mConsiderCRPRParameter = mConsiderCRPR.HasValue ?
                new ObjectParameter("mConsiderCRPR", mConsiderCRPR) :
                new ObjectParameter("mConsiderCRPR", typeof(bool));
    
            var mSuppressZeroParameter = mSuppressZero.HasValue ?
                new ObjectParameter("mSuppressZero", mSuppressZero) :
                new ObjectParameter("mSuppressZero", typeof(bool));
    
            var mAreaParameter = mArea != null ?
                new ObjectParameter("mArea", mArea) :
                new ObjectParameter("mArea", typeof(string));
    
            var mPartiesParameter = mParties != null ?
                new ObjectParameter("mParties", mParties) :
                new ObjectParameter("mParties", typeof(string));
    
            var mGrpsParameter = mGrps != null ?
                new ObjectParameter("mGrps", mGrps) :
                new ObjectParameter("mGrps", typeof(string));
    
            var mSalesmanParameter = mSalesman != null ?
                new ObjectParameter("mSalesman", mSalesman) :
                new ObjectParameter("mSalesman", typeof(string));
    
            var mBrokerParameter = mBroker != null ?
                new ObjectParameter("mBroker", mBroker) :
                new ObjectParameter("mBroker", typeof(string));
    
            var mCategoryParameter = mCategory != null ?
                new ObjectParameter("mCategory", mCategory) :
                new ObjectParameter("mCategory", typeof(string));
    
            var mRefTillDateParameter = mRefTillDate.HasValue ?
                new ObjectParameter("mRefTillDate", mRefTillDate) :
                new ObjectParameter("mRefTillDate", typeof(bool));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            var mCustomerParameter = mCustomer != null ?
                new ObjectParameter("mCustomer", mCustomer) :
                new ObjectParameter("mCustomer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_ReceivableWithRefDoc", mBaseGrParameter, mDateParameter, mBranchParameter, mLocationsParameter, mConsiderCRPRParameter, mSuppressZeroParameter, mAreaParameter, mPartiesParameter, mGrpsParameter, mSalesmanParameter, mBrokerParameter, mCategoryParameter, mRefTillDateParameter, mDocStringParameter, mCustomerParameter);
        }
    
        public virtual int SPTFAT_ReverseCashBank(string mparentkey, string mbranch, string mprefix, Nullable<System.DateTime> mdocdate)
        {
            var mparentkeyParameter = mparentkey != null ?
                new ObjectParameter("mparentkey", mparentkey) :
                new ObjectParameter("mparentkey", typeof(string));
    
            var mbranchParameter = mbranch != null ?
                new ObjectParameter("mbranch", mbranch) :
                new ObjectParameter("mbranch", typeof(string));
    
            var mprefixParameter = mprefix != null ?
                new ObjectParameter("mprefix", mprefix) :
                new ObjectParameter("mprefix", typeof(string));
    
            var mdocdateParameter = mdocdate.HasValue ?
                new ObjectParameter("mdocdate", mdocdate) :
                new ObjectParameter("mdocdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_ReverseCashBank", mparentkeyParameter, mbranchParameter, mprefixParameter, mdocdateParameter);
        }
    
        public virtual int SPTFAT_SetAuthorisation(string mParentKey, string muserid, string mAuth)
        {
            var mParentKeyParameter = mParentKey != null ?
                new ObjectParameter("mParentKey", mParentKey) :
                new ObjectParameter("mParentKey", typeof(string));
    
            var museridParameter = muserid != null ?
                new ObjectParameter("muserid", muserid) :
                new ObjectParameter("muserid", typeof(string));
    
            var mAuthParameter = mAuth != null ?
                new ObjectParameter("mAuth", mAuth) :
                new ObjectParameter("mAuth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_SetAuthorisation", mParentKeyParameter, museridParameter, mAuthParameter);
        }
    
        public virtual int SPTFAT_StockAgeing(string mBranch, string mItemGroups, string mItems, Nullable<int> mStore, Nullable<System.DateTime> mDate)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mItemGroupsParameter = mItemGroups != null ?
                new ObjectParameter("mItemGroups", mItemGroups) :
                new ObjectParameter("mItemGroups", typeof(string));
    
            var mItemsParameter = mItems != null ?
                new ObjectParameter("mItems", mItems) :
                new ObjectParameter("mItems", typeof(string));
    
            var mStoreParameter = mStore.HasValue ?
                new ObjectParameter("mStore", mStore) :
                new ObjectParameter("mStore", typeof(int));
    
            var mDateParameter = mDate.HasValue ?
                new ObjectParameter("mDate", mDate) :
                new ObjectParameter("mDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_StockAgeing", mBranchParameter, mItemGroupsParameter, mItemsParameter, mStoreParameter, mDateParameter);
        }
    
        public virtual int SPTFAT_StockMovementStatus(string mBranch, string mDate2, string mStores, string mCategory, string mItemGroups, string mItems, string mParties, string mLocations, Nullable<int> mpara1, Nullable<int> mpara2, Nullable<bool> msuppress)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mStoresParameter = mStores != null ?
                new ObjectParameter("mStores", mStores) :
                new ObjectParameter("mStores", typeof(string));
    
            var mCategoryParameter = mCategory != null ?
                new ObjectParameter("mCategory", mCategory) :
                new ObjectParameter("mCategory", typeof(string));
    
            var mItemGroupsParameter = mItemGroups != null ?
                new ObjectParameter("mItemGroups", mItemGroups) :
                new ObjectParameter("mItemGroups", typeof(string));
    
            var mItemsParameter = mItems != null ?
                new ObjectParameter("mItems", mItems) :
                new ObjectParameter("mItems", typeof(string));
    
            var mPartiesParameter = mParties != null ?
                new ObjectParameter("mParties", mParties) :
                new ObjectParameter("mParties", typeof(string));
    
            var mLocationsParameter = mLocations != null ?
                new ObjectParameter("mLocations", mLocations) :
                new ObjectParameter("mLocations", typeof(string));
    
            var mpara1Parameter = mpara1.HasValue ?
                new ObjectParameter("mpara1", mpara1) :
                new ObjectParameter("mpara1", typeof(int));
    
            var mpara2Parameter = mpara2.HasValue ?
                new ObjectParameter("mpara2", mpara2) :
                new ObjectParameter("mpara2", typeof(int));
    
            var msuppressParameter = msuppress.HasValue ?
                new ObjectParameter("msuppress", msuppress) :
                new ObjectParameter("msuppress", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_StockMovementStatus", mBranchParameter, mDate2Parameter, mStoresParameter, mCategoryParameter, mItemGroupsParameter, mItemsParameter, mPartiesParameter, mLocationsParameter, mpara1Parameter, mpara2Parameter, msuppressParameter);
        }
    
        public virtual int SPTFAT_StockMthSummary(string mCode, string mBranch, Nullable<System.DateTime> mStartDate)
        {
            var mCodeParameter = mCode != null ?
                new ObjectParameter("mCode", mCode) :
                new ObjectParameter("mCode", typeof(string));
    
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mStartDateParameter = mStartDate.HasValue ?
                new ObjectParameter("mStartDate", mStartDate) :
                new ObjectParameter("mStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_StockMthSummary", mCodeParameter, mBranchParameter, mStartDateParameter);
        }
    
        public virtual int SPTFAT_StockStatement(string mBranch, string mDate1, string mDate2, string mStores, string mTypes, string mCategory, string mItemGroups, string mItems, string mLocations, Nullable<bool> mTransfer, Nullable<bool> mNonStock, Nullable<bool> mInActive, Nullable<int> mFilter, Nullable<bool> mCostRate, string mMethod, string mDocString)
        {
            var mBranchParameter = mBranch != null ?
                new ObjectParameter("mBranch", mBranch) :
                new ObjectParameter("mBranch", typeof(string));
    
            var mDate1Parameter = mDate1 != null ?
                new ObjectParameter("mDate1", mDate1) :
                new ObjectParameter("mDate1", typeof(string));
    
            var mDate2Parameter = mDate2 != null ?
                new ObjectParameter("mDate2", mDate2) :
                new ObjectParameter("mDate2", typeof(string));
    
            var mStoresParameter = mStores != null ?
                new ObjectParameter("mStores", mStores) :
                new ObjectParameter("mStores", typeof(string));
    
            var mTypesParameter = mTypes != null ?
                new ObjectParameter("mTypes", mTypes) :
                new ObjectParameter("mTypes", typeof(string));
    
            var mCategoryParameter = mCategory != null ?
                new ObjectParameter("mCategory", mCategory) :
                new ObjectParameter("mCategory", typeof(string));
    
            var mItemGroupsParameter = mItemGroups != null ?
                new ObjectParameter("mItemGroups", mItemGroups) :
                new ObjectParameter("mItemGroups", typeof(string));
    
            var mItemsParameter = mItems != null ?
                new ObjectParameter("mItems", mItems) :
                new ObjectParameter("mItems", typeof(string));
    
            var mLocationsParameter = mLocations != null ?
                new ObjectParameter("mLocations", mLocations) :
                new ObjectParameter("mLocations", typeof(string));
    
            var mTransferParameter = mTransfer.HasValue ?
                new ObjectParameter("mTransfer", mTransfer) :
                new ObjectParameter("mTransfer", typeof(bool));
    
            var mNonStockParameter = mNonStock.HasValue ?
                new ObjectParameter("mNonStock", mNonStock) :
                new ObjectParameter("mNonStock", typeof(bool));
    
            var mInActiveParameter = mInActive.HasValue ?
                new ObjectParameter("mInActive", mInActive) :
                new ObjectParameter("mInActive", typeof(bool));
    
            var mFilterParameter = mFilter.HasValue ?
                new ObjectParameter("mFilter", mFilter) :
                new ObjectParameter("mFilter", typeof(int));
    
            var mCostRateParameter = mCostRate.HasValue ?
                new ObjectParameter("mCostRate", mCostRate) :
                new ObjectParameter("mCostRate", typeof(bool));
    
            var mMethodParameter = mMethod != null ?
                new ObjectParameter("mMethod", mMethod) :
                new ObjectParameter("mMethod", typeof(string));
    
            var mDocStringParameter = mDocString != null ?
                new ObjectParameter("mDocString", mDocString) :
                new ObjectParameter("mDocString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_StockStatement", mBranchParameter, mDate1Parameter, mDate2Parameter, mStoresParameter, mTypesParameter, mCategoryParameter, mItemGroupsParameter, mItemsParameter, mLocationsParameter, mTransferParameter, mNonStockParameter, mInActiveParameter, mFilterParameter, mCostRateParameter, mMethodParameter, mDocStringParameter);
        }
    
        public virtual int SPTFAT_UpdateGrpKey(string mTable)
        {
            var mTableParameter = mTable != null ?
                new ObjectParameter("mTable", mTable) :
                new ObjectParameter("mTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTFAT_UpdateGrpKey", mTableParameter);
        }
    }
}
